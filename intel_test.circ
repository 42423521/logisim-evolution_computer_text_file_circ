<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Splitter">
      <a name="appear" val="center"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </tool>
    <tool name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="north"/>
    </tool>
    <tool name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="16"/>
    </tool>
    <tool name="Tunnel">
      <a name="width" val="2"/>
    </tool>
    <tool name="Pull Resistor">
      <a name="facing" val="north"/>
    </tool>
    <tool name="Clock">
      <a name="facing" val="north"/>
    </tool>
    <tool name="Constant">
      <a name="value" val="0xff"/>
      <a name="width" val="8"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadFrequency" val="500000.0"/>
    <a name="simulationFrequency" val="2048000.0"/>
    <comp lib="0" loc="(380,340)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,350)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,360)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,370)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,380)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,390)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,400)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,410)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,420)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,430)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,440)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,450)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,460)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,470)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,480)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,490)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,500)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,510)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,520)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,530)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,540)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,550)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,560)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,570)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,580)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,590)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,600)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,610)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,620)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,630)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,640)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(380,650)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="labelfont" val="SansSerif bold 2"/>
      <a name="width" val="64"/>
    </comp>
    <comp loc="(1860,1020)" name="a">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1870,1180)" name="processor">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1870,1460)" name="s">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1870,1570)" name="v">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1970,1100)" name="p_e_core"/>
    <comp loc="(2220,1460)" name="sdc">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(350,850)" name="i9_14980hx_core"/>
    <comp loc="(370,340)" name="i9_14980HX"/>
    <wire from="(270,970)" to="(350,970)"/>
  </circuit>
  <circuit name="CPU">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="CPU"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="16.0"/>
    <comp lib="0" loc="(200,220)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="A"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(200,290)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="B"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="2" loc="(280,360)" name="Demultiplexer"/>
  </circuit>
  <circuit name="ALU">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="ALU"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="16.0"/>
    <comp lib="0" loc="(240,130)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="A"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(240,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="B"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(340,810)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="none"/>
      <a name="bit16" val="none"/>
      <a name="bit17" val="none"/>
      <a name="bit18" val="none"/>
      <a name="bit19" val="none"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="none"/>
      <a name="bit21" val="none"/>
      <a name="bit22" val="none"/>
      <a name="bit23" val="none"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit32" val="none"/>
      <a name="bit33" val="none"/>
      <a name="bit34" val="none"/>
      <a name="bit35" val="none"/>
      <a name="bit36" val="none"/>
      <a name="bit37" val="none"/>
      <a name="bit38" val="none"/>
      <a name="bit39" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="none"/>
      <a name="bit41" val="none"/>
      <a name="bit42" val="none"/>
      <a name="bit43" val="none"/>
      <a name="bit44" val="none"/>
      <a name="bit45" val="none"/>
      <a name="bit46" val="none"/>
      <a name="bit47" val="none"/>
      <a name="bit48" val="none"/>
      <a name="bit49" val="none"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="none"/>
      <a name="bit51" val="none"/>
      <a name="bit52" val="none"/>
      <a name="bit53" val="none"/>
      <a name="bit54" val="none"/>
      <a name="bit55" val="none"/>
      <a name="bit56" val="none"/>
      <a name="bit57" val="none"/>
      <a name="bit58" val="none"/>
      <a name="bit59" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit60" val="none"/>
      <a name="bit61" val="none"/>
      <a name="bit62" val="none"/>
      <a name="bit63" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(370,1230)" name="Power"/>
    <comp lib="0" loc="(380,670)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="none"/>
      <a name="bit16" val="none"/>
      <a name="bit17" val="none"/>
      <a name="bit18" val="none"/>
      <a name="bit19" val="none"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="none"/>
      <a name="bit21" val="none"/>
      <a name="bit22" val="none"/>
      <a name="bit23" val="none"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit32" val="none"/>
      <a name="bit33" val="none"/>
      <a name="bit34" val="none"/>
      <a name="bit35" val="none"/>
      <a name="bit36" val="none"/>
      <a name="bit37" val="none"/>
      <a name="bit38" val="none"/>
      <a name="bit39" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="none"/>
      <a name="bit41" val="none"/>
      <a name="bit42" val="none"/>
      <a name="bit43" val="none"/>
      <a name="bit44" val="none"/>
      <a name="bit45" val="none"/>
      <a name="bit46" val="none"/>
      <a name="bit47" val="none"/>
      <a name="bit48" val="none"/>
      <a name="bit49" val="none"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="none"/>
      <a name="bit51" val="none"/>
      <a name="bit52" val="none"/>
      <a name="bit53" val="none"/>
      <a name="bit54" val="none"/>
      <a name="bit55" val="none"/>
      <a name="bit56" val="none"/>
      <a name="bit57" val="none"/>
      <a name="bit58" val="none"/>
      <a name="bit59" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit60" val="none"/>
      <a name="bit61" val="none"/>
      <a name="bit62" val="none"/>
      <a name="bit63" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(380,740)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="none"/>
      <a name="bit16" val="none"/>
      <a name="bit17" val="none"/>
      <a name="bit18" val="none"/>
      <a name="bit19" val="none"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="none"/>
      <a name="bit21" val="none"/>
      <a name="bit22" val="none"/>
      <a name="bit23" val="none"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit32" val="none"/>
      <a name="bit33" val="none"/>
      <a name="bit34" val="none"/>
      <a name="bit35" val="none"/>
      <a name="bit36" val="none"/>
      <a name="bit37" val="none"/>
      <a name="bit38" val="none"/>
      <a name="bit39" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="none"/>
      <a name="bit41" val="none"/>
      <a name="bit42" val="none"/>
      <a name="bit43" val="none"/>
      <a name="bit44" val="none"/>
      <a name="bit45" val="none"/>
      <a name="bit46" val="none"/>
      <a name="bit47" val="none"/>
      <a name="bit48" val="none"/>
      <a name="bit49" val="none"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="none"/>
      <a name="bit51" val="none"/>
      <a name="bit52" val="none"/>
      <a name="bit53" val="none"/>
      <a name="bit54" val="none"/>
      <a name="bit55" val="none"/>
      <a name="bit56" val="none"/>
      <a name="bit57" val="none"/>
      <a name="bit58" val="none"/>
      <a name="bit59" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit60" val="none"/>
      <a name="bit61" val="none"/>
      <a name="bit62" val="none"/>
      <a name="bit63" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(390,1250)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="none"/>
      <a name="bit16" val="none"/>
      <a name="bit17" val="none"/>
      <a name="bit18" val="none"/>
      <a name="bit19" val="none"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="none"/>
      <a name="bit21" val="none"/>
      <a name="bit22" val="none"/>
      <a name="bit23" val="none"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit32" val="none"/>
      <a name="bit33" val="none"/>
      <a name="bit34" val="none"/>
      <a name="bit35" val="none"/>
      <a name="bit36" val="none"/>
      <a name="bit37" val="none"/>
      <a name="bit38" val="none"/>
      <a name="bit39" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="none"/>
      <a name="bit41" val="none"/>
      <a name="bit42" val="none"/>
      <a name="bit43" val="none"/>
      <a name="bit44" val="none"/>
      <a name="bit45" val="none"/>
      <a name="bit46" val="none"/>
      <a name="bit47" val="none"/>
      <a name="bit48" val="none"/>
      <a name="bit49" val="none"/>
      <a name="bit5" val="none"/>
      <a name="bit50" val="none"/>
      <a name="bit51" val="none"/>
      <a name="bit52" val="none"/>
      <a name="bit53" val="none"/>
      <a name="bit54" val="none"/>
      <a name="bit55" val="none"/>
      <a name="bit56" val="none"/>
      <a name="bit57" val="none"/>
      <a name="bit58" val="none"/>
      <a name="bit59" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit60" val="none"/>
      <a name="bit61" val="none"/>
      <a name="bit62" val="none"/>
      <a name="bit63" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(390,1490)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="0"/>
      <a name="bit11" val="0"/>
      <a name="bit12" val="0"/>
      <a name="bit13" val="0"/>
      <a name="bit14" val="0"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="0"/>
      <a name="bit21" val="0"/>
      <a name="bit22" val="0"/>
      <a name="bit23" val="0"/>
      <a name="bit24" val="0"/>
      <a name="bit25" val="0"/>
      <a name="bit26" val="0"/>
      <a name="bit27" val="0"/>
      <a name="bit28" val="0"/>
      <a name="bit29" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="0"/>
      <a name="bit31" val="0"/>
      <a name="bit32" val="none"/>
      <a name="bit33" val="none"/>
      <a name="bit34" val="none"/>
      <a name="bit35" val="none"/>
      <a name="bit36" val="none"/>
      <a name="bit37" val="none"/>
      <a name="bit38" val="none"/>
      <a name="bit39" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="none"/>
      <a name="bit41" val="none"/>
      <a name="bit42" val="none"/>
      <a name="bit43" val="none"/>
      <a name="bit44" val="none"/>
      <a name="bit45" val="none"/>
      <a name="bit46" val="none"/>
      <a name="bit47" val="none"/>
      <a name="bit48" val="none"/>
      <a name="bit49" val="none"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="none"/>
      <a name="bit51" val="none"/>
      <a name="bit52" val="none"/>
      <a name="bit53" val="none"/>
      <a name="bit54" val="none"/>
      <a name="bit55" val="none"/>
      <a name="bit56" val="none"/>
      <a name="bit57" val="none"/>
      <a name="bit58" val="none"/>
      <a name="bit59" val="none"/>
      <a name="bit6" val="0"/>
      <a name="bit60" val="none"/>
      <a name="bit61" val="none"/>
      <a name="bit62" val="none"/>
      <a name="bit63" val="none"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="0"/>
      <a name="bit9" val="0"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(410,1270)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit0" val="none"/>
      <a name="bit1" val="none"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="none"/>
      <a name="bit16" val="none"/>
      <a name="bit17" val="none"/>
      <a name="bit18" val="none"/>
      <a name="bit19" val="none"/>
      <a name="bit2" val="none"/>
      <a name="bit20" val="none"/>
      <a name="bit21" val="none"/>
      <a name="bit22" val="none"/>
      <a name="bit23" val="none"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="none"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit32" val="none"/>
      <a name="bit33" val="none"/>
      <a name="bit34" val="none"/>
      <a name="bit35" val="none"/>
      <a name="bit36" val="none"/>
      <a name="bit37" val="none"/>
      <a name="bit38" val="none"/>
      <a name="bit39" val="none"/>
      <a name="bit4" val="none"/>
      <a name="bit40" val="none"/>
      <a name="bit41" val="none"/>
      <a name="bit42" val="none"/>
      <a name="bit43" val="none"/>
      <a name="bit44" val="none"/>
      <a name="bit45" val="none"/>
      <a name="bit46" val="none"/>
      <a name="bit47" val="none"/>
      <a name="bit48" val="none"/>
      <a name="bit49" val="none"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="none"/>
      <a name="bit51" val="none"/>
      <a name="bit52" val="none"/>
      <a name="bit53" val="none"/>
      <a name="bit54" val="none"/>
      <a name="bit55" val="none"/>
      <a name="bit56" val="none"/>
      <a name="bit57" val="none"/>
      <a name="bit58" val="none"/>
      <a name="bit59" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit60" val="none"/>
      <a name="bit61" val="none"/>
      <a name="bit62" val="none"/>
      <a name="bit63" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(410,1490)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="fanout" val="32"/>
      <a name="incoming" val="32"/>
    </comp>
    <comp lib="0" loc="(460,1080)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="facing" val="west"/>
      <a name="fanout" val="32"/>
      <a name="incoming" val="32"/>
    </comp>
    <comp lib="0" loc="(500,270)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(500,330)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(550,1090)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(560,1490)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="27"/>
    </comp>
    <comp lib="0" loc="(570,1090)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="0"/>
      <a name="bit11" val="0"/>
      <a name="bit12" val="0"/>
      <a name="bit13" val="0"/>
      <a name="bit14" val="0"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="0"/>
      <a name="bit21" val="0"/>
      <a name="bit22" val="0"/>
      <a name="bit23" val="0"/>
      <a name="bit24" val="0"/>
      <a name="bit25" val="0"/>
      <a name="bit26" val="0"/>
      <a name="bit27" val="0"/>
      <a name="bit28" val="0"/>
      <a name="bit29" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="0"/>
      <a name="bit31" val="0"/>
      <a name="bit32" val="1"/>
      <a name="bit33" val="1"/>
      <a name="bit34" val="1"/>
      <a name="bit35" val="1"/>
      <a name="bit36" val="1"/>
      <a name="bit37" val="1"/>
      <a name="bit38" val="1"/>
      <a name="bit39" val="1"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="1"/>
      <a name="bit41" val="1"/>
      <a name="bit42" val="1"/>
      <a name="bit43" val="1"/>
      <a name="bit44" val="1"/>
      <a name="bit45" val="1"/>
      <a name="bit46" val="1"/>
      <a name="bit47" val="1"/>
      <a name="bit48" val="1"/>
      <a name="bit49" val="1"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="1"/>
      <a name="bit51" val="1"/>
      <a name="bit52" val="1"/>
      <a name="bit53" val="1"/>
      <a name="bit54" val="1"/>
      <a name="bit55" val="1"/>
      <a name="bit56" val="1"/>
      <a name="bit57" val="1"/>
      <a name="bit58" val="1"/>
      <a name="bit59" val="1"/>
      <a name="bit6" val="0"/>
      <a name="bit60" val="1"/>
      <a name="bit61" val="1"/>
      <a name="bit62" val="1"/>
      <a name="bit63" val="1"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="0"/>
      <a name="bit9" val="0"/>
      <a name="facing" val="west"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(590,1490)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="1"/>
      <a name="bit11" val="1"/>
      <a name="bit12" val="1"/>
      <a name="bit13" val="1"/>
      <a name="bit14" val="1"/>
      <a name="bit15" val="1"/>
      <a name="bit16" val="1"/>
      <a name="bit17" val="1"/>
      <a name="bit18" val="1"/>
      <a name="bit19" val="1"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="1"/>
      <a name="bit21" val="1"/>
      <a name="bit22" val="1"/>
      <a name="bit23" val="1"/>
      <a name="bit24" val="1"/>
      <a name="bit25" val="1"/>
      <a name="bit26" val="1"/>
      <a name="bit27" val="1"/>
      <a name="bit28" val="1"/>
      <a name="bit29" val="1"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="1"/>
      <a name="bit31" val="1"/>
      <a name="bit4" val="0"/>
      <a name="bit5" val="1"/>
      <a name="bit6" val="1"/>
      <a name="bit7" val="1"/>
      <a name="bit8" val="1"/>
      <a name="bit9" val="1"/>
      <a name="facing" val="west"/>
      <a name="incoming" val="32"/>
    </comp>
    <comp lib="0" loc="(600,1300)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="0"/>
      <a name="bit11" val="0"/>
      <a name="bit12" val="0"/>
      <a name="bit13" val="0"/>
      <a name="bit14" val="0"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="0"/>
      <a name="bit21" val="0"/>
      <a name="bit22" val="0"/>
      <a name="bit23" val="0"/>
      <a name="bit24" val="0"/>
      <a name="bit25" val="0"/>
      <a name="bit26" val="0"/>
      <a name="bit27" val="0"/>
      <a name="bit28" val="0"/>
      <a name="bit29" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="0"/>
      <a name="bit31" val="0"/>
      <a name="bit32" val="1"/>
      <a name="bit33" val="1"/>
      <a name="bit34" val="1"/>
      <a name="bit35" val="1"/>
      <a name="bit36" val="1"/>
      <a name="bit37" val="1"/>
      <a name="bit38" val="1"/>
      <a name="bit39" val="1"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="1"/>
      <a name="bit41" val="1"/>
      <a name="bit42" val="1"/>
      <a name="bit43" val="1"/>
      <a name="bit44" val="1"/>
      <a name="bit45" val="1"/>
      <a name="bit46" val="1"/>
      <a name="bit47" val="1"/>
      <a name="bit48" val="1"/>
      <a name="bit49" val="1"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="1"/>
      <a name="bit51" val="1"/>
      <a name="bit52" val="1"/>
      <a name="bit53" val="1"/>
      <a name="bit54" val="1"/>
      <a name="bit55" val="1"/>
      <a name="bit56" val="1"/>
      <a name="bit57" val="1"/>
      <a name="bit58" val="1"/>
      <a name="bit59" val="1"/>
      <a name="bit6" val="0"/>
      <a name="bit60" val="1"/>
      <a name="bit61" val="1"/>
      <a name="bit62" val="1"/>
      <a name="bit63" val="1"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="0"/>
      <a name="bit9" val="0"/>
      <a name="facing" val="west"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(630,1430)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="0"/>
      <a name="bit11" val="0"/>
      <a name="bit12" val="0"/>
      <a name="bit13" val="0"/>
      <a name="bit14" val="0"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="0"/>
      <a name="bit21" val="0"/>
      <a name="bit22" val="0"/>
      <a name="bit23" val="0"/>
      <a name="bit24" val="0"/>
      <a name="bit25" val="0"/>
      <a name="bit26" val="0"/>
      <a name="bit27" val="0"/>
      <a name="bit28" val="0"/>
      <a name="bit29" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="0"/>
      <a name="bit31" val="0"/>
      <a name="bit4" val="0"/>
      <a name="bit5" val="0"/>
      <a name="bit6" val="0"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="0"/>
      <a name="bit9" val="0"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="32"/>
    </comp>
    <comp lib="0" loc="(650,1420)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="0"/>
      <a name="bit11" val="0"/>
      <a name="bit12" val="0"/>
      <a name="bit13" val="0"/>
      <a name="bit14" val="0"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="0"/>
      <a name="bit21" val="0"/>
      <a name="bit22" val="0"/>
      <a name="bit23" val="0"/>
      <a name="bit24" val="0"/>
      <a name="bit25" val="0"/>
      <a name="bit26" val="0"/>
      <a name="bit27" val="0"/>
      <a name="bit28" val="0"/>
      <a name="bit29" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="0"/>
      <a name="bit31" val="0"/>
      <a name="bit32" val="none"/>
      <a name="bit33" val="none"/>
      <a name="bit34" val="none"/>
      <a name="bit35" val="none"/>
      <a name="bit36" val="none"/>
      <a name="bit37" val="none"/>
      <a name="bit38" val="none"/>
      <a name="bit39" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="none"/>
      <a name="bit41" val="none"/>
      <a name="bit42" val="none"/>
      <a name="bit43" val="none"/>
      <a name="bit44" val="none"/>
      <a name="bit45" val="none"/>
      <a name="bit46" val="none"/>
      <a name="bit47" val="none"/>
      <a name="bit48" val="none"/>
      <a name="bit49" val="none"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="none"/>
      <a name="bit51" val="none"/>
      <a name="bit52" val="none"/>
      <a name="bit53" val="none"/>
      <a name="bit54" val="none"/>
      <a name="bit55" val="none"/>
      <a name="bit56" val="none"/>
      <a name="bit57" val="none"/>
      <a name="bit58" val="none"/>
      <a name="bit59" val="none"/>
      <a name="bit6" val="0"/>
      <a name="bit60" val="none"/>
      <a name="bit61" val="none"/>
      <a name="bit62" val="none"/>
      <a name="bit63" val="none"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="0"/>
      <a name="bit9" val="0"/>
      <a name="facing" val="west"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(670,1500)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(690,1500)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="0"/>
      <a name="bit11" val="0"/>
      <a name="bit12" val="0"/>
      <a name="bit13" val="0"/>
      <a name="bit14" val="0"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="0"/>
      <a name="bit21" val="0"/>
      <a name="bit22" val="0"/>
      <a name="bit23" val="0"/>
      <a name="bit24" val="0"/>
      <a name="bit25" val="0"/>
      <a name="bit26" val="0"/>
      <a name="bit27" val="0"/>
      <a name="bit28" val="0"/>
      <a name="bit29" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="0"/>
      <a name="bit31" val="0"/>
      <a name="bit32" val="1"/>
      <a name="bit33" val="1"/>
      <a name="bit34" val="1"/>
      <a name="bit35" val="1"/>
      <a name="bit36" val="1"/>
      <a name="bit37" val="1"/>
      <a name="bit38" val="1"/>
      <a name="bit39" val="1"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="1"/>
      <a name="bit41" val="1"/>
      <a name="bit42" val="1"/>
      <a name="bit43" val="1"/>
      <a name="bit44" val="1"/>
      <a name="bit45" val="1"/>
      <a name="bit46" val="1"/>
      <a name="bit47" val="1"/>
      <a name="bit48" val="1"/>
      <a name="bit49" val="1"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="1"/>
      <a name="bit51" val="1"/>
      <a name="bit52" val="1"/>
      <a name="bit53" val="1"/>
      <a name="bit54" val="1"/>
      <a name="bit55" val="1"/>
      <a name="bit56" val="1"/>
      <a name="bit57" val="1"/>
      <a name="bit58" val="1"/>
      <a name="bit59" val="1"/>
      <a name="bit6" val="0"/>
      <a name="bit60" val="1"/>
      <a name="bit61" val="1"/>
      <a name="bit62" val="1"/>
      <a name="bit63" val="1"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="0"/>
      <a name="bit9" val="0"/>
      <a name="facing" val="west"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(800,510)" name="Power"/>
    <comp lib="0" loc="(840,300)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(850,540)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="ALUSEL"/>
      <a name="width" val="5"/>
    </comp>
    <comp lib="0" loc="(880,480)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="10unsigned"/>
    </comp>
    <comp lib="1" loc="(430,600)" name="NOT Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(450,390)" name="OR Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(450,460)" name="AND Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(460,530)" name="XOR Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="2" loc="(140,790)" name="Demultiplexer"/>
    <comp lib="2" loc="(420,1240)" name="Decoder">
      <a name="select" val="5"/>
    </comp>
    <comp lib="2" loc="(470,1480)" name="Priority Encoder">
      <a name="select" val="5"/>
    </comp>
    <comp lib="2" loc="(700,300)" name="Multiplexer">
      <a name="enable" val="true"/>
      <a name="select" val="5"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(440,140)" name="Adder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(440,200)" name="Subtractor">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(440,260)" name="Comparator">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(440,320)" name="Comparator">
      <a name="mode" val="unsigned"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(440,660)" name="Shifter">
      <a name="shift" val="ar"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(440,730)" name="Shifter">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(440,800)" name="Shifter">
      <a name="shift" val="lr"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(440,860)" name="Multiplier">
      <a name="width" val="64"/>
    </comp>
    <comp lib="8" loc="(580,80)" name="Text">
      <a name="text" val="14"/>
    </comp>
    <wire from="(240,130)" to="(390,130)"/>
    <wire from="(240,250)" to="(340,250)"/>
    <wire from="(340,150)" to="(340,210)"/>
    <wire from="(340,150)" to="(400,150)"/>
    <wire from="(340,210)" to="(340,250)"/>
    <wire from="(340,210)" to="(400,210)"/>
    <wire from="(340,250)" to="(340,270)"/>
    <wire from="(340,270)" to="(340,330)"/>
    <wire from="(340,270)" to="(400,270)"/>
    <wire from="(340,330)" to="(340,410)"/>
    <wire from="(340,330)" to="(400,330)"/>
    <wire from="(340,410)" to="(340,480)"/>
    <wire from="(340,410)" to="(400,410)"/>
    <wire from="(340,480)" to="(340,550)"/>
    <wire from="(340,480)" to="(400,480)"/>
    <wire from="(340,550)" to="(340,670)"/>
    <wire from="(340,550)" to="(400,550)"/>
    <wire from="(340,670)" to="(340,740)"/>
    <wire from="(340,670)" to="(380,670)"/>
    <wire from="(340,740)" to="(340,810)"/>
    <wire from="(340,740)" to="(380,740)"/>
    <wire from="(340,810)" to="(340,870)"/>
    <wire from="(340,870)" to="(400,870)"/>
    <wire from="(360,810)" to="(400,810)"/>
    <wire from="(370,1230)" to="(370,1240)"/>
    <wire from="(370,1240)" to="(410,1240)"/>
    <wire from="(390,1250)" to="(390,1270)"/>
    <wire from="(390,1270)" to="(390,1490)"/>
    <wire from="(390,1270)" to="(410,1270)"/>
    <wire from="(390,130)" to="(390,190)"/>
    <wire from="(390,130)" to="(400,130)"/>
    <wire from="(390,190)" to="(390,250)"/>
    <wire from="(390,190)" to="(400,190)"/>
    <wire from="(390,250)" to="(390,310)"/>
    <wire from="(390,250)" to="(400,250)"/>
    <wire from="(390,310)" to="(390,370)"/>
    <wire from="(390,310)" to="(400,310)"/>
    <wire from="(390,370)" to="(390,440)"/>
    <wire from="(390,370)" to="(400,370)"/>
    <wire from="(390,440)" to="(390,510)"/>
    <wire from="(390,440)" to="(400,440)"/>
    <wire from="(390,510)" to="(390,600)"/>
    <wire from="(390,510)" to="(400,510)"/>
    <wire from="(390,600)" to="(390,650)"/>
    <wire from="(390,600)" to="(400,600)"/>
    <wire from="(390,650)" to="(390,720)"/>
    <wire from="(390,650)" to="(400,650)"/>
    <wire from="(390,720)" to="(390,790)"/>
    <wire from="(390,720)" to="(400,720)"/>
    <wire from="(390,790)" to="(390,850)"/>
    <wire from="(390,790)" to="(400,790)"/>
    <wire from="(390,850)" to="(390,1250)"/>
    <wire from="(390,850)" to="(400,850)"/>
    <wire from="(410,1250)" to="(420,1250)"/>
    <wire from="(420,1240)" to="(420,1250)"/>
    <wire from="(430,600)" to="(570,600)"/>
    <wire from="(440,140)" to="(660,140)"/>
    <wire from="(440,200)" to="(460,200)"/>
    <wire from="(440,270)" to="(460,270)"/>
    <wire from="(440,330)" to="(460,330)"/>
    <wire from="(440,660)" to="(580,660)"/>
    <wire from="(440,730)" to="(590,730)"/>
    <wire from="(440,800)" to="(600,800)"/>
    <wire from="(440,860)" to="(610,860)"/>
    <wire from="(450,390)" to="(540,390)"/>
    <wire from="(450,460)" to="(550,460)"/>
    <wire from="(460,1080)" to="(550,1080)"/>
    <wire from="(460,150)" to="(460,200)"/>
    <wire from="(460,150)" to="(660,150)"/>
    <wire from="(460,530)" to="(560,530)"/>
    <wire from="(470,1480)" to="(570,1480)"/>
    <wire from="(500,270)" to="(520,270)"/>
    <wire from="(500,330)" to="(530,330)"/>
    <wire from="(520,160)" to="(520,270)"/>
    <wire from="(520,160)" to="(660,160)"/>
    <wire from="(530,170)" to="(530,330)"/>
    <wire from="(530,170)" to="(660,170)"/>
    <wire from="(540,180)" to="(540,390)"/>
    <wire from="(540,180)" to="(660,180)"/>
    <wire from="(550,190)" to="(550,460)"/>
    <wire from="(550,190)" to="(660,190)"/>
    <wire from="(560,1490)" to="(570,1490)"/>
    <wire from="(560,200)" to="(560,530)"/>
    <wire from="(560,200)" to="(660,200)"/>
    <wire from="(570,1090)" to="(620,1090)"/>
    <wire from="(570,210)" to="(570,600)"/>
    <wire from="(570,210)" to="(660,210)"/>
    <wire from="(580,220)" to="(580,660)"/>
    <wire from="(580,220)" to="(660,220)"/>
    <wire from="(590,1490)" to="(670,1490)"/>
    <wire from="(590,230)" to="(590,730)"/>
    <wire from="(590,230)" to="(660,230)"/>
    <wire from="(600,240)" to="(600,800)"/>
    <wire from="(600,240)" to="(660,240)"/>
    <wire from="(610,250)" to="(610,860)"/>
    <wire from="(610,250)" to="(660,250)"/>
    <wire from="(620,260)" to="(620,1090)"/>
    <wire from="(620,260)" to="(660,260)"/>
    <wire from="(630,270)" to="(630,830)"/>
    <wire from="(630,270)" to="(660,270)"/>
    <wire from="(630,830)" to="(700,830)"/>
    <wire from="(680,460)" to="(680,540)"/>
    <wire from="(680,540)" to="(840,540)"/>
    <wire from="(690,1500)" to="(700,1500)"/>
    <wire from="(690,460)" to="(690,510)"/>
    <wire from="(690,510)" to="(800,510)"/>
    <wire from="(700,300)" to="(840,300)"/>
    <wire from="(700,830)" to="(700,1500)"/>
    <wire from="(840,500)" to="(840,540)"/>
    <wire from="(840,500)" to="(890,500)"/>
    <wire from="(840,540)" to="(850,540)"/>
    <wire from="(880,480)" to="(890,480)"/>
    <wire from="(890,480)" to="(890,500)"/>
  </circuit>
  <circuit name="i9_14980HX">
    <a name="appearance" val="custom"/>
    <a name="circuit" val="i9_14980HX"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="16.0"/>
    <appear>
      <rect height="20" stroke="none" width="200" x="60" y="282"/>
      <rect fill="none" height="214" stroke="#000000" stroke-width="2" width="383" x="60" y="51"/>
      <rect fill="#00a000" height="197" stroke="#000000" width="365" x="69" y="59"/>
      <text dominant-baseline="alphabetic" fill="#fff600" font-family="Dialog" font-size="14" font-weight="bold" text-anchor="middle" x="391" y="253">i9_14980HX</text>
      <rect fill="#b9bab8" fill-opacity="0.906" height="86" stroke="#cfcfcf" stroke-opacity="0.961" stroke-width="2" width="192" x="159" y="112"/>
      <rect fill="#00a000" height="197" stroke="none" width="90" x="279" y="293"/>
      <polygon fill="#ffffff" points="412,58 434,58 434,78" stroke="#ffffff"/>
      <polyline fill="#00a000" points="443,51 433,51 443,61" stroke="#000000"/>
      <path d="M153,32 Q182,33 153,32" fill="none" stroke="#000000"/>
      <circ-anchor facing="east" x="50" y="50"/>
      <circ-port dir="in" pin="190,1010" x="70" y="90"/>
      <circ-port dir="in" pin="190,1040" x="70" y="100"/>
      <circ-port dir="in" pin="190,1070" x="70" y="110"/>
      <circ-port dir="in" pin="190,1100" x="70" y="120"/>
      <circ-port dir="in" pin="190,1130" x="70" y="130"/>
      <circ-port dir="in" pin="190,1160" x="70" y="140"/>
      <circ-port dir="in" pin="190,1190" x="70" y="150"/>
      <circ-port dir="in" pin="190,1220" x="70" y="160"/>
      <circ-port dir="in" pin="190,1250" x="70" y="170"/>
      <circ-port dir="in" pin="190,1280" x="70" y="180"/>
      <circ-port dir="in" pin="190,1310" x="70" y="190"/>
      <circ-port dir="in" pin="190,1340" x="70" y="200"/>
      <circ-port dir="in" pin="190,1370" x="70" y="210"/>
      <circ-port dir="in" pin="190,1400" x="70" y="220"/>
      <circ-port dir="in" pin="190,1430" x="70" y="230"/>
      <circ-port dir="in" pin="190,1460" x="70" y="240"/>
      <circ-port dir="in" pin="190,1490" x="70" y="250"/>
      <circ-port dir="in" pin="190,1520" x="70" y="260"/>
      <circ-port dir="in" pin="190,1550" x="80" y="50"/>
      <circ-port dir="in" pin="190,1580" x="80" y="60"/>
      <circ-port dir="in" pin="190,1610" x="80" y="70"/>
      <circ-port dir="in" pin="190,1640" x="80" y="80"/>
      <circ-port dir="in" pin="190,1680" x="80" y="90"/>
      <circ-port dir="in" pin="190,1710" x="80" y="100"/>
      <circ-port dir="in" pin="190,1740" x="80" y="110"/>
      <circ-port dir="in" pin="190,1770" x="80" y="120"/>
      <circ-port dir="in" pin="190,1800" x="80" y="130"/>
      <circ-port dir="in" pin="190,1830" x="80" y="140"/>
      <circ-port dir="in" pin="190,1860" x="80" y="150"/>
      <circ-port dir="in" pin="190,1890" x="80" y="160"/>
      <circ-port dir="in" pin="190,1920" x="80" y="170"/>
      <circ-port dir="in" pin="190,1950" x="80" y="180"/>
      <circ-port dir="in" pin="190,1980" x="80" y="190"/>
      <circ-port dir="in" pin="190,2010" x="80" y="200"/>
      <circ-port dir="in" pin="190,2040" x="80" y="210"/>
      <circ-port dir="in" pin="190,2070" x="80" y="220"/>
      <circ-port dir="in" pin="190,2100" x="80" y="230"/>
      <circ-port dir="in" pin="190,2130" x="80" y="240"/>
      <circ-port dir="in" pin="190,220" x="60" y="50"/>
      <circ-port dir="in" pin="190,250" x="60" y="60"/>
      <circ-port dir="in" pin="190,280" x="60" y="70"/>
      <circ-port dir="in" pin="190,310" x="60" y="80"/>
      <circ-port dir="in" pin="190,340" x="60" y="90"/>
      <circ-port dir="in" pin="190,370" x="60" y="100"/>
      <circ-port dir="in" pin="190,400" x="60" y="110"/>
      <circ-port dir="in" pin="190,430" x="60" y="120"/>
      <circ-port dir="in" pin="190,460" x="60" y="130"/>
      <circ-port dir="in" pin="190,490" x="60" y="140"/>
      <circ-port dir="in" pin="190,520" x="60" y="150"/>
      <circ-port dir="in" pin="190,550" x="60" y="160"/>
      <circ-port dir="in" pin="190,580" x="60" y="170"/>
      <circ-port dir="in" pin="190,610" x="60" y="180"/>
      <circ-port dir="in" pin="190,640" x="60" y="190"/>
      <circ-port dir="in" pin="190,670" x="60" y="200"/>
      <circ-port dir="in" pin="190,710" x="60" y="210"/>
      <circ-port dir="in" pin="190,740" x="60" y="220"/>
      <circ-port dir="in" pin="190,770" x="60" y="230"/>
      <circ-port dir="in" pin="190,800" x="60" y="240"/>
      <circ-port dir="in" pin="190,830" x="60" y="250"/>
      <circ-port dir="in" pin="190,860" x="60" y="260"/>
      <circ-port dir="in" pin="190,890" x="70" y="50"/>
      <circ-port dir="in" pin="190,920" x="70" y="60"/>
      <circ-port dir="in" pin="190,950" x="70" y="70"/>
      <circ-port dir="in" pin="190,980" x="70" y="80"/>
    </appear>
    <comp lib="0" loc="(190,1010)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1040)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1070)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1100)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1130)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1160)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1190)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1220)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1280)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1340)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1370)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1400)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1430)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1460)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1490)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1520)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1550)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1580)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1610)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1640)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1680)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1710)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1740)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1770)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1800)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1830)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1860)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1890)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1920)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1950)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1980)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,2010)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,2040)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,2070)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,2100)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,2130)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,220)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,280)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,340)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,370)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,400)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,430)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,460)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,490)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,520)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,550)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,580)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,610)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,640)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,670)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,710)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,740)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,770)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,800)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,830)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,860)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,890)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,920)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,950)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,980)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
  </circuit>
  <circuit name="ALU_4_0">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="ALU_4_0"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="16.0"/>
    <comp lib="0" loc="(1010,790)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(1010,960)" name="Splitter">
      <a name="appear" val="center"/>
    </comp>
    <comp lib="0" loc="(1160,950)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1160,990)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(160,660)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,880)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="10unsigned"/>
    </comp>
    <comp lib="0" loc="(200,890)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(230,610)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="10unsigned"/>
    </comp>
    <comp lib="0" loc="(30,730)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="0"/>
      <a name="bit11" val="0"/>
      <a name="bit12" val="0"/>
      <a name="bit13" val="0"/>
      <a name="bit14" val="0"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="0"/>
      <a name="bit21" val="0"/>
      <a name="bit22" val="0"/>
      <a name="bit23" val="0"/>
      <a name="bit24" val="0"/>
      <a name="bit25" val="0"/>
      <a name="bit26" val="0"/>
      <a name="bit27" val="0"/>
      <a name="bit28" val="0"/>
      <a name="bit29" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="0"/>
      <a name="bit31" val="0"/>
      <a name="bit32" val="0"/>
      <a name="bit33" val="0"/>
      <a name="bit34" val="0"/>
      <a name="bit35" val="0"/>
      <a name="bit36" val="0"/>
      <a name="bit37" val="0"/>
      <a name="bit38" val="0"/>
      <a name="bit39" val="0"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="0"/>
      <a name="bit41" val="0"/>
      <a name="bit42" val="0"/>
      <a name="bit43" val="0"/>
      <a name="bit44" val="0"/>
      <a name="bit45" val="0"/>
      <a name="bit46" val="0"/>
      <a name="bit47" val="0"/>
      <a name="bit48" val="0"/>
      <a name="bit49" val="0"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="0"/>
      <a name="bit51" val="0"/>
      <a name="bit52" val="0"/>
      <a name="bit53" val="0"/>
      <a name="bit54" val="0"/>
      <a name="bit55" val="0"/>
      <a name="bit56" val="0"/>
      <a name="bit57" val="0"/>
      <a name="bit58" val="0"/>
      <a name="bit59" val="0"/>
      <a name="bit6" val="0"/>
      <a name="bit60" val="0"/>
      <a name="bit61" val="0"/>
      <a name="bit62" val="0"/>
      <a name="bit63" val="0"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="0"/>
      <a name="bit9" val="0"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(490,610)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(490,670)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(500,710)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(520,830)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(590,730)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(680,650)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(700,850)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(760,910)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(760,950)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(760,990)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(780,1160)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(780,1190)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(800,1190)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="facing" val="west"/>
    </comp>
    <comp lib="0" loc="(820,650)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(820,970)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="facing" val="west"/>
    </comp>
    <comp lib="0" loc="(860,1190)" name="Splitter">
      <a name="appear" val="center"/>
    </comp>
    <comp lib="0" loc="(870,790)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(890,970)" name="Splitter">
      <a name="appear" val="center"/>
    </comp>
    <comp lib="0" loc="(900,1190)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="facing" val="west"/>
    </comp>
    <comp lib="0" loc="(950,960)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="facing" val="west"/>
    </comp>
    <comp lib="0" loc="(960,1190)" name="Splitter">
      <a name="appear" val="center"/>
    </comp>
    <comp lib="0" loc="(980,1160)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(980,1190)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="1" loc="(1160,990)" name="OR Gate">
      <a name="size" val="30"/>
    </comp>
    <comp lib="1" loc="(420,1720)" name="NOT Gate"/>
    <comp lib="1" loc="(430,1520)" name="AND Gate"/>
    <comp lib="1" loc="(430,1590)" name="OR Gate"/>
    <comp lib="1" loc="(440,1660)" name="XOR Gate"/>
    <comp lib="1" loc="(510,660)" name="PLA">
      <a name="table">00 00
11 11
</a>
    </comp>
    <comp lib="10" loc="(510,730)" name="PlaRom">
      <a name="Contents" val="2*4 1*4 2*3 0 2 1*3 0 2*4 0 1 2 1 0 0 1 2 0 1 2 1 2 2 1 0 1 2 0*3 1 0 1 0 2 0 0 2 2 1 1 0 1 1 0 2 1 0 0 1 1 0 0 1 0 1 1 2 0 2 0*3 2 1 0 1 0 0 1 0 1 0 1 2 0 2 2 0 2 2 0 0 1 2 2 1 2 1 2 1 2*4 1*3 2 0 2 0 1 0 2 0 1 0 2*3 0 1 0 1 1 1 0 1 0 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 0 0 1 1 0 1 0 0 1 0 0 1 0*3 1 0*4 1 0 1 0 1 0 0 1 1 0 0 1 0 0 1 0 0 1 0 1 0*4 1 0 0 1 0 0 1 0 1 0 0 1 0*5 1 1 0 1 0 0 1 0 0 1 0 0 1 0 1 0*4 1 0 0 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 0 "/>
      <a name="and" val="32"/>
    </comp>
    <comp lib="10" loc="(580,850)" name="PlaRom">
      <a name="Contents" val="1 2 2 1 2 2 1 0 1 0 0 1 "/>
      <a name="and" val="3"/>
      <a name="inputs" val="2"/>
      <a name="outputs" val="2"/>
    </comp>
    <comp lib="10" loc="(630,1190)" name="PlaRom">
      <a name="Contents" val="1 2 0 2 1 0 2 2 0 0 1 2 0 2 1 0 2 2 1 0 1 0 0 1 1 0 1 0 0 1 "/>
      <a name="and" val="6"/>
      <a name="inputs" val="3"/>
      <a name="outputs" val="2"/>
    </comp>
    <comp lib="10" loc="(720,650)" name="PlaRom">
      <a name="Contents" val="1 2 0 2 1 0*13 0*12 "/>
      <a name="and" val="6"/>
      <a name="inputs" val="3"/>
      <a name="outputs" val="2"/>
    </comp>
    <comp lib="10" loc="(720,740)" name="PlaRom">
      <a name="Contents" val="0 1 2 0 2 1 0 2 2 1 2 0 2 1 0 2 2 0 1 0 1 0 1 0 1 0 1 0 1 0 "/>
      <a name="and" val="6"/>
      <a name="inputs" val="3"/>
      <a name="outputs" val="2"/>
    </comp>
    <comp lib="10" loc="(800,1190)" name="PlaRom">
      <a name="Contents" val="1 2 2 1 2 2 1 0 1 0 0 1 "/>
      <a name="and" val="3"/>
      <a name="inputs" val="2"/>
      <a name="outputs" val="2"/>
    </comp>
    <comp lib="10" loc="(830,970)" name="PlaRom">
      <a name="Contents" val="1 2 2 1 2 2 1 0 1 0 0 1 "/>
      <a name="and" val="3"/>
      <a name="inputs" val="2"/>
      <a name="outputs" val="2"/>
    </comp>
    <comp lib="10" loc="(900,1190)" name="PlaRom">
      <a name="Contents" val="1 2 2 1 2 2 1 0 1 0 0 1 "/>
      <a name="and" val="3"/>
      <a name="inputs" val="2"/>
      <a name="outputs" val="2"/>
    </comp>
    <comp lib="10" loc="(930,790)" name="PlaRom">
      <a name="Contents" val="1 2 0 2 1 0 2*3 0 1 2 0 2 1 2*3 1 0 1 0 0 1 1 0 1 0 0 1 "/>
      <a name="and" val="6"/>
      <a name="inputs" val="3"/>
      <a name="outputs" val="2"/>
    </comp>
    <comp lib="10" loc="(950,960)" name="PlaRom">
      <a name="Contents" val="1 2 2 1 2 2 1 0 1 0 0 1 "/>
      <a name="and" val="3"/>
      <a name="inputs" val="2"/>
      <a name="outputs" val="2"/>
    </comp>
    <comp lib="2" loc="(700,430)" name="Multiplexer">
      <a name="select" val="5"/>
    </comp>
    <comp lib="3" loc="(120,720)" name="Multiplier">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(180,730)" name="Multiplier">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(240,740)" name="Multiplier">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(300,750)" name="Multiplier">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,1030)" name="FPAdder"/>
    <comp lib="3" loc="(420,1090)" name="FPSubtractor"/>
    <comp lib="3" loc="(420,1150)" name="FPMultiplier"/>
    <comp lib="3" loc="(420,1200)" name="FPDivider"/>
    <comp lib="3" loc="(420,1260)" name="FPNegator"/>
    <comp lib="3" loc="(420,1320)" name="FPComparator"/>
    <comp lib="3" loc="(420,1380)" name="FPToInt"/>
    <comp lib="3" loc="(420,1430)" name="IntToFP"/>
    <comp lib="3" loc="(420,240)" name="Adder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,320)" name="Subtractor">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,410)" name="Multiplier">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,470)" name="Divider">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,540)" name="Negator">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,600)" name="Comparator">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,660)" name="Comparator">
      <a name="mode" val="unsigned"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,750)" name="Shifter">
      <a name="shift" val="ar"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,800)" name="Shifter">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,850)" name="Shifter">
      <a name="shift" val="lr"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,910)" name="BitAdder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,970)" name="BitFinder"/>
    <wire from="(1030,950)" to="(1160,950)"/>
    <wire from="(1030,960)" to="(1130,960)"/>
    <wire from="(1030,990)" to="(1030,1000)"/>
    <wire from="(1030,990)" to="(1130,990)"/>
    <wire from="(1130,960)" to="(1130,980)"/>
    <wire from="(1130,990)" to="(1130,1000)"/>
    <wire from="(120,720)" to="(140,720)"/>
    <wire from="(130,740)" to="(130,790)"/>
    <wire from="(130,740)" to="(140,740)"/>
    <wire from="(130,790)" to="(190,790)"/>
    <wire from="(160,660)" to="(170,660)"/>
    <wire from="(170,660)" to="(170,670)"/>
    <wire from="(170,670)" to="(170,680)"/>
    <wire from="(170,670)" to="(240,670)"/>
    <wire from="(180,730)" to="(200,730)"/>
    <wire from="(190,750)" to="(190,790)"/>
    <wire from="(190,750)" to="(200,750)"/>
    <wire from="(190,790)" to="(250,790)"/>
    <wire from="(190,870)" to="(190,880)"/>
    <wire from="(190,870)" to="(330,870)"/>
    <wire from="(190,880)" to="(190,890)"/>
    <wire from="(190,890)" to="(200,890)"/>
    <wire from="(230,610)" to="(240,610)"/>
    <wire from="(240,610)" to="(240,670)"/>
    <wire from="(240,740)" to="(260,740)"/>
    <wire from="(250,760)" to="(250,790)"/>
    <wire from="(250,760)" to="(260,760)"/>
    <wire from="(30,710)" to="(30,730)"/>
    <wire from="(30,710)" to="(50,710)"/>
    <wire from="(300,750)" to="(330,750)"/>
    <wire from="(330,750)" to="(330,870)"/>
    <wire from="(420,610)" to="(450,610)"/>
    <wire from="(420,670)" to="(450,670)"/>
    <wire from="(470,730)" to="(480,730)"/>
    <wire from="(480,720)" to="(480,730)"/>
    <wire from="(480,720)" to="(500,720)"/>
    <wire from="(480,730)" to="(510,730)"/>
    <wire from="(50,680)" to="(170,680)"/>
    <wire from="(50,680)" to="(50,710)"/>
    <wire from="(50,710)" to="(80,710)"/>
    <wire from="(50,730)" to="(70,730)"/>
    <wire from="(500,710)" to="(500,720)"/>
    <wire from="(520,830)" to="(520,850)"/>
    <wire from="(520,850)" to="(580,850)"/>
    <wire from="(570,730)" to="(590,730)"/>
    <wire from="(640,850)" to="(700,850)"/>
    <wire from="(680,650)" to="(720,650)"/>
    <wire from="(70,730)" to="(70,790)"/>
    <wire from="(70,730)" to="(80,730)"/>
    <wire from="(70,790)" to="(130,790)"/>
    <wire from="(760,910)" to="(770,910)"/>
    <wire from="(760,950)" to="(770,950)"/>
    <wire from="(760,990)" to="(790,990)"/>
    <wire from="(770,910)" to="(770,930)"/>
    <wire from="(770,930)" to="(900,930)"/>
    <wire from="(770,950)" to="(770,960)"/>
    <wire from="(770,960)" to="(800,960)"/>
    <wire from="(780,1160)" to="(780,1180)"/>
    <wire from="(780,1180)" to="(790,1180)"/>
    <wire from="(780,650)" to="(820,650)"/>
    <wire from="(790,970)" to="(790,990)"/>
    <wire from="(790,970)" to="(800,970)"/>
    <wire from="(820,970)" to="(830,970)"/>
    <wire from="(870,790)" to="(930,790)"/>
    <wire from="(900,930)" to="(900,950)"/>
    <wire from="(900,950)" to="(930,950)"/>
    <wire from="(910,960)" to="(930,960)"/>
    <wire from="(910,970)" to="(940,970)"/>
    <wire from="(940,1000)" to="(1030,1000)"/>
    <wire from="(940,970)" to="(940,1000)"/>
    <wire from="(980,1160)" to="(980,1180)"/>
    <wire from="(990,790)" to="(1010,790)"/>
  </circuit>
  <circuit name="ALU_4_1">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="ALU_4_1"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="16.0"/>
    <comp lib="0" loc="(180,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(180,330)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(490,610)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(490,670)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(520,670)" name="Tunnel">
      <a name="label" val="a_7"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(730,290)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="a_7"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(770,310)" name="Tunnel">
      <a name="label" val="b_8"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(820,490)" name="Tunnel">
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(820,530)" name="Tunnel">
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(880,570)" name="Power"/>
    <comp lib="0" loc="(930,610)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="ALUSEL"/>
      <a name="width" val="5"/>
    </comp>
    <comp lib="0" loc="(940,400)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(410,1720)" name="NOT Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(430,1520)" name="AND Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(430,1590)" name="OR Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(440,1660)" name="XOR Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="2" loc="(810,400)" name="Multiplexer">
      <a name="enable" val="true"/>
      <a name="select" val="5"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,1030)" name="FPAdder"/>
    <comp lib="3" loc="(420,1090)" name="FPSubtractor"/>
    <comp lib="3" loc="(420,1150)" name="FPMultiplier"/>
    <comp lib="3" loc="(420,1200)" name="FPDivider"/>
    <comp lib="3" loc="(420,1260)" name="FPNegator"/>
    <comp lib="3" loc="(420,1320)" name="FPComparator"/>
    <comp lib="3" loc="(420,1380)" name="FPToInt"/>
    <comp lib="3" loc="(420,1430)" name="IntToFP"/>
    <comp lib="3" loc="(420,240)" name="Adder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,320)" name="Subtractor">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,410)" name="Multiplier">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,470)" name="Divider">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,540)" name="Negator">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,600)" name="Comparator">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,660)" name="Comparator">
      <a name="mode" val="unsigned"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,750)" name="Shifter">
      <a name="shift" val="ar"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,800)" name="Shifter">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,850)" name="Shifter">
      <a name="shift" val="lr"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,910)" name="BitAdder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,970)" name="BitFinder"/>
    <comp lib="8" loc="(745,550)" name="Text">
      <a name="text" val="31_32"/>
    </comp>
    <comp lib="8" loc="(880,490)" name="Text">
      <a name="text" val="25_26"/>
    </comp>
    <wire from="(180,230)" to="(370,230)"/>
    <wire from="(180,330)" to="(320,330)"/>
    <wire from="(320,1540)" to="(320,1610)"/>
    <wire from="(320,1540)" to="(380,1540)"/>
    <wire from="(320,1610)" to="(320,1680)"/>
    <wire from="(320,1610)" to="(380,1610)"/>
    <wire from="(320,1680)" to="(380,1680)"/>
    <wire from="(320,250)" to="(320,330)"/>
    <wire from="(320,250)" to="(380,250)"/>
    <wire from="(320,330)" to="(320,420)"/>
    <wire from="(320,330)" to="(380,330)"/>
    <wire from="(320,420)" to="(320,480)"/>
    <wire from="(320,420)" to="(380,420)"/>
    <wire from="(320,480)" to="(320,610)"/>
    <wire from="(320,480)" to="(380,480)"/>
    <wire from="(320,610)" to="(320,670)"/>
    <wire from="(320,610)" to="(380,610)"/>
    <wire from="(320,670)" to="(320,1540)"/>
    <wire from="(320,670)" to="(380,670)"/>
    <wire from="(370,1500)" to="(370,1570)"/>
    <wire from="(370,1500)" to="(380,1500)"/>
    <wire from="(370,1570)" to="(370,1640)"/>
    <wire from="(370,1570)" to="(380,1570)"/>
    <wire from="(370,1640)" to="(370,1720)"/>
    <wire from="(370,1640)" to="(380,1640)"/>
    <wire from="(370,1720)" to="(380,1720)"/>
    <wire from="(370,230)" to="(370,310)"/>
    <wire from="(370,230)" to="(380,230)"/>
    <wire from="(370,310)" to="(370,400)"/>
    <wire from="(370,310)" to="(380,310)"/>
    <wire from="(370,400)" to="(370,460)"/>
    <wire from="(370,400)" to="(380,400)"/>
    <wire from="(370,460)" to="(370,540)"/>
    <wire from="(370,460)" to="(380,460)"/>
    <wire from="(370,540)" to="(370,590)"/>
    <wire from="(370,540)" to="(380,540)"/>
    <wire from="(370,590)" to="(370,650)"/>
    <wire from="(370,590)" to="(380,590)"/>
    <wire from="(370,650)" to="(370,740)"/>
    <wire from="(370,650)" to="(380,650)"/>
    <wire from="(370,740)" to="(370,790)"/>
    <wire from="(370,740)" to="(380,740)"/>
    <wire from="(370,790)" to="(370,840)"/>
    <wire from="(370,790)" to="(380,790)"/>
    <wire from="(370,840)" to="(370,910)"/>
    <wire from="(370,840)" to="(380,840)"/>
    <wire from="(370,910)" to="(370,1500)"/>
    <wire from="(370,910)" to="(380,910)"/>
    <wire from="(410,1720)" to="(730,1720)"/>
    <wire from="(420,240)" to="(770,240)"/>
    <wire from="(420,320)" to="(460,320)"/>
    <wire from="(420,410)" to="(470,410)"/>
    <wire from="(420,470)" to="(480,470)"/>
    <wire from="(420,540)" to="(490,540)"/>
    <wire from="(420,610)" to="(450,610)"/>
    <wire from="(420,670)" to="(450,670)"/>
    <wire from="(420,750)" to="(570,750)"/>
    <wire from="(420,800)" to="(580,800)"/>
    <wire from="(420,850)" to="(590,850)"/>
    <wire from="(430,1520)" to="(700,1520)"/>
    <wire from="(430,1590)" to="(710,1590)"/>
    <wire from="(440,1660)" to="(720,1660)"/>
    <wire from="(460,250)" to="(460,320)"/>
    <wire from="(460,250)" to="(770,250)"/>
    <wire from="(470,260)" to="(470,410)"/>
    <wire from="(470,260)" to="(770,260)"/>
    <wire from="(480,270)" to="(480,470)"/>
    <wire from="(480,270)" to="(770,270)"/>
    <wire from="(490,280)" to="(490,540)"/>
    <wire from="(490,280)" to="(770,280)"/>
    <wire from="(490,610)" to="(510,610)"/>
    <wire from="(490,670)" to="(520,670)"/>
    <wire from="(510,300)" to="(510,610)"/>
    <wire from="(510,300)" to="(750,300)"/>
    <wire from="(570,320)" to="(570,750)"/>
    <wire from="(570,320)" to="(770,320)"/>
    <wire from="(580,330)" to="(580,800)"/>
    <wire from="(580,330)" to="(770,330)"/>
    <wire from="(590,340)" to="(590,850)"/>
    <wire from="(590,340)" to="(770,340)"/>
    <wire from="(600,350)" to="(600,910)"/>
    <wire from="(600,350)" to="(770,350)"/>
    <wire from="(610,360)" to="(610,970)"/>
    <wire from="(610,360)" to="(770,360)"/>
    <wire from="(620,370)" to="(620,1030)"/>
    <wire from="(620,370)" to="(770,370)"/>
    <wire from="(630,380)" to="(630,1090)"/>
    <wire from="(630,380)" to="(770,380)"/>
    <wire from="(640,390)" to="(640,1150)"/>
    <wire from="(640,390)" to="(770,390)"/>
    <wire from="(650,400)" to="(650,1200)"/>
    <wire from="(650,400)" to="(770,400)"/>
    <wire from="(660,410)" to="(660,1260)"/>
    <wire from="(660,410)" to="(770,410)"/>
    <wire from="(670,420)" to="(670,1320)"/>
    <wire from="(670,420)" to="(770,420)"/>
    <wire from="(680,430)" to="(680,1380)"/>
    <wire from="(680,430)" to="(770,430)"/>
    <wire from="(690,440)" to="(690,1430)"/>
    <wire from="(690,440)" to="(770,440)"/>
    <wire from="(700,450)" to="(700,1520)"/>
    <wire from="(700,450)" to="(770,450)"/>
    <wire from="(710,460)" to="(710,1590)"/>
    <wire from="(710,460)" to="(770,460)"/>
    <wire from="(720,470)" to="(720,1660)"/>
    <wire from="(720,470)" to="(770,470)"/>
    <wire from="(730,290)" to="(740,290)"/>
    <wire from="(730,480)" to="(730,1720)"/>
    <wire from="(730,480)" to="(770,480)"/>
    <wire from="(740,290)" to="(740,310)"/>
    <wire from="(740,310)" to="(760,310)"/>
    <wire from="(750,290)" to="(750,300)"/>
    <wire from="(750,290)" to="(770,290)"/>
    <wire from="(760,300)" to="(760,310)"/>
    <wire from="(760,300)" to="(770,300)"/>
    <wire from="(770,490)" to="(820,490)"/>
    <wire from="(770,550)" to="(780,550)"/>
    <wire from="(780,530)" to="(780,550)"/>
    <wire from="(780,530)" to="(820,530)"/>
    <wire from="(790,560)" to="(790,610)"/>
    <wire from="(790,610)" to="(930,610)"/>
    <wire from="(800,560)" to="(800,580)"/>
    <wire from="(800,580)" to="(880,580)"/>
    <wire from="(810,400)" to="(940,400)"/>
    <wire from="(880,570)" to="(880,580)"/>
  </circuit>
  <circuit name="ALU_4_2">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="ALU_4_2"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="16.0"/>
    <comp lib="0" loc="(180,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(180,330)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(480,750)" name="Tunnel">
      <a name="label" val="b_8"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(490,610)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(490,670)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(520,670)" name="Tunnel">
      <a name="label" val="a_7"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(730,290)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="a_7"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(770,310)" name="Tunnel">
      <a name="label" val="b_8"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(820,490)" name="Tunnel">
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(820,530)" name="Tunnel">
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(880,570)" name="Power"/>
    <comp lib="0" loc="(930,610)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="ALUSEL"/>
      <a name="width" val="5"/>
    </comp>
    <comp lib="0" loc="(940,400)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(960,550)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="10unsigned"/>
    </comp>
    <comp lib="1" loc="(410,1720)" name="NOT Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(430,1520)" name="AND Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(430,1590)" name="OR Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(440,1660)" name="XOR Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="2" loc="(810,400)" name="Multiplexer">
      <a name="enable" val="true"/>
      <a name="select" val="5"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,1030)" name="FPAdder"/>
    <comp lib="3" loc="(420,1090)" name="FPSubtractor"/>
    <comp lib="3" loc="(420,1150)" name="FPMultiplier"/>
    <comp lib="3" loc="(420,1200)" name="FPDivider"/>
    <comp lib="3" loc="(420,1260)" name="FPNegator"/>
    <comp lib="3" loc="(420,1320)" name="FPComparator"/>
    <comp lib="3" loc="(420,1380)" name="FPToInt"/>
    <comp lib="3" loc="(420,1430)" name="IntToFP"/>
    <comp lib="3" loc="(420,240)" name="Adder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,320)" name="Subtractor">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,410)" name="Multiplier">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,470)" name="Divider">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,540)" name="Negator">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,600)" name="Comparator">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,660)" name="Comparator">
      <a name="mode" val="unsigned"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,750)" name="Shifter">
      <a name="shift" val="ar"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,800)" name="Shifter">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,850)" name="Shifter">
      <a name="shift" val="lr"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,910)" name="BitAdder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,970)" name="BitFinder"/>
    <comp lib="8" loc="(745,550)" name="Text">
      <a name="text" val="31_32"/>
    </comp>
    <comp lib="8" loc="(880,490)" name="Text">
      <a name="text" val="25_26"/>
    </comp>
    <wire from="(180,230)" to="(370,230)"/>
    <wire from="(180,330)" to="(320,330)"/>
    <wire from="(320,1540)" to="(320,1610)"/>
    <wire from="(320,1540)" to="(380,1540)"/>
    <wire from="(320,1610)" to="(320,1680)"/>
    <wire from="(320,1610)" to="(380,1610)"/>
    <wire from="(320,1680)" to="(380,1680)"/>
    <wire from="(320,250)" to="(320,330)"/>
    <wire from="(320,250)" to="(380,250)"/>
    <wire from="(320,330)" to="(320,420)"/>
    <wire from="(320,330)" to="(380,330)"/>
    <wire from="(320,420)" to="(320,480)"/>
    <wire from="(320,420)" to="(380,420)"/>
    <wire from="(320,480)" to="(320,610)"/>
    <wire from="(320,480)" to="(380,480)"/>
    <wire from="(320,610)" to="(320,670)"/>
    <wire from="(320,610)" to="(380,610)"/>
    <wire from="(320,670)" to="(320,1540)"/>
    <wire from="(320,670)" to="(380,670)"/>
    <wire from="(370,1500)" to="(370,1570)"/>
    <wire from="(370,1500)" to="(380,1500)"/>
    <wire from="(370,1570)" to="(370,1640)"/>
    <wire from="(370,1570)" to="(380,1570)"/>
    <wire from="(370,1640)" to="(370,1720)"/>
    <wire from="(370,1640)" to="(380,1640)"/>
    <wire from="(370,1720)" to="(380,1720)"/>
    <wire from="(370,230)" to="(370,310)"/>
    <wire from="(370,230)" to="(380,230)"/>
    <wire from="(370,310)" to="(370,400)"/>
    <wire from="(370,310)" to="(380,310)"/>
    <wire from="(370,400)" to="(370,460)"/>
    <wire from="(370,400)" to="(380,400)"/>
    <wire from="(370,460)" to="(370,540)"/>
    <wire from="(370,460)" to="(380,460)"/>
    <wire from="(370,540)" to="(370,590)"/>
    <wire from="(370,540)" to="(380,540)"/>
    <wire from="(370,590)" to="(370,650)"/>
    <wire from="(370,590)" to="(380,590)"/>
    <wire from="(370,650)" to="(370,740)"/>
    <wire from="(370,650)" to="(380,650)"/>
    <wire from="(370,740)" to="(370,790)"/>
    <wire from="(370,740)" to="(380,740)"/>
    <wire from="(370,790)" to="(370,840)"/>
    <wire from="(370,790)" to="(380,790)"/>
    <wire from="(370,840)" to="(370,910)"/>
    <wire from="(370,840)" to="(380,840)"/>
    <wire from="(370,910)" to="(370,1500)"/>
    <wire from="(370,910)" to="(380,910)"/>
    <wire from="(410,1720)" to="(720,1720)"/>
    <wire from="(420,240)" to="(770,240)"/>
    <wire from="(420,320)" to="(460,320)"/>
    <wire from="(420,410)" to="(470,410)"/>
    <wire from="(420,470)" to="(480,470)"/>
    <wire from="(420,540)" to="(490,540)"/>
    <wire from="(420,610)" to="(450,610)"/>
    <wire from="(420,670)" to="(450,670)"/>
    <wire from="(420,750)" to="(480,750)"/>
    <wire from="(420,800)" to="(570,800)"/>
    <wire from="(420,850)" to="(580,850)"/>
    <wire from="(430,1520)" to="(690,1520)"/>
    <wire from="(430,1590)" to="(700,1590)"/>
    <wire from="(440,1660)" to="(710,1660)"/>
    <wire from="(460,250)" to="(460,320)"/>
    <wire from="(460,250)" to="(770,250)"/>
    <wire from="(470,260)" to="(470,410)"/>
    <wire from="(470,260)" to="(770,260)"/>
    <wire from="(480,270)" to="(480,470)"/>
    <wire from="(480,270)" to="(770,270)"/>
    <wire from="(490,280)" to="(490,540)"/>
    <wire from="(490,280)" to="(770,280)"/>
    <wire from="(490,610)" to="(510,610)"/>
    <wire from="(490,670)" to="(520,670)"/>
    <wire from="(510,300)" to="(510,610)"/>
    <wire from="(510,300)" to="(750,300)"/>
    <wire from="(570,330)" to="(570,760)"/>
    <wire from="(570,330)" to="(770,330)"/>
    <wire from="(580,340)" to="(580,810)"/>
    <wire from="(580,340)" to="(770,340)"/>
    <wire from="(590,350)" to="(590,860)"/>
    <wire from="(590,350)" to="(770,350)"/>
    <wire from="(600,360)" to="(600,920)"/>
    <wire from="(600,360)" to="(770,360)"/>
    <wire from="(610,370)" to="(610,980)"/>
    <wire from="(610,370)" to="(770,370)"/>
    <wire from="(620,380)" to="(620,1040)"/>
    <wire from="(620,380)" to="(770,380)"/>
    <wire from="(630,390)" to="(630,1100)"/>
    <wire from="(630,390)" to="(770,390)"/>
    <wire from="(640,400)" to="(640,1160)"/>
    <wire from="(640,400)" to="(770,400)"/>
    <wire from="(650,410)" to="(650,1210)"/>
    <wire from="(650,410)" to="(770,410)"/>
    <wire from="(660,420)" to="(660,1270)"/>
    <wire from="(660,420)" to="(770,420)"/>
    <wire from="(670,430)" to="(670,1330)"/>
    <wire from="(670,430)" to="(770,430)"/>
    <wire from="(680,440)" to="(680,1390)"/>
    <wire from="(680,440)" to="(770,440)"/>
    <wire from="(690,1520)" to="(690,1530)"/>
    <wire from="(690,1530)" to="(700,1530)"/>
    <wire from="(690,450)" to="(690,1440)"/>
    <wire from="(690,450)" to="(770,450)"/>
    <wire from="(700,1590)" to="(700,1600)"/>
    <wire from="(700,1600)" to="(710,1600)"/>
    <wire from="(700,460)" to="(700,1530)"/>
    <wire from="(700,460)" to="(770,460)"/>
    <wire from="(710,1660)" to="(710,1670)"/>
    <wire from="(710,1670)" to="(720,1670)"/>
    <wire from="(710,470)" to="(710,1600)"/>
    <wire from="(710,470)" to="(770,470)"/>
    <wire from="(720,1720)" to="(720,1730)"/>
    <wire from="(720,1730)" to="(730,1730)"/>
    <wire from="(720,480)" to="(720,1670)"/>
    <wire from="(720,480)" to="(770,480)"/>
    <wire from="(730,290)" to="(740,290)"/>
    <wire from="(730,490)" to="(730,1730)"/>
    <wire from="(730,490)" to="(770,490)"/>
    <wire from="(740,290)" to="(740,310)"/>
    <wire from="(740,310)" to="(760,310)"/>
    <wire from="(750,290)" to="(750,300)"/>
    <wire from="(750,290)" to="(770,290)"/>
    <wire from="(760,300)" to="(760,310)"/>
    <wire from="(760,300)" to="(770,300)"/>
    <wire from="(770,490)" to="(820,490)"/>
    <wire from="(770,550)" to="(780,550)"/>
    <wire from="(780,530)" to="(780,550)"/>
    <wire from="(780,530)" to="(820,530)"/>
    <wire from="(790,560)" to="(790,610)"/>
    <wire from="(790,610)" to="(910,610)"/>
    <wire from="(800,560)" to="(800,580)"/>
    <wire from="(800,580)" to="(880,580)"/>
    <wire from="(810,400)" to="(940,400)"/>
    <wire from="(880,570)" to="(880,580)"/>
    <wire from="(910,570)" to="(910,610)"/>
    <wire from="(910,570)" to="(970,570)"/>
    <wire from="(910,610)" to="(930,610)"/>
    <wire from="(960,550)" to="(970,550)"/>
    <wire from="(970,550)" to="(970,570)"/>
  </circuit>
  <circuit name="ALU_5_0">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="ALU_5_0"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="16.0"/>
    <comp lib="0" loc="(180,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(180,330)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(480,750)" name="Tunnel">
      <a name="label" val="b_8"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(490,610)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(490,670)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(520,670)" name="Tunnel">
      <a name="label" val="a_7"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(730,290)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="a_7"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(770,310)" name="Tunnel">
      <a name="label" val="b_8"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(820,490)" name="Tunnel">
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(820,530)" name="Tunnel">
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(880,570)" name="Power"/>
    <comp lib="0" loc="(930,610)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="ALUSEL"/>
      <a name="width" val="5"/>
    </comp>
    <comp lib="0" loc="(940,400)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(960,550)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="10unsigned"/>
    </comp>
    <comp lib="1" loc="(410,1720)" name="NOT Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(430,1520)" name="AND Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(430,1590)" name="OR Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(440,1660)" name="XOR Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="2" loc="(810,400)" name="Multiplexer">
      <a name="enable" val="true"/>
      <a name="select" val="5"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,1030)" name="FPAdder"/>
    <comp lib="3" loc="(420,1090)" name="FPSubtractor"/>
    <comp lib="3" loc="(420,1150)" name="FPMultiplier"/>
    <comp lib="3" loc="(420,1200)" name="FPDivider"/>
    <comp lib="3" loc="(420,1260)" name="FPNegator"/>
    <comp lib="3" loc="(420,1320)" name="FPComparator"/>
    <comp lib="3" loc="(420,1380)" name="FPToInt"/>
    <comp lib="3" loc="(420,1430)" name="IntToFP"/>
    <comp lib="3" loc="(420,240)" name="Adder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,320)" name="Subtractor">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,410)" name="Multiplier">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,470)" name="Divider">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,540)" name="Negator">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,600)" name="Comparator">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,660)" name="Comparator">
      <a name="mode" val="unsigned"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,750)" name="Shifter">
      <a name="shift" val="ar"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,800)" name="Shifter">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,850)" name="Shifter">
      <a name="shift" val="lr"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,910)" name="BitAdder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,970)" name="BitFinder"/>
    <comp lib="8" loc="(745,550)" name="Text">
      <a name="text" val="31_32"/>
    </comp>
    <comp lib="8" loc="(880,490)" name="Text">
      <a name="text" val="25_26"/>
    </comp>
    <wire from="(180,230)" to="(370,230)"/>
    <wire from="(180,330)" to="(320,330)"/>
    <wire from="(320,1540)" to="(320,1610)"/>
    <wire from="(320,1540)" to="(380,1540)"/>
    <wire from="(320,1610)" to="(320,1680)"/>
    <wire from="(320,1610)" to="(380,1610)"/>
    <wire from="(320,1680)" to="(380,1680)"/>
    <wire from="(320,250)" to="(320,330)"/>
    <wire from="(320,250)" to="(380,250)"/>
    <wire from="(320,330)" to="(320,420)"/>
    <wire from="(320,330)" to="(380,330)"/>
    <wire from="(320,420)" to="(320,480)"/>
    <wire from="(320,420)" to="(380,420)"/>
    <wire from="(320,480)" to="(320,610)"/>
    <wire from="(320,480)" to="(380,480)"/>
    <wire from="(320,610)" to="(320,670)"/>
    <wire from="(320,610)" to="(380,610)"/>
    <wire from="(320,670)" to="(320,1540)"/>
    <wire from="(320,670)" to="(380,670)"/>
    <wire from="(370,1500)" to="(370,1570)"/>
    <wire from="(370,1500)" to="(380,1500)"/>
    <wire from="(370,1570)" to="(370,1640)"/>
    <wire from="(370,1570)" to="(380,1570)"/>
    <wire from="(370,1640)" to="(370,1720)"/>
    <wire from="(370,1640)" to="(380,1640)"/>
    <wire from="(370,1720)" to="(380,1720)"/>
    <wire from="(370,230)" to="(370,310)"/>
    <wire from="(370,230)" to="(380,230)"/>
    <wire from="(370,310)" to="(370,400)"/>
    <wire from="(370,310)" to="(380,310)"/>
    <wire from="(370,400)" to="(370,460)"/>
    <wire from="(370,400)" to="(380,400)"/>
    <wire from="(370,460)" to="(370,540)"/>
    <wire from="(370,460)" to="(380,460)"/>
    <wire from="(370,540)" to="(370,590)"/>
    <wire from="(370,540)" to="(380,540)"/>
    <wire from="(370,590)" to="(370,650)"/>
    <wire from="(370,590)" to="(380,590)"/>
    <wire from="(370,650)" to="(370,740)"/>
    <wire from="(370,650)" to="(380,650)"/>
    <wire from="(370,740)" to="(370,790)"/>
    <wire from="(370,740)" to="(380,740)"/>
    <wire from="(370,790)" to="(370,840)"/>
    <wire from="(370,790)" to="(380,790)"/>
    <wire from="(370,840)" to="(370,910)"/>
    <wire from="(370,840)" to="(380,840)"/>
    <wire from="(370,910)" to="(370,1500)"/>
    <wire from="(370,910)" to="(380,910)"/>
    <wire from="(410,1720)" to="(730,1720)"/>
    <wire from="(420,240)" to="(770,240)"/>
    <wire from="(420,320)" to="(460,320)"/>
    <wire from="(420,410)" to="(470,410)"/>
    <wire from="(420,470)" to="(480,470)"/>
    <wire from="(420,540)" to="(490,540)"/>
    <wire from="(420,610)" to="(450,610)"/>
    <wire from="(420,670)" to="(450,670)"/>
    <wire from="(420,750)" to="(480,750)"/>
    <wire from="(420,800)" to="(580,800)"/>
    <wire from="(420,850)" to="(590,850)"/>
    <wire from="(430,1520)" to="(700,1520)"/>
    <wire from="(430,1590)" to="(710,1590)"/>
    <wire from="(440,1660)" to="(720,1660)"/>
    <wire from="(460,250)" to="(460,320)"/>
    <wire from="(460,250)" to="(770,250)"/>
    <wire from="(470,260)" to="(470,410)"/>
    <wire from="(470,260)" to="(770,260)"/>
    <wire from="(480,270)" to="(480,470)"/>
    <wire from="(480,270)" to="(770,270)"/>
    <wire from="(490,280)" to="(490,540)"/>
    <wire from="(490,280)" to="(770,280)"/>
    <wire from="(490,610)" to="(510,610)"/>
    <wire from="(490,670)" to="(520,670)"/>
    <wire from="(510,300)" to="(510,610)"/>
    <wire from="(510,300)" to="(750,300)"/>
    <wire from="(580,330)" to="(580,800)"/>
    <wire from="(580,330)" to="(770,330)"/>
    <wire from="(590,340)" to="(590,850)"/>
    <wire from="(590,340)" to="(770,340)"/>
    <wire from="(600,350)" to="(600,910)"/>
    <wire from="(600,350)" to="(770,350)"/>
    <wire from="(610,360)" to="(610,970)"/>
    <wire from="(610,360)" to="(770,360)"/>
    <wire from="(620,370)" to="(620,1030)"/>
    <wire from="(620,370)" to="(770,370)"/>
    <wire from="(630,380)" to="(630,1090)"/>
    <wire from="(630,380)" to="(770,380)"/>
    <wire from="(640,390)" to="(640,1150)"/>
    <wire from="(640,390)" to="(770,390)"/>
    <wire from="(650,400)" to="(650,1200)"/>
    <wire from="(650,400)" to="(770,400)"/>
    <wire from="(660,410)" to="(660,1260)"/>
    <wire from="(660,410)" to="(770,410)"/>
    <wire from="(670,420)" to="(670,1320)"/>
    <wire from="(670,420)" to="(770,420)"/>
    <wire from="(680,430)" to="(680,1380)"/>
    <wire from="(680,430)" to="(770,430)"/>
    <wire from="(690,440)" to="(690,1430)"/>
    <wire from="(690,440)" to="(770,440)"/>
    <wire from="(700,450)" to="(700,1520)"/>
    <wire from="(700,450)" to="(770,450)"/>
    <wire from="(710,460)" to="(710,1590)"/>
    <wire from="(710,460)" to="(770,460)"/>
    <wire from="(720,470)" to="(720,1660)"/>
    <wire from="(720,470)" to="(770,470)"/>
    <wire from="(730,290)" to="(740,290)"/>
    <wire from="(730,480)" to="(730,1720)"/>
    <wire from="(730,480)" to="(770,480)"/>
    <wire from="(740,290)" to="(740,310)"/>
    <wire from="(740,310)" to="(760,310)"/>
    <wire from="(750,290)" to="(750,300)"/>
    <wire from="(750,290)" to="(770,290)"/>
    <wire from="(760,300)" to="(760,310)"/>
    <wire from="(760,300)" to="(770,300)"/>
    <wire from="(770,490)" to="(820,490)"/>
    <wire from="(770,550)" to="(780,550)"/>
    <wire from="(780,530)" to="(780,550)"/>
    <wire from="(780,530)" to="(820,530)"/>
    <wire from="(790,560)" to="(790,610)"/>
    <wire from="(790,610)" to="(910,610)"/>
    <wire from="(800,560)" to="(800,580)"/>
    <wire from="(800,580)" to="(880,580)"/>
    <wire from="(810,400)" to="(940,400)"/>
    <wire from="(880,570)" to="(880,580)"/>
    <wire from="(910,570)" to="(910,610)"/>
    <wire from="(910,570)" to="(970,570)"/>
    <wire from="(910,610)" to="(930,610)"/>
    <wire from="(960,550)" to="(970,550)"/>
    <wire from="(970,550)" to="(970,570)"/>
  </circuit>
  <circuit name="ALU_5_2">
    <a name="appearance" val="custom"/>
    <a name="circuit" val="ALU_5_2"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="2048000.0"/>
    <appear>
      <rect fill="none" height="180" stroke="#000000" width="220" x="50" y="50"/>
      <text dominant-baseline="central" font-family="SansSerif" font-size="12" text-anchor="middle" x="148" y="138">0~23</text>
      <text dominant-baseline="central" font-family="SansSerif" font-size="12" text-anchor="middle" x="146" y="165">0_11</text>
      <circ-anchor facing="east" x="270" y="60"/>
      <circ-port dir="in" pin="120,1210" x="50" y="140"/>
      <circ-port dir="in" pin="1220,2410" x="50" y="180"/>
      <circ-port dir="in" pin="1240,2430" x="50" y="190"/>
      <circ-port dir="in" pin="1240,2460" x="50" y="210"/>
      <circ-port dir="in" pin="180,230" x="50" y="60"/>
      <circ-port dir="in" pin="180,330" x="50" y="70"/>
      <circ-port dir="in" pin="190,1930" x="50" y="150"/>
      <circ-port dir="in" pin="210,2210" x="50" y="170"/>
      <circ-port dir="in" pin="240,730" x="50" y="90"/>
      <circ-port dir="in" pin="240,760" x="50" y="100"/>
      <circ-port dir="in" pin="270,2010" x="50" y="160"/>
      <circ-port dir="in" pin="420,1010" x="50" y="110"/>
      <circ-port dir="in" pin="420,2520" x="50" y="220"/>
      <circ-port dir="in" pin="80,1080" x="50" y="130"/>
      <circ-port dir="in" pin="890,1030" x="50" y="120"/>
      <circ-port dir="in" pin="920,2440" x="50" y="200"/>
      <circ-port dir="in" pin="930,610" x="50" y="80"/>
      <circ-port dir="out" pin="1470,2240" x="270" y="70"/>
      <circ-port dir="out" pin="940,400" x="270" y="60"/>
    </appear>
    <comp lib="0" loc="(1060,2410)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="16"/>
    </comp>
    <comp lib="0" loc="(110,830)" name="Probe">
      <a name="appearance" val="classic"/>
    </comp>
    <comp lib="0" loc="(1150,2560)" name="Clock">
      <a name="facing" val="north"/>
    </comp>
    <comp lib="0" loc="(120,1210)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="north"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(1220,2410)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(1240,2430)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1240,2460)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1470,2240)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(170,1890)" name="Ground"/>
    <comp lib="0" loc="(180,1000)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="float"/>
    </comp>
    <comp lib="0" loc="(180,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="A"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(180,330)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="B"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(190,1930)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="fu"/>
    </comp>
    <comp lib="0" loc="(210,2210)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="north"/>
      <a name="radix" val="10unsigned"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(220,1130)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="float"/>
    </comp>
    <comp lib="0" loc="(240,1890)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="facing" val="west"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(240,730)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(240,760)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(250,1970)" name="Ground"/>
    <comp lib="0" loc="(250,750)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="10unsigned"/>
    </comp>
    <comp lib="0" loc="(260,1950)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="facing" val="south"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(260,710)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="10unsigned"/>
    </comp>
    <comp lib="0" loc="(270,1000)" name="Ground">
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(270,2010)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(270,940)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit4" val="0"/>
      <a name="bit5" val="0"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="6"/>
    </comp>
    <comp lib="0" loc="(280,970)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="16"/>
    </comp>
    <comp lib="0" loc="(290,950)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="58"/>
    </comp>
    <comp lib="0" loc="(310,950)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="1"/>
      <a name="bit11" val="1"/>
      <a name="bit12" val="1"/>
      <a name="bit13" val="1"/>
      <a name="bit14" val="1"/>
      <a name="bit15" val="1"/>
      <a name="bit16" val="1"/>
      <a name="bit17" val="1"/>
      <a name="bit18" val="1"/>
      <a name="bit19" val="1"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="1"/>
      <a name="bit21" val="1"/>
      <a name="bit22" val="1"/>
      <a name="bit23" val="1"/>
      <a name="bit24" val="1"/>
      <a name="bit25" val="1"/>
      <a name="bit26" val="1"/>
      <a name="bit27" val="1"/>
      <a name="bit28" val="1"/>
      <a name="bit29" val="1"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="1"/>
      <a name="bit31" val="1"/>
      <a name="bit32" val="1"/>
      <a name="bit33" val="1"/>
      <a name="bit34" val="1"/>
      <a name="bit35" val="1"/>
      <a name="bit36" val="1"/>
      <a name="bit37" val="1"/>
      <a name="bit38" val="1"/>
      <a name="bit39" val="1"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="1"/>
      <a name="bit41" val="1"/>
      <a name="bit42" val="1"/>
      <a name="bit43" val="1"/>
      <a name="bit44" val="1"/>
      <a name="bit45" val="1"/>
      <a name="bit46" val="1"/>
      <a name="bit47" val="1"/>
      <a name="bit48" val="1"/>
      <a name="bit49" val="1"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="1"/>
      <a name="bit51" val="1"/>
      <a name="bit52" val="1"/>
      <a name="bit53" val="1"/>
      <a name="bit54" val="1"/>
      <a name="bit55" val="1"/>
      <a name="bit56" val="1"/>
      <a name="bit57" val="1"/>
      <a name="bit58" val="1"/>
      <a name="bit59" val="1"/>
      <a name="bit6" val="1"/>
      <a name="bit60" val="1"/>
      <a name="bit61" val="1"/>
      <a name="bit62" val="1"/>
      <a name="bit63" val="1"/>
      <a name="bit7" val="1"/>
      <a name="bit8" val="1"/>
      <a name="bit9" val="1"/>
      <a name="facing" val="west"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(320,1870)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="2"/>
      <a name="bit11" val="2"/>
      <a name="bit12" val="3"/>
      <a name="bit13" val="3"/>
      <a name="bit14" val="3"/>
      <a name="bit15" val="3"/>
      <a name="bit16" val="4"/>
      <a name="bit17" val="4"/>
      <a name="bit18" val="4"/>
      <a name="bit19" val="4"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="5"/>
      <a name="bit21" val="5"/>
      <a name="bit22" val="5"/>
      <a name="bit23" val="5"/>
      <a name="bit24" val="6"/>
      <a name="bit25" val="6"/>
      <a name="bit26" val="6"/>
      <a name="bit27" val="6"/>
      <a name="bit28" val="7"/>
      <a name="bit29" val="7"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="7"/>
      <a name="bit31" val="7"/>
      <a name="bit32" val="8"/>
      <a name="bit33" val="8"/>
      <a name="bit34" val="8"/>
      <a name="bit35" val="8"/>
      <a name="bit36" val="9"/>
      <a name="bit37" val="9"/>
      <a name="bit38" val="9"/>
      <a name="bit39" val="9"/>
      <a name="bit4" val="1"/>
      <a name="bit40" val="10"/>
      <a name="bit41" val="10"/>
      <a name="bit42" val="10"/>
      <a name="bit43" val="10"/>
      <a name="bit44" val="11"/>
      <a name="bit45" val="11"/>
      <a name="bit46" val="11"/>
      <a name="bit47" val="11"/>
      <a name="bit48" val="12"/>
      <a name="bit49" val="12"/>
      <a name="bit5" val="1"/>
      <a name="bit50" val="12"/>
      <a name="bit51" val="12"/>
      <a name="bit52" val="13"/>
      <a name="bit53" val="13"/>
      <a name="bit54" val="13"/>
      <a name="bit55" val="13"/>
      <a name="bit56" val="14"/>
      <a name="bit57" val="14"/>
      <a name="bit58" val="14"/>
      <a name="bit59" val="14"/>
      <a name="bit6" val="1"/>
      <a name="bit60" val="15"/>
      <a name="bit61" val="15"/>
      <a name="bit62" val="15"/>
      <a name="bit63" val="15"/>
      <a name="bit7" val="1"/>
      <a name="bit8" val="2"/>
      <a name="bit9" val="2"/>
      <a name="facing" val="south"/>
      <a name="fanout" val="16"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(330,760)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="none"/>
      <a name="bit16" val="none"/>
      <a name="bit17" val="none"/>
      <a name="bit18" val="none"/>
      <a name="bit19" val="none"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="none"/>
      <a name="bit21" val="none"/>
      <a name="bit22" val="none"/>
      <a name="bit23" val="none"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit32" val="none"/>
      <a name="bit33" val="none"/>
      <a name="bit34" val="none"/>
      <a name="bit35" val="none"/>
      <a name="bit36" val="none"/>
      <a name="bit37" val="none"/>
      <a name="bit38" val="none"/>
      <a name="bit39" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="none"/>
      <a name="bit41" val="none"/>
      <a name="bit42" val="none"/>
      <a name="bit43" val="none"/>
      <a name="bit44" val="none"/>
      <a name="bit45" val="none"/>
      <a name="bit46" val="none"/>
      <a name="bit47" val="none"/>
      <a name="bit48" val="none"/>
      <a name="bit49" val="none"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="none"/>
      <a name="bit51" val="none"/>
      <a name="bit52" val="none"/>
      <a name="bit53" val="none"/>
      <a name="bit54" val="none"/>
      <a name="bit55" val="none"/>
      <a name="bit56" val="none"/>
      <a name="bit57" val="none"/>
      <a name="bit58" val="none"/>
      <a name="bit59" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit60" val="none"/>
      <a name="bit61" val="none"/>
      <a name="bit62" val="none"/>
      <a name="bit63" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(330,810)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="none"/>
      <a name="bit16" val="none"/>
      <a name="bit17" val="none"/>
      <a name="bit18" val="none"/>
      <a name="bit19" val="none"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="none"/>
      <a name="bit21" val="none"/>
      <a name="bit22" val="none"/>
      <a name="bit23" val="none"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit32" val="none"/>
      <a name="bit33" val="none"/>
      <a name="bit34" val="none"/>
      <a name="bit35" val="none"/>
      <a name="bit36" val="none"/>
      <a name="bit37" val="none"/>
      <a name="bit38" val="none"/>
      <a name="bit39" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="none"/>
      <a name="bit41" val="none"/>
      <a name="bit42" val="none"/>
      <a name="bit43" val="none"/>
      <a name="bit44" val="none"/>
      <a name="bit45" val="none"/>
      <a name="bit46" val="none"/>
      <a name="bit47" val="none"/>
      <a name="bit48" val="none"/>
      <a name="bit49" val="none"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="none"/>
      <a name="bit51" val="none"/>
      <a name="bit52" val="none"/>
      <a name="bit53" val="none"/>
      <a name="bit54" val="none"/>
      <a name="bit55" val="none"/>
      <a name="bit56" val="none"/>
      <a name="bit57" val="none"/>
      <a name="bit58" val="none"/>
      <a name="bit59" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit60" val="none"/>
      <a name="bit61" val="none"/>
      <a name="bit62" val="none"/>
      <a name="bit63" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(330,860)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="none"/>
      <a name="bit16" val="none"/>
      <a name="bit17" val="none"/>
      <a name="bit18" val="none"/>
      <a name="bit19" val="none"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="none"/>
      <a name="bit21" val="none"/>
      <a name="bit22" val="none"/>
      <a name="bit23" val="none"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit32" val="none"/>
      <a name="bit33" val="none"/>
      <a name="bit34" val="none"/>
      <a name="bit35" val="none"/>
      <a name="bit36" val="none"/>
      <a name="bit37" val="none"/>
      <a name="bit38" val="none"/>
      <a name="bit39" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="none"/>
      <a name="bit41" val="none"/>
      <a name="bit42" val="none"/>
      <a name="bit43" val="none"/>
      <a name="bit44" val="none"/>
      <a name="bit45" val="none"/>
      <a name="bit46" val="none"/>
      <a name="bit47" val="none"/>
      <a name="bit48" val="none"/>
      <a name="bit49" val="none"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="none"/>
      <a name="bit51" val="none"/>
      <a name="bit52" val="none"/>
      <a name="bit53" val="none"/>
      <a name="bit54" val="none"/>
      <a name="bit55" val="none"/>
      <a name="bit56" val="none"/>
      <a name="bit57" val="none"/>
      <a name="bit58" val="none"/>
      <a name="bit59" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit60" val="none"/>
      <a name="bit61" val="none"/>
      <a name="bit62" val="none"/>
      <a name="bit63" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(340,870)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="none"/>
      <a name="bit11" val="none"/>
      <a name="bit12" val="none"/>
      <a name="bit13" val="none"/>
      <a name="bit14" val="none"/>
      <a name="bit15" val="none"/>
      <a name="bit16" val="none"/>
      <a name="bit17" val="none"/>
      <a name="bit18" val="none"/>
      <a name="bit19" val="none"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="none"/>
      <a name="bit21" val="none"/>
      <a name="bit22" val="none"/>
      <a name="bit23" val="none"/>
      <a name="bit24" val="none"/>
      <a name="bit25" val="none"/>
      <a name="bit26" val="none"/>
      <a name="bit27" val="none"/>
      <a name="bit28" val="none"/>
      <a name="bit29" val="none"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="none"/>
      <a name="bit31" val="none"/>
      <a name="bit32" val="none"/>
      <a name="bit33" val="none"/>
      <a name="bit34" val="none"/>
      <a name="bit35" val="none"/>
      <a name="bit36" val="none"/>
      <a name="bit37" val="none"/>
      <a name="bit38" val="none"/>
      <a name="bit39" val="none"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="none"/>
      <a name="bit41" val="none"/>
      <a name="bit42" val="none"/>
      <a name="bit43" val="none"/>
      <a name="bit44" val="none"/>
      <a name="bit45" val="none"/>
      <a name="bit46" val="none"/>
      <a name="bit47" val="none"/>
      <a name="bit48" val="none"/>
      <a name="bit49" val="none"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="none"/>
      <a name="bit51" val="none"/>
      <a name="bit52" val="none"/>
      <a name="bit53" val="none"/>
      <a name="bit54" val="none"/>
      <a name="bit55" val="none"/>
      <a name="bit56" val="none"/>
      <a name="bit57" val="none"/>
      <a name="bit58" val="none"/>
      <a name="bit59" val="none"/>
      <a name="bit6" val="none"/>
      <a name="bit60" val="none"/>
      <a name="bit61" val="none"/>
      <a name="bit62" val="none"/>
      <a name="bit63" val="none"/>
      <a name="bit7" val="none"/>
      <a name="bit8" val="none"/>
      <a name="bit9" val="none"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(370,2090)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="16"/>
    </comp>
    <comp lib="0" loc="(380,1950)" name="Ground">
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(390,1890)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(410,1780)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="float"/>
    </comp>
    <comp lib="0" loc="(420,1010)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(420,2520)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(430,940)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="16"/>
    </comp>
    <comp lib="0" loc="(450,1000)" name="Power">
      <a name="width" val="57"/>
    </comp>
    <comp lib="0" loc="(450,1750)" name="Clock">
      <a name="facing" val="north"/>
    </comp>
    <comp lib="0" loc="(450,1940)" name="Ground"/>
    <comp lib="0" loc="(450,910)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit4" val="0"/>
      <a name="bit5" val="0"/>
      <a name="bit6" val="0"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(450,940)" name="Power">
      <a name="width" val="57"/>
    </comp>
    <comp lib="0" loc="(450,970)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit4" val="0"/>
      <a name="bit5" val="0"/>
      <a name="fanout" val="1"/>
      <a name="incoming" val="6"/>
    </comp>
    <comp lib="0" loc="(480,1020)" name="Ground">
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(480,750)" name="Tunnel">
      <a name="label" val="b_8"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(490,610)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(490,670)" name="Bit Extender">
      <a name="in_width" val="1"/>
      <a name="out_width" val="64"/>
      <a name="type" val="zero"/>
    </comp>
    <comp lib="0" loc="(500,1030)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit3" val="1"/>
      <a name="facing" val="west"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(520,1020)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="2"/>
      <a name="bit11" val="2"/>
      <a name="bit12" val="3"/>
      <a name="bit13" val="3"/>
      <a name="bit14" val="3"/>
      <a name="bit15" val="3"/>
      <a name="bit2" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit4" val="1"/>
      <a name="bit5" val="1"/>
      <a name="bit6" val="1"/>
      <a name="bit7" val="1"/>
      <a name="bit8" val="2"/>
      <a name="bit9" val="2"/>
      <a name="facing" val="west"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="16"/>
    </comp>
    <comp lib="0" loc="(520,2390)" name="Probe">
      <a name="appearance" val="classic"/>
    </comp>
    <comp lib="0" loc="(520,670)" name="Tunnel">
      <a name="label" val="a_7"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(520,980)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="42"/>
    </comp>
    <comp lib="0" loc="(520,990)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="0"/>
      <a name="bit11" val="0"/>
      <a name="bit12" val="0"/>
      <a name="bit13" val="0"/>
      <a name="bit14" val="0"/>
      <a name="bit15" val="0"/>
      <a name="bit16" val="0"/>
      <a name="bit17" val="0"/>
      <a name="bit18" val="0"/>
      <a name="bit19" val="0"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="0"/>
      <a name="bit21" val="0"/>
      <a name="bit22" val="0"/>
      <a name="bit23" val="0"/>
      <a name="bit24" val="0"/>
      <a name="bit25" val="0"/>
      <a name="bit26" val="1"/>
      <a name="bit27" val="1"/>
      <a name="bit28" val="1"/>
      <a name="bit29" val="1"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="1"/>
      <a name="bit31" val="1"/>
      <a name="bit32" val="1"/>
      <a name="bit33" val="1"/>
      <a name="bit34" val="1"/>
      <a name="bit35" val="1"/>
      <a name="bit36" val="1"/>
      <a name="bit37" val="1"/>
      <a name="bit38" val="1"/>
      <a name="bit39" val="1"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="1"/>
      <a name="bit41" val="1"/>
      <a name="bit5" val="0"/>
      <a name="bit6" val="0"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="0"/>
      <a name="bit9" val="0"/>
      <a name="incoming" val="42"/>
    </comp>
    <comp lib="0" loc="(540,920)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="57"/>
    </comp>
    <comp lib="0" loc="(560,920)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="1"/>
      <a name="bit11" val="1"/>
      <a name="bit12" val="1"/>
      <a name="bit13" val="1"/>
      <a name="bit14" val="1"/>
      <a name="bit15" val="1"/>
      <a name="bit16" val="1"/>
      <a name="bit17" val="1"/>
      <a name="bit18" val="1"/>
      <a name="bit19" val="1"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="1"/>
      <a name="bit21" val="1"/>
      <a name="bit22" val="1"/>
      <a name="bit23" val="1"/>
      <a name="bit24" val="1"/>
      <a name="bit25" val="1"/>
      <a name="bit26" val="1"/>
      <a name="bit27" val="1"/>
      <a name="bit28" val="1"/>
      <a name="bit29" val="1"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="1"/>
      <a name="bit31" val="1"/>
      <a name="bit32" val="1"/>
      <a name="bit33" val="1"/>
      <a name="bit34" val="1"/>
      <a name="bit35" val="1"/>
      <a name="bit36" val="1"/>
      <a name="bit37" val="1"/>
      <a name="bit38" val="1"/>
      <a name="bit39" val="1"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="1"/>
      <a name="bit41" val="1"/>
      <a name="bit42" val="1"/>
      <a name="bit43" val="1"/>
      <a name="bit44" val="1"/>
      <a name="bit45" val="1"/>
      <a name="bit46" val="1"/>
      <a name="bit47" val="1"/>
      <a name="bit48" val="1"/>
      <a name="bit49" val="1"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="1"/>
      <a name="bit51" val="1"/>
      <a name="bit52" val="1"/>
      <a name="bit53" val="1"/>
      <a name="bit54" val="1"/>
      <a name="bit55" val="1"/>
      <a name="bit56" val="1"/>
      <a name="bit57" val="1"/>
      <a name="bit58" val="1"/>
      <a name="bit59" val="1"/>
      <a name="bit6" val="0"/>
      <a name="bit60" val="1"/>
      <a name="bit61" val="1"/>
      <a name="bit62" val="1"/>
      <a name="bit63" val="1"/>
      <a name="bit7" val="1"/>
      <a name="bit8" val="1"/>
      <a name="bit9" val="1"/>
      <a name="facing" val="west"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(560,990)" name="Splitter">
      <a name="appear" val="center"/>
      <a name="bit1" val="0"/>
      <a name="bit10" val="1"/>
      <a name="bit11" val="1"/>
      <a name="bit12" val="1"/>
      <a name="bit13" val="1"/>
      <a name="bit14" val="1"/>
      <a name="bit15" val="1"/>
      <a name="bit16" val="1"/>
      <a name="bit17" val="1"/>
      <a name="bit18" val="1"/>
      <a name="bit19" val="1"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="1"/>
      <a name="bit21" val="1"/>
      <a name="bit22" val="1"/>
      <a name="bit23" val="1"/>
      <a name="bit24" val="1"/>
      <a name="bit25" val="1"/>
      <a name="bit26" val="1"/>
      <a name="bit27" val="1"/>
      <a name="bit28" val="1"/>
      <a name="bit29" val="1"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="1"/>
      <a name="bit31" val="1"/>
      <a name="bit32" val="2"/>
      <a name="bit33" val="2"/>
      <a name="bit34" val="2"/>
      <a name="bit35" val="2"/>
      <a name="bit36" val="2"/>
      <a name="bit37" val="2"/>
      <a name="bit38" val="2"/>
      <a name="bit39" val="2"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="2"/>
      <a name="bit41" val="2"/>
      <a name="bit42" val="2"/>
      <a name="bit43" val="2"/>
      <a name="bit44" val="2"/>
      <a name="bit45" val="2"/>
      <a name="bit46" val="2"/>
      <a name="bit47" val="2"/>
      <a name="bit48" val="3"/>
      <a name="bit49" val="3"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="3"/>
      <a name="bit51" val="3"/>
      <a name="bit52" val="3"/>
      <a name="bit53" val="3"/>
      <a name="bit54" val="3"/>
      <a name="bit55" val="3"/>
      <a name="bit56" val="3"/>
      <a name="bit57" val="3"/>
      <a name="bit58" val="3"/>
      <a name="bit59" val="3"/>
      <a name="bit6" val="1"/>
      <a name="bit60" val="3"/>
      <a name="bit61" val="3"/>
      <a name="bit62" val="3"/>
      <a name="bit63" val="3"/>
      <a name="bit7" val="1"/>
      <a name="bit8" val="1"/>
      <a name="bit9" val="1"/>
      <a name="facing" val="west"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(580,950)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="16"/>
    </comp>
    <comp lib="0" loc="(590,940)" name="Probe">
      <a name="appearance" val="classic"/>
    </comp>
    <comp lib="0" loc="(730,290)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="a_7"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(770,310)" name="Tunnel">
      <a name="label" val="b_8"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(80,1080)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="north"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(820,490)" name="Tunnel">
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(820,530)" name="Tunnel">
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(840,460)" name="Tunnel">
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(880,570)" name="Power"/>
    <comp lib="0" loc="(890,1030)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(920,2440)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(930,610)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="ALUSEL"/>
      <a name="width" val="5"/>
    </comp>
    <comp lib="0" loc="(940,400)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="I"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(960,550)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="10unsigned"/>
    </comp>
    <comp lib="1" loc="(410,1720)" name="NOT Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(430,1520)" name="AND Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(430,1590)" name="OR Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="1" loc="(440,1660)" name="XOR Gate">
      <a name="width" val="64"/>
    </comp>
    <comp lib="10" loc="(510,1780)" name="Digital Oscilloscope"/>
    <comp lib="2" loc="(810,400)" name="Multiplexer">
      <a name="enable" val="true"/>
      <a name="select" val="5"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(250,940)" name="BitFinder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,1030)" name="FPAdder">
      <a name="fpwidth" val="64"/>
    </comp>
    <comp lib="3" loc="(420,1090)" name="FPSubtractor">
      <a name="fpwidth" val="64"/>
    </comp>
    <comp lib="3" loc="(420,1150)" name="FPMultiplier">
      <a name="fpwidth" val="64"/>
    </comp>
    <comp lib="3" loc="(420,1210)" name="FPDivider">
      <a name="fpwidth" val="64"/>
    </comp>
    <comp lib="3" loc="(420,1270)" name="FPNegator">
      <a name="fpwidth" val="64"/>
    </comp>
    <comp lib="3" loc="(420,1330)" name="FPComparator">
      <a name="fpwidth" val="64"/>
    </comp>
    <comp lib="3" loc="(420,1390)" name="FPToInt"/>
    <comp lib="3" loc="(420,1450)" name="IntToFP"/>
    <comp lib="3" loc="(420,240)" name="Adder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,320)" name="Subtractor">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,410)" name="Multiplier">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,470)" name="Divider">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,540)" name="Negator">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,600)" name="Comparator">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,660)" name="Comparator">
      <a name="mode" val="unsigned"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,750)" name="Shifter">
      <a name="shift" val="ar"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,800)" name="Shifter">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,850)" name="Shifter">
      <a name="shift" val="lr"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,910)" name="BitAdder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="3" loc="(420,970)" name="BitFinder">
      <a name="width" val="64"/>
    </comp>
    <comp lib="4" loc="(1280,2400)" name="RAM">
      <a name="addrWidth" val="2"/>
      <a name="appearance" val="logisim_evolution"/>
      <a name="dataWidth" val="64"/>
      <a name="label" val="aaaaa"/>
    </comp>
    <comp lib="4" loc="(980,1020)" name="ROM">
      <a name="addrWidth" val="2"/>
      <a name="appearance" val="logisim_evolution"/>
      <a name="contents">addr/data: 2 64
13213231
</a>
      <a name="dataWidth" val="64"/>
    </comp>
    <comp lib="8" loc="(745,550)" name="Text">
      <a name="text" val="31_32"/>
    </comp>
    <comp lib="8" loc="(880,455)" name="Text">
      <a name="text" val="24_25"/>
    </comp>
    <comp lib="8" loc="(880,490)" name="Text">
      <a name="text" val="25_26"/>
    </comp>
    <wire from="(1060,2410)" to="(1080,2410)"/>
    <wire from="(1080,2410)" to="(1080,2440)"/>
    <wire from="(1080,2440)" to="(1190,2440)"/>
    <wire from="(110,830)" to="(120,830)"/>
    <wire from="(1150,2540)" to="(1150,2560)"/>
    <wire from="(1150,2540)" to="(1240,2540)"/>
    <wire from="(1190,2440)" to="(1190,2490)"/>
    <wire from="(1190,2490)" to="(1280,2490)"/>
    <wire from="(120,1170)" to="(120,1210)"/>
    <wire from="(120,1170)" to="(230,1170)"/>
    <wire from="(120,830)" to="(120,990)"/>
    <wire from="(120,990)" to="(190,990)"/>
    <wire from="(1220,1080)" to="(1340,1080)"/>
    <wire from="(1220,2410)" to="(1280,2410)"/>
    <wire from="(1240,2430)" to="(1260,2430)"/>
    <wire from="(1240,2460)" to="(1280,2460)"/>
    <wire from="(1240,2470)" to="(1240,2540)"/>
    <wire from="(1240,2470)" to="(1280,2470)"/>
    <wire from="(1260,2430)" to="(1260,2450)"/>
    <wire from="(1260,2450)" to="(1280,2450)"/>
    <wire from="(1340,1080)" to="(1410,1080)"/>
    <wire from="(1340,990)" to="(1340,1080)"/>
    <wire from="(1450,2240)" to="(1450,2300)"/>
    <wire from="(1450,2240)" to="(1470,2240)"/>
    <wire from="(1450,2300)" to="(1570,2300)"/>
    <wire from="(1520,2490)" to="(1570,2490)"/>
    <wire from="(1570,2300)" to="(1570,2490)"/>
    <wire from="(160,1730)" to="(160,1750)"/>
    <wire from="(160,1730)" to="(460,1730)"/>
    <wire from="(160,1750)" to="(200,1750)"/>
    <wire from="(170,1890)" to="(220,1890)"/>
    <wire from="(180,1000)" to="(190,1000)"/>
    <wire from="(180,230)" to="(370,230)"/>
    <wire from="(180,330)" to="(320,330)"/>
    <wire from="(190,1000)" to="(190,1040)"/>
    <wire from="(190,1930)" to="(200,1930)"/>
    <wire from="(190,990)" to="(190,1000)"/>
    <wire from="(200,1750)" to="(200,1930)"/>
    <wire from="(200,1930)" to="(210,1930)"/>
    <wire from="(200,900)" to="(200,940)"/>
    <wire from="(200,900)" to="(340,900)"/>
    <wire from="(200,940)" to="(210,940)"/>
    <wire from="(210,1900)" to="(210,1930)"/>
    <wire from="(210,1900)" to="(220,1900)"/>
    <wire from="(210,2130)" to="(210,2210)"/>
    <wire from="(210,2130)" to="(380,2130)"/>
    <wire from="(220,1130)" to="(230,1130)"/>
    <wire from="(220,1870)" to="(220,1880)"/>
    <wire from="(220,1880)" to="(220,1890)"/>
    <wire from="(230,1130)" to="(230,1170)"/>
    <wire from="(230,960)" to="(230,980)"/>
    <wire from="(230,980)" to="(270,980)"/>
    <wire from="(240,1970)" to="(250,1970)"/>
    <wire from="(240,730)" to="(260,730)"/>
    <wire from="(240,760)" to="(260,760)"/>
    <wire from="(250,1890)" to="(250,1910)"/>
    <wire from="(250,1910)" to="(270,1910)"/>
    <wire from="(250,1970)" to="(260,1970)"/>
    <wire from="(250,750)" to="(260,750)"/>
    <wire from="(250,940)" to="(270,940)"/>
    <wire from="(260,1890)" to="(260,1950)"/>
    <wire from="(260,710)" to="(260,730)"/>
    <wire from="(260,750)" to="(260,760)"/>
    <wire from="(270,1000)" to="(390,1000)"/>
    <wire from="(270,1890)" to="(270,1910)"/>
    <wire from="(270,1890)" to="(280,1890)"/>
    <wire from="(270,1970)" to="(270,1990)"/>
    <wire from="(270,1990)" to="(280,1990)"/>
    <wire from="(270,2010)" to="(280,2010)"/>
    <wire from="(280,1890)" to="(290,1890)"/>
    <wire from="(280,1990)" to="(280,2010)"/>
    <wire from="(280,970)" to="(310,970)"/>
    <wire from="(290,1890)" to="(300,1890)"/>
    <wire from="(300,1890)" to="(310,1890)"/>
    <wire from="(310,1890)" to="(320,1890)"/>
    <wire from="(310,950)" to="(310,970)"/>
    <wire from="(320,1040)" to="(320,1100)"/>
    <wire from="(320,1040)" to="(380,1040)"/>
    <wire from="(320,1100)" to="(320,1160)"/>
    <wire from="(320,1100)" to="(380,1100)"/>
    <wire from="(320,1160)" to="(320,1220)"/>
    <wire from="(320,1160)" to="(380,1160)"/>
    <wire from="(320,1220)" to="(320,1340)"/>
    <wire from="(320,1220)" to="(380,1220)"/>
    <wire from="(320,1340)" to="(320,1540)"/>
    <wire from="(320,1340)" to="(380,1340)"/>
    <wire from="(320,1540)" to="(320,1610)"/>
    <wire from="(320,1540)" to="(380,1540)"/>
    <wire from="(320,1610)" to="(320,1680)"/>
    <wire from="(320,1610)" to="(380,1610)"/>
    <wire from="(320,1680)" to="(380,1680)"/>
    <wire from="(320,1850)" to="(320,1870)"/>
    <wire from="(320,1850)" to="(440,1850)"/>
    <wire from="(320,1890)" to="(330,1890)"/>
    <wire from="(320,250)" to="(320,330)"/>
    <wire from="(320,250)" to="(380,250)"/>
    <wire from="(320,330)" to="(320,420)"/>
    <wire from="(320,330)" to="(380,330)"/>
    <wire from="(320,420)" to="(320,480)"/>
    <wire from="(320,420)" to="(380,420)"/>
    <wire from="(320,480)" to="(320,610)"/>
    <wire from="(320,480)" to="(380,480)"/>
    <wire from="(320,610)" to="(320,670)"/>
    <wire from="(320,610)" to="(380,610)"/>
    <wire from="(320,670)" to="(320,760)"/>
    <wire from="(320,670)" to="(380,670)"/>
    <wire from="(320,760)" to="(320,810)"/>
    <wire from="(320,760)" to="(330,760)"/>
    <wire from="(320,810)" to="(320,860)"/>
    <wire from="(320,810)" to="(330,810)"/>
    <wire from="(320,860)" to="(320,1040)"/>
    <wire from="(320,860)" to="(330,860)"/>
    <wire from="(330,1890)" to="(340,1890)"/>
    <wire from="(340,1890)" to="(350,1890)"/>
    <wire from="(340,900)" to="(340,970)"/>
    <wire from="(340,970)" to="(370,970)"/>
    <wire from="(350,1890)" to="(360,1890)"/>
    <wire from="(350,760)" to="(380,760)"/>
    <wire from="(350,810)" to="(380,810)"/>
    <wire from="(350,860)" to="(380,860)"/>
    <wire from="(360,1890)" to="(370,1890)"/>
    <wire from="(370,1020)" to="(370,1080)"/>
    <wire from="(370,1020)" to="(380,1020)"/>
    <wire from="(370,1080)" to="(370,1140)"/>
    <wire from="(370,1080)" to="(380,1080)"/>
    <wire from="(370,1140)" to="(370,1200)"/>
    <wire from="(370,1140)" to="(380,1140)"/>
    <wire from="(370,1200)" to="(370,1270)"/>
    <wire from="(370,1200)" to="(380,1200)"/>
    <wire from="(370,1270)" to="(370,1320)"/>
    <wire from="(370,1270)" to="(380,1270)"/>
    <wire from="(370,1320)" to="(370,1500)"/>
    <wire from="(370,1320)" to="(380,1320)"/>
    <wire from="(370,1500)" to="(370,1570)"/>
    <wire from="(370,1500)" to="(380,1500)"/>
    <wire from="(370,1570)" to="(370,1640)"/>
    <wire from="(370,1570)" to="(380,1570)"/>
    <wire from="(370,1640)" to="(370,1720)"/>
    <wire from="(370,1640)" to="(380,1640)"/>
    <wire from="(370,1720)" to="(380,1720)"/>
    <wire from="(370,1890)" to="(380,1890)"/>
    <wire from="(370,2090)" to="(380,2090)"/>
    <wire from="(370,230)" to="(370,310)"/>
    <wire from="(370,230)" to="(380,230)"/>
    <wire from="(370,310)" to="(370,400)"/>
    <wire from="(370,310)" to="(380,310)"/>
    <wire from="(370,400)" to="(370,460)"/>
    <wire from="(370,400)" to="(380,400)"/>
    <wire from="(370,460)" to="(370,540)"/>
    <wire from="(370,460)" to="(380,460)"/>
    <wire from="(370,540)" to="(370,590)"/>
    <wire from="(370,540)" to="(380,540)"/>
    <wire from="(370,590)" to="(370,650)"/>
    <wire from="(370,590)" to="(380,590)"/>
    <wire from="(370,650)" to="(370,740)"/>
    <wire from="(370,650)" to="(380,650)"/>
    <wire from="(370,740)" to="(370,790)"/>
    <wire from="(370,740)" to="(380,740)"/>
    <wire from="(370,790)" to="(370,840)"/>
    <wire from="(370,790)" to="(380,790)"/>
    <wire from="(370,840)" to="(370,910)"/>
    <wire from="(370,840)" to="(380,840)"/>
    <wire from="(370,910)" to="(370,970)"/>
    <wire from="(370,910)" to="(380,910)"/>
    <wire from="(370,970)" to="(370,1020)"/>
    <wire from="(370,970)" to="(380,970)"/>
    <wire from="(380,1890)" to="(380,1950)"/>
    <wire from="(380,2090)" to="(380,2130)"/>
    <wire from="(390,1000)" to="(390,1020)"/>
    <wire from="(390,1020)" to="(430,1020)"/>
    <wire from="(400,1000)" to="(440,1000)"/>
    <wire from="(400,1050)" to="(400,1060)"/>
    <wire from="(400,1060)" to="(450,1060)"/>
    <wire from="(400,1110)" to="(400,1120)"/>
    <wire from="(400,1120)" to="(450,1120)"/>
    <wire from="(400,1170)" to="(400,1180)"/>
    <wire from="(400,1180)" to="(450,1180)"/>
    <wire from="(400,1230)" to="(400,1240)"/>
    <wire from="(400,1240)" to="(450,1240)"/>
    <wire from="(400,1290)" to="(400,1300)"/>
    <wire from="(400,1300)" to="(450,1300)"/>
    <wire from="(400,1350)" to="(400,1360)"/>
    <wire from="(400,1360)" to="(450,1360)"/>
    <wire from="(400,1410)" to="(400,1420)"/>
    <wire from="(400,1420)" to="(450,1420)"/>
    <wire from="(400,1470)" to="(400,1480)"/>
    <wire from="(400,1480)" to="(450,1480)"/>
    <wire from="(400,990)" to="(400,1000)"/>
    <wire from="(410,1720)" to="(730,1720)"/>
    <wire from="(410,1780)" to="(440,1780)"/>
    <wire from="(410,1870)" to="(410,1880)"/>
    <wire from="(410,1880)" to="(410,1890)"/>
    <wire from="(410,1890)" to="(410,1900)"/>
    <wire from="(410,1900)" to="(410,1940)"/>
    <wire from="(410,1940)" to="(450,1940)"/>
    <wire from="(420,1030)" to="(460,1030)"/>
    <wire from="(420,1090)" to="(450,1090)"/>
    <wire from="(420,1150)" to="(450,1150)"/>
    <wire from="(420,1210)" to="(450,1210)"/>
    <wire from="(420,1270)" to="(450,1270)"/>
    <wire from="(420,1390)" to="(450,1390)"/>
    <wire from="(420,1450)" to="(450,1450)"/>
    <wire from="(420,240)" to="(770,240)"/>
    <wire from="(420,2520)" to="(580,2520)"/>
    <wire from="(420,320)" to="(460,320)"/>
    <wire from="(420,410)" to="(470,410)"/>
    <wire from="(420,470)" to="(480,470)"/>
    <wire from="(420,540)" to="(490,540)"/>
    <wire from="(420,610)" to="(450,610)"/>
    <wire from="(420,670)" to="(450,670)"/>
    <wire from="(420,750)" to="(480,750)"/>
    <wire from="(420,800)" to="(580,800)"/>
    <wire from="(420,850)" to="(590,850)"/>
    <wire from="(420,910)" to="(450,910)"/>
    <wire from="(420,970)" to="(440,970)"/>
    <wire from="(430,1010)" to="(430,1020)"/>
    <wire from="(430,1010)" to="(460,1010)"/>
    <wire from="(430,1520)" to="(700,1520)"/>
    <wire from="(430,1590)" to="(710,1590)"/>
    <wire from="(430,940)" to="(440,940)"/>
    <wire from="(440,1000)" to="(440,1020)"/>
    <wire from="(440,1020)" to="(470,1020)"/>
    <wire from="(440,1660)" to="(720,1660)"/>
    <wire from="(440,1780)" to="(440,1850)"/>
    <wire from="(440,940)" to="(440,970)"/>
    <wire from="(440,970)" to="(450,970)"/>
    <wire from="(450,1740)" to="(450,1750)"/>
    <wire from="(450,1740)" to="(480,1740)"/>
    <wire from="(460,1000)" to="(460,1010)"/>
    <wire from="(460,1000)" to="(500,1000)"/>
    <wire from="(460,1030)" to="(460,1040)"/>
    <wire from="(460,1730)" to="(460,1870)"/>
    <wire from="(460,1870)" to="(510,1870)"/>
    <wire from="(460,250)" to="(460,320)"/>
    <wire from="(460,250)" to="(770,250)"/>
    <wire from="(470,1010)" to="(470,1020)"/>
    <wire from="(470,1010)" to="(480,1010)"/>
    <wire from="(470,1020)" to="(470,1030)"/>
    <wire from="(470,1030)" to="(480,1030)"/>
    <wire from="(470,260)" to="(470,410)"/>
    <wire from="(470,260)" to="(770,260)"/>
    <wire from="(470,910)" to="(540,910)"/>
    <wire from="(470,970)" to="(540,970)"/>
    <wire from="(480,1740)" to="(480,1780)"/>
    <wire from="(480,1780)" to="(510,1780)"/>
    <wire from="(480,270)" to="(480,470)"/>
    <wire from="(480,270)" to="(770,270)"/>
    <wire from="(480,960)" to="(480,1010)"/>
    <wire from="(480,960)" to="(580,960)"/>
    <wire from="(490,280)" to="(490,540)"/>
    <wire from="(490,280)" to="(770,280)"/>
    <wire from="(490,610)" to="(510,610)"/>
    <wire from="(490,670)" to="(520,670)"/>
    <wire from="(500,1000)" to="(500,1010)"/>
    <wire from="(500,1010)" to="(500,1020)"/>
    <wire from="(510,300)" to="(510,610)"/>
    <wire from="(510,300)" to="(750,300)"/>
    <wire from="(520,1020)" to="(530,1020)"/>
    <wire from="(520,2390)" to="(580,2390)"/>
    <wire from="(520,980)" to="(520,990)"/>
    <wire from="(530,1000)" to="(530,1020)"/>
    <wire from="(530,1000)" to="(540,1000)"/>
    <wire from="(560,920)" to="(600,920)"/>
    <wire from="(560,990)" to="(570,990)"/>
    <wire from="(570,970)" to="(570,990)"/>
    <wire from="(570,970)" to="(590,970)"/>
    <wire from="(580,2390)" to="(580,2520)"/>
    <wire from="(580,2520)" to="(700,2520)"/>
    <wire from="(580,320)" to="(580,800)"/>
    <wire from="(580,320)" to="(770,320)"/>
    <wire from="(580,950)" to="(580,960)"/>
    <wire from="(590,330)" to="(590,850)"/>
    <wire from="(590,330)" to="(770,330)"/>
    <wire from="(590,940)" to="(600,940)"/>
    <wire from="(590,960)" to="(590,970)"/>
    <wire from="(590,960)" to="(600,960)"/>
    <wire from="(590,970)" to="(610,970)"/>
    <wire from="(600,340)" to="(600,920)"/>
    <wire from="(600,340)" to="(770,340)"/>
    <wire from="(600,940)" to="(600,960)"/>
    <wire from="(610,350)" to="(610,970)"/>
    <wire from="(610,350)" to="(770,350)"/>
    <wire from="(620,360)" to="(620,1030)"/>
    <wire from="(620,360)" to="(770,360)"/>
    <wire from="(630,370)" to="(630,1080)"/>
    <wire from="(630,370)" to="(770,370)"/>
    <wire from="(640,380)" to="(640,1140)"/>
    <wire from="(640,380)" to="(770,380)"/>
    <wire from="(650,390)" to="(650,1190)"/>
    <wire from="(650,390)" to="(770,390)"/>
    <wire from="(660,400)" to="(660,1250)"/>
    <wire from="(660,400)" to="(770,400)"/>
    <wire from="(670,410)" to="(670,1310)"/>
    <wire from="(670,410)" to="(770,410)"/>
    <wire from="(680,420)" to="(680,1370)"/>
    <wire from="(680,420)" to="(770,420)"/>
    <wire from="(690,430)" to="(690,1420)"/>
    <wire from="(690,430)" to="(770,430)"/>
    <wire from="(700,440)" to="(700,1520)"/>
    <wire from="(700,440)" to="(770,440)"/>
    <wire from="(710,450)" to="(710,1590)"/>
    <wire from="(710,450)" to="(770,450)"/>
    <wire from="(720,460)" to="(720,1660)"/>
    <wire from="(720,460)" to="(770,460)"/>
    <wire from="(730,290)" to="(740,290)"/>
    <wire from="(730,470)" to="(730,1720)"/>
    <wire from="(730,470)" to="(770,470)"/>
    <wire from="(740,290)" to="(740,310)"/>
    <wire from="(740,310)" to="(760,310)"/>
    <wire from="(750,290)" to="(750,300)"/>
    <wire from="(750,290)" to="(770,290)"/>
    <wire from="(760,300)" to="(760,310)"/>
    <wire from="(760,300)" to="(770,300)"/>
    <wire from="(770,480)" to="(820,480)"/>
    <wire from="(770,490)" to="(820,490)"/>
    <wire from="(770,550)" to="(780,550)"/>
    <wire from="(780,530)" to="(780,550)"/>
    <wire from="(780,530)" to="(820,530)"/>
    <wire from="(790,560)" to="(790,610)"/>
    <wire from="(790,610)" to="(910,610)"/>
    <wire from="(80,1040)" to="(190,1040)"/>
    <wire from="(80,1040)" to="(80,1080)"/>
    <wire from="(800,560)" to="(800,580)"/>
    <wire from="(800,580)" to="(880,580)"/>
    <wire from="(810,400)" to="(940,400)"/>
    <wire from="(820,470)" to="(820,480)"/>
    <wire from="(820,470)" to="(840,470)"/>
    <wire from="(840,460)" to="(840,470)"/>
    <wire from="(880,570)" to="(880,580)"/>
    <wire from="(890,1030)" to="(980,1030)"/>
    <wire from="(910,570)" to="(910,610)"/>
    <wire from="(910,570)" to="(970,570)"/>
    <wire from="(910,610)" to="(930,610)"/>
    <wire from="(920,2440)" to="(1080,2440)"/>
    <wire from="(960,550)" to="(970,550)"/>
    <wire from="(970,550)" to="(970,570)"/>
  </circuit>
  <circuit name="C_P_U">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="C_P_U"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="16.0"/>
    <comp lib="0" loc="(250,670)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="5"/>
    </comp>
    <comp lib="0" loc="(270,570)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(290,420)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(850,400)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp loc="(630,490)" name="ALU_5_2"/>
    <wire from="(250,670)" to="(380,670)"/>
    <wire from="(270,570)" to="(280,570)"/>
    <wire from="(280,500)" to="(280,570)"/>
    <wire from="(280,500)" to="(410,500)"/>
    <wire from="(290,420)" to="(300,420)"/>
    <wire from="(300,420)" to="(300,490)"/>
    <wire from="(300,490)" to="(410,490)"/>
    <wire from="(380,510)" to="(380,670)"/>
    <wire from="(380,510)" to="(410,510)"/>
    <wire from="(630,490)" to="(710,490)"/>
    <wire from="(710,400)" to="(710,490)"/>
    <wire from="(710,400)" to="(850,400)"/>
  </circuit>
  <circuit name="EU_C">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="EU_C"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="16.0"/>
  </circuit>
  <circuit name="p_e_core">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="p_e_core"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="16.0"/>
  </circuit>
  <circuit name="i9_14980hx_core">
    <a name="appearance" val="custom"/>
    <a name="circuit" val="i9_14980hx_core"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="4.0"/>
    <appear>
      <rect fill="none" height="464" stroke="#000000" width="1088" x="91" y="226"/>
      <rect fill="none" height="465" stroke="#000000" width="302" x="92" y="225"/>
      <rect fill="none" height="464" stroke="#000000" width="414" x="394" y="225"/>
      <rect fill="none" height="321" stroke="#000000" width="371" x="808" y="226"/>
      <rect fill="none" height="143" stroke="#000000" width="372" x="808" y="546"/>
      <rect fill="none" height="464" stroke="#000000" width="26" x="394" y="226"/>
      <rect fill="none" height="41" stroke="#000000" width="26" x="420" y="648"/>
      <rect fill="none" height="41" stroke="#000000" width="26" x="447" y="648"/>
      <rect fill="none" height="41" stroke="#000000" width="26" x="460" y="802"/>
      <rect fill="none" height="41" stroke="#000000" width="26" x="487" y="802"/>
      <rect fill="none" height="41" stroke="#000000" width="26" x="461" y="734"/>
      <rect fill="none" height="41" stroke="#000000" width="26" x="529" y="648"/>
      <rect fill="none" height="41" stroke="#000000" width="26" x="556" y="648"/>
      <rect fill="none" height="41" stroke="#000000" width="26" x="474" y="648"/>
      <rect fill="none" height="41" stroke="#000000" width="26" x="502" y="648"/>
      <rect fill="none" height="127" stroke="#000000" width="92" x="1169" y="853"/>
      <rect fill="none" height="40" stroke="#000000" width="80" x="585" y="648"/>
      <polyline fill="none" points="585,662 665,662" stroke="#000000"/>
      <polyline fill="none" points="585,677 665,677" stroke="#000000"/>
      <polyline fill="none" points="612,648 613,689" stroke="#000000"/>
      <polyline fill="none" points="633,648 634,689" stroke="#000000"/>
      <circ-anchor facing="east" x="50" y="50"/>
      <circ-port dir="in" pin="1290,3000" x="50" y="60"/>
      <circ-port dir="in" pin="1310,2480" x="50" y="80"/>
      <circ-port dir="in" pin="1320,2540" x="50" y="70"/>
      <circ-port dir="in" pin="1330,2250" x="50" y="100"/>
      <circ-port dir="in" pin="1370,2440" x="50" y="90"/>
      <circ-port dir="in" pin="1420,2930" x="50" y="180"/>
      <circ-port dir="in" pin="1450,2900" x="50" y="150"/>
      <circ-port dir="in" pin="1930,3030" x="50" y="140"/>
      <circ-port dir="in" pin="2020,4130" x="50" y="160"/>
      <circ-port dir="in" pin="2190,1700" x="50" y="110"/>
      <circ-port dir="in" pin="2240,1620" x="50" y="130"/>
      <circ-port dir="in" pin="2240,1660" x="50" y="120"/>
      <circ-port dir="in" pin="2360,4070" x="50" y="170"/>
      <circ-port dir="out" pin="1450,2920" x="1260" y="90"/>
      <circ-port dir="out" pin="1830,3030" x="1260" y="70"/>
      <circ-port dir="out" pin="2460,4140" x="1260" y="80"/>
      <circ-port dir="out" pin="2870,1840" x="1260" y="60"/>
    </appear>
    <comp lib="0" loc="(1080,2490)" name="Clock">
      <a name="facing" val="north"/>
    </comp>
    <comp lib="0" loc="(1290,3000)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1310,2480)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1320,2540)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1330,2250)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1370,2440)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1420,2930)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1450,2900)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1450,2920)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1650,2940)" name="Tunnel">
      <a name="label" val="a"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(1780,2900)" name="Probe">
      <a name="appearance" val="classic"/>
      <a name="radix" val="16"/>
    </comp>
    <comp lib="0" loc="(1830,3030)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1890,3190)" name="Tunnel">
      <a name="label" val="a"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(1930,3030)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(2010,4070)" name="Clock">
      <a name="facing" val="north"/>
    </comp>
    <comp lib="0" loc="(2020,4130)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(2190,1700)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(2240,1620)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(2240,1660)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(2360,4070)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(2460,4140)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(2870,1840)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="11" loc="(1340,3230)" name="Rv32im"/>
    <comp lib="11" loc="(1340,3850)" name="SocBus">
      <a name="SocBusIdentifier" val="0x0000018B2B40DDAC6f82c57e"/>
    </comp>
    <comp lib="11" loc="(1470,2980)" name="SocJtagUart">
      <a name="SocBusSelection" val="0x0000018B2B40DDAC6f82c57e"/>
    </comp>
    <comp lib="11" loc="(1480,2470)" name="SocBus">
      <a name="SocBusIdentifier" val="0x0000018B2B219DDB6c88b0af"/>
    </comp>
    <comp lib="11" loc="(1480,2730)" name="SocPio">
      <a name="SocBusSelection" val="0x0000018B2B40DDAC6f82c57e"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="11" loc="(1490,1760)" name="Rv32im">
      <a name="SocBusSelection" val="0x0000018B2B40DDAC6f82c57e"/>
    </comp>
    <comp lib="11" loc="(2160,1750)" name="Nios2">
      <a name="SocBusSelection" val="0x0000018B2B40DDAC6f82c57e"/>
    </comp>
    <comp lib="11" loc="(2200,2490)" name="Socmem">
      <a name="SocBusSelection" val="0x0000018B2B40DDAC6f82c57e"/>
    </comp>
    <comp lib="11" loc="(2210,2700)" name="SocVga">
      <a name="DisplayMode" val="640x480"/>
      <a name="SocBusSelection" val="0x0000018B2B40DDAC6f82c57e"/>
    </comp>
    <comp lib="5" loc="(1030,1580)" name="Keyboard"/>
    <comp lib="5" loc="(1030,1760)" name="RGBLED"/>
    <comp lib="5" loc="(1030,1800)" name="7-Segment Display"/>
    <comp lib="5" loc="(1030,2060)" name="DotMatrix"/>
    <comp lib="5" loc="(1040,1440)" name="DipSwitch"/>
    <comp lib="5" loc="(1040,1620)" name="LED"/>
    <comp lib="5" loc="(1040,1690)" name="LedBar"/>
    <comp lib="5" loc="(1040,1950)" name="Hex Digit Display"/>
    <comp lib="5" loc="(1060,1400)" name="Button"/>
    <comp lib="5" loc="(1070,1520)" name="Joystick"/>
    <comp lib="5" loc="(1110,2720)" name="DipSwitch">
      <a name="label" val="raid"/>
      <a name="number" val="3"/>
    </comp>
    <comp lib="5" loc="(1660,3150)" name="Keyboard"/>
    <comp lib="5" loc="(1940,2840)" name="TTY"/>
    <comp lib="5" loc="(2090,3810)" name="RGB Video"/>
    <comp lib="5" loc="(2670,3700)" name="ReptarLB"/>
    <comp lib="5" loc="(3290,2420)" name="PortIO"/>
    <comp lib="6" loc="(1220,3110)" name="7411"/>
    <comp lib="6" loc="(1470,3110)" name="7421"/>
    <comp lib="6" loc="(1820,3110)" name="7402"/>
    <comp lib="8" loc="(1260,1346)" name="Text">
      <a name="text" val="G"/>
    </comp>
    <comp lib="8" loc="(1660,1084)" name="Text">
      <a name="text" val="内控"/>
    </comp>
    <comp lib="8" loc="(1910,1108)" name="Text">
      <a name="text" val="E-core"/>
    </comp>
    <comp lib="8" loc="(1912,992)" name="Text">
      <a name="text" val="DDR"/>
    </comp>
    <comp lib="8" loc="(1916,1066)" name="Text">
      <a name="text" val="低功率岛"/>
    </comp>
    <comp lib="8" loc="(1981,1278)" name="Text">
      <a name="text" val="soc tile"/>
    </comp>
    <comp lib="8" loc="(2216,1546)" name="Text">
      <a name="text" val="wifi 6e"/>
    </comp>
    <comp lib="8" loc="(2280,1080)" name="Text">
      <a name="text" val="NPU"/>
    </comp>
    <comp lib="8" loc="(2432,1588)" name="Text">
      <a name="text" val="显示"/>
    </comp>
    <comp lib="8" loc="(2591,990)" name="Text">
      <a name="text" val="e_core"/>
    </comp>
    <comp lib="8" loc="(2593,1077)" name="Text">
      <a name="text" val="e_core"/>
    </comp>
    <comp lib="8" loc="(2598,1292)" name="Text">
      <a name="text" val="e_core"/>
    </comp>
    <comp lib="8" loc="(2599,1367)" name="Text">
      <a name="text" val="e_core"/>
    </comp>
    <comp lib="8" loc="(2670,989)" name="Text">
      <a name="text" val="e_core"/>
    </comp>
    <comp lib="8" loc="(2672,1076)" name="Text">
      <a name="text" val="e_core"/>
    </comp>
    <comp lib="8" loc="(2678,1293)" name="Text">
      <a name="text" val="e_core"/>
    </comp>
    <comp lib="8" loc="(2678,1368)" name="Text">
      <a name="text" val="e_core"/>
    </comp>
    <comp lib="8" loc="(2832,1045)" name="Text">
      <a name="text" val="p_core"/>
    </comp>
    <comp lib="8" loc="(2845,1335)" name="Text">
      <a name="text" val="p_core"/>
    </comp>
    <comp lib="8" loc="(2888,1170)" name="Text">
      <a name="text" val="cpu tile"/>
    </comp>
    <comp lib="8" loc="(2892,1688)" name="Text">
      <a name="text" val="雷电4"/>
    </comp>
    <comp lib="8" loc="(2907,1580)" name="Text">
      <a name="text" val="i/o"/>
    </comp>
    <comp lib="8" loc="(2949,1043)" name="Text">
      <a name="text" val="p_core"/>
    </comp>
    <comp lib="8" loc="(2959,1334)" name="Text">
      <a name="text" val="p_core"/>
    </comp>
    <comp lib="8" loc="(3074,1040)" name="Text">
      <a name="text" val="p_core"/>
    </comp>
    <comp lib="8" loc="(3085,1334)" name="Text">
      <a name="text" val="p_core"/>
    </comp>
    <comp lib="8" loc="(3218,1592)" name="Text">
      <a name="text" val="pcie gen5"/>
    </comp>
    <comp lib="8" loc="(3342,1099)" name="Text">
      <a name="text" val="p_core"/>
    </comp>
    <comp lib="8" loc="(3357,1334)" name="Text">
      <a name="text" val="p_core"/>
    </comp>
    <comp lib="8" loc="(538,1140)" name="Text">
      <a name="font" val="SansSerif bold 64"/>
      <a name="text" val="|"/>
    </comp>
    <comp lib="8" loc="(538,1200)" name="Text">
      <a name="font" val="SansSerif bold 64"/>
      <a name="text" val="|"/>
    </comp>
    <comp lib="8" loc="(538,1260)" name="Text">
      <a name="font" val="SansSerif bold 64"/>
      <a name="text" val="|"/>
    </comp>
    <comp lib="8" loc="(538,1320)" name="Text">
      <a name="font" val="SansSerif bold 64"/>
      <a name="text" val="|"/>
    </comp>
    <comp lib="8" loc="(538,1380)" name="Text">
      <a name="font" val="SansSerif bold 64"/>
      <a name="text" val="|"/>
    </comp>
    <comp lib="8" loc="(538,1440)" name="Text">
      <a name="font" val="SansSerif bold 64"/>
      <a name="text" val="|"/>
    </comp>
    <comp lib="8" loc="(538,1500)" name="Text">
      <a name="font" val="SansSerif bold 64"/>
      <a name="text" val="|"/>
    </comp>
    <comp lib="8" loc="(538,1560)" name="Text">
      <a name="font" val="SansSerif bold 64"/>
      <a name="text" val="|"/>
    </comp>
    <comp loc="(2310,4110)" name="a">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(1080,2460)" to="(1080,2490)"/>
    <wire from="(1080,2460)" to="(1340,2460)"/>
    <wire from="(1270,3050)" to="(1270,3080)"/>
    <wire from="(1290,3000)" to="(1290,3010)"/>
    <wire from="(1290,3010)" to="(1470,3010)"/>
    <wire from="(1310,2480)" to="(1480,2480)"/>
    <wire from="(1320,2540)" to="(1320,2550)"/>
    <wire from="(1320,2550)" to="(1410,2550)"/>
    <wire from="(1320,3840)" to="(1330,3840)"/>
    <wire from="(1330,2250)" to="(1330,2370)"/>
    <wire from="(1330,2370)" to="(1490,2370)"/>
    <wire from="(1330,3140)" to="(1330,3180)"/>
    <wire from="(1330,3840)" to="(1330,3860)"/>
    <wire from="(1330,3840)" to="(1340,3840)"/>
    <wire from="(1330,3860)" to="(1340,3860)"/>
    <wire from="(1340,2460)" to="(1340,2880)"/>
    <wire from="(1340,2460)" to="(1460,2460)"/>
    <wire from="(1340,2880)" to="(1340,3030)"/>
    <wire from="(1340,2880)" to="(1840,2880)"/>
    <wire from="(1340,3030)" to="(1410,3030)"/>
    <wire from="(1350,3050)" to="(1350,3080)"/>
    <wire from="(1350,3050)" to="(1360,3050)"/>
    <wire from="(1370,2440)" to="(2140,2440)"/>
    <wire from="(1410,2550)" to="(1410,2840)"/>
    <wire from="(1410,2840)" to="(1480,2840)"/>
    <wire from="(1410,3030)" to="(1410,3150)"/>
    <wire from="(1410,3030)" to="(1470,3030)"/>
    <wire from="(1410,3150)" to="(1660,3150)"/>
    <wire from="(1420,2930)" to="(1440,2930)"/>
    <wire from="(1440,2930)" to="(1440,3170)"/>
    <wire from="(1440,2930)" to="(1450,2930)"/>
    <wire from="(1440,3170)" to="(1670,3170)"/>
    <wire from="(1450,2900)" to="(1490,2900)"/>
    <wire from="(1450,2920)" to="(1450,2930)"/>
    <wire from="(1450,2930)" to="(1480,2930)"/>
    <wire from="(1460,2390)" to="(1460,2460)"/>
    <wire from="(1460,2390)" to="(1490,2390)"/>
    <wire from="(1460,2460)" to="(2150,2460)"/>
    <wire from="(1460,3060)" to="(1460,3190)"/>
    <wire from="(1460,3060)" to="(1560,3060)"/>
    <wire from="(1460,3190)" to="(1680,3190)"/>
    <wire from="(1480,2930)" to="(1480,2980)"/>
    <wire from="(1490,2900)" to="(1490,2950)"/>
    <wire from="(1490,2950)" to="(1490,2980)"/>
    <wire from="(1490,2950)" to="(1560,2950)"/>
    <wire from="(1540,1010)" to="(1540,1120)"/>
    <wire from="(1540,1010)" to="(1800,1010)"/>
    <wire from="(1540,1120)" to="(1540,1730)"/>
    <wire from="(1540,1120)" to="(1800,1120)"/>
    <wire from="(1540,1730)" to="(2070,1730)"/>
    <wire from="(1540,960)" to="(1540,1010)"/>
    <wire from="(1540,960)" to="(2510,960)"/>
    <wire from="(1560,2950)" to="(1560,3060)"/>
    <wire from="(1590,2920)" to="(1590,3000)"/>
    <wire from="(1590,2920)" to="(1630,2920)"/>
    <wire from="(1590,3000)" to="(1650,3000)"/>
    <wire from="(1600,2930)" to="(1600,2980)"/>
    <wire from="(1600,2930)" to="(1630,2930)"/>
    <wire from="(1600,3060)" to="(1600,3080)"/>
    <wire from="(1600,3060)" to="(1610,3060)"/>
    <wire from="(1610,2940)" to="(1610,2980)"/>
    <wire from="(1610,2940)" to="(1650,2940)"/>
    <wire from="(1630,2920)" to="(1630,2930)"/>
    <wire from="(1630,2950)" to="(1630,2980)"/>
    <wire from="(1630,2950)" to="(1760,2950)"/>
    <wire from="(1650,2960)" to="(1650,2980)"/>
    <wire from="(1650,2960)" to="(1720,2960)"/>
    <wire from="(1650,3000)" to="(1650,3080)"/>
    <wire from="(1650,3080)" to="(1740,3080)"/>
    <wire from="(1660,2970)" to="(1660,2980)"/>
    <wire from="(1660,2970)" to="(1960,2970)"/>
    <wire from="(1670,3160)" to="(1670,3170)"/>
    <wire from="(1680,3160)" to="(1680,3190)"/>
    <wire from="(1720,2860)" to="(1720,2960)"/>
    <wire from="(1720,2860)" to="(1950,2860)"/>
    <wire from="(1740,3080)" to="(1740,3190)"/>
    <wire from="(1740,3190)" to="(1790,3190)"/>
    <wire from="(1760,2910)" to="(1760,2950)"/>
    <wire from="(1760,2910)" to="(1780,2910)"/>
    <wire from="(1760,2950)" to="(1830,2950)"/>
    <wire from="(1770,3030)" to="(1830,3030)"/>
    <wire from="(1780,2900)" to="(1780,2910)"/>
    <wire from="(1790,3160)" to="(1790,3190)"/>
    <wire from="(1800,1010)" to="(1800,1120)"/>
    <wire from="(1800,1010)" to="(2030,1010)"/>
    <wire from="(1800,1120)" to="(2030,1120)"/>
    <wire from="(1800,3160)" to="(1800,3190)"/>
    <wire from="(1800,3190)" to="(1890,3190)"/>
    <wire from="(1830,2950)" to="(1830,2980)"/>
    <wire from="(1830,2980)" to="(1980,2980)"/>
    <wire from="(1840,2880)" to="(1840,2920)"/>
    <wire from="(1840,2920)" to="(1860,2920)"/>
    <wire from="(1850,2850)" to="(1850,2910)"/>
    <wire from="(1850,2910)" to="(1940,2910)"/>
    <wire from="(1860,2920)" to="(1860,2960)"/>
    <wire from="(1860,2960)" to="(1950,2960)"/>
    <wire from="(1900,2840)" to="(1900,2890)"/>
    <wire from="(1900,2840)" to="(1940,2840)"/>
    <wire from="(1900,2890)" to="(1950,2890)"/>
    <wire from="(1920,2830)" to="(1920,2870)"/>
    <wire from="(1920,2830)" to="(1940,2830)"/>
    <wire from="(1920,2870)" to="(1980,2870)"/>
    <wire from="(1930,3030)" to="(1940,3030)"/>
    <wire from="(1940,2910)" to="(1940,3030)"/>
    <wire from="(1950,2850)" to="(1950,2860)"/>
    <wire from="(1950,2890)" to="(1950,2960)"/>
    <wire from="(1960,2850)" to="(1960,2970)"/>
    <wire from="(1980,2870)" to="(1980,2980)"/>
    <wire from="(2010,4050)" to="(2010,4070)"/>
    <wire from="(2010,4050)" to="(2050,4050)"/>
    <wire from="(2020,4130)" to="(2090,4130)"/>
    <wire from="(2030,1010)" to="(2030,1120)"/>
    <wire from="(2030,1010)" to="(2510,1010)"/>
    <wire from="(2030,1120)" to="(2510,1120)"/>
    <wire from="(2050,4050)" to="(2050,4110)"/>
    <wire from="(2050,4110)" to="(2090,4110)"/>
    <wire from="(2140,2370)" to="(2140,2440)"/>
    <wire from="(2140,2370)" to="(2160,2370)"/>
    <wire from="(2150,2390)" to="(2150,2460)"/>
    <wire from="(2150,2390)" to="(2160,2390)"/>
    <wire from="(2150,2460)" to="(2160,2460)"/>
    <wire from="(2160,2390)" to="(2160,2460)"/>
    <wire from="(2190,1700)" to="(2190,1750)"/>
    <wire from="(2240,1620)" to="(2290,1620)"/>
    <wire from="(2240,1660)" to="(2240,1750)"/>
    <wire from="(2290,1620)" to="(2290,1750)"/>
    <wire from="(2310,4110)" to="(2400,4110)"/>
    <wire from="(2310,4130)" to="(2460,4130)"/>
    <wire from="(2350,1400)" to="(2350,1730)"/>
    <wire from="(2350,1400)" to="(2510,1400)"/>
    <wire from="(2350,1730)" to="(2510,1730)"/>
    <wire from="(2360,4070)" to="(2400,4070)"/>
    <wire from="(2400,4070)" to="(2400,4110)"/>
    <wire from="(2460,4130)" to="(2460,4140)"/>
    <wire from="(2510,1010)" to="(2510,1120)"/>
    <wire from="(2510,1120)" to="(2510,1400)"/>
    <wire from="(2510,1400)" to="(2510,1730)"/>
    <wire from="(2510,1400)" to="(3060,1400)"/>
    <wire from="(2510,1730)" to="(2650,1730)"/>
    <wire from="(2510,960)" to="(2510,1010)"/>
    <wire from="(2650,1650)" to="(2650,1730)"/>
    <wire from="(2650,1650)" to="(2710,1650)"/>
    <wire from="(2650,1730)" to="(2710,1730)"/>
    <wire from="(2710,1650)" to="(2710,1730)"/>
    <wire from="(2710,1650)" to="(3010,1650)"/>
    <wire from="(2710,1730)" to="(2750,1730)"/>
    <wire from="(2770,1720)" to="(2770,1750)"/>
    <wire from="(2770,1720)" to="(2870,1720)"/>
    <wire from="(2870,1720)" to="(2870,1840)"/>
    <wire from="(2890,1730)" to="(3010,1730)"/>
    <wire from="(3010,1650)" to="(3010,1730)"/>
    <wire from="(3010,1650)" to="(3100,1650)"/>
    <wire from="(3010,1730)" to="(3060,1730)"/>
    <wire from="(3060,1400)" to="(3060,1730)"/>
    <wire from="(3060,1400)" to="(3250,1400)"/>
    <wire from="(3060,1730)" to="(3100,1730)"/>
    <wire from="(3100,1650)" to="(3100,1730)"/>
    <wire from="(3100,1730)" to="(3250,1730)"/>
    <wire from="(3250,1360)" to="(3250,1400)"/>
    <wire from="(3250,1400)" to="(3250,1730)"/>
    <wire from="(3440,1400)" to="(3440,1730)"/>
  </circuit>
  <vhdl name="a">library IEEE;&#13;
use IEEE.STD_LOGIC_1164.ALL;&#13;
use IEEE.STD_LOGIC_ARITH.ALL;&#13;
use IEEE.STD_LOGIC_UNSIGNED.ALL;&#13;
&#13;
entity pla_pow is&#13;
    Port ( X : in  STD_LOGIC_VECTOR (3 downto 0);&#13;
           Y : in  STD_LOGIC_VECTOR (3 downto 0);&#13;
           Z : out STD_LOGIC_VECTOR (7 downto 0));&#13;
end pla_pow;&#13;
&#13;
architecture Behavioral of pla_pow is&#13;
    signal count : STD_LOGIC_VECTOR (4 downto 0);&#13;
    signal temp : STD_LOGIC_VECTOR (7 downto 0);&#13;
begin&#13;
    process (X, Y)&#13;
    begin&#13;
        temp(3 downto 0) &lt;= X;&#13;
        temp(7 downto 4) &lt;= "0000";&#13;
        count &lt;= "0000";&#13;
        while (temp(3 downto 0) /= "1111") loop&#13;
            if (temp(3 downto 0) = X) then&#13;
                count &lt;= count + 1;&#13;
                if (count = Y) then&#13;
                    Z &lt;= temp;&#13;
                    exit;&#13;
                end if;&#13;
            end if;&#13;
            temp &lt;= temp * 2;&#13;
        end loop;&#13;
    end process;&#13;
end Behavioral;&#13;
</vhdl>
  <vhdl name="processor">------------------------------&lt; In The Name Of GOD &gt;-------------------------------&#13;
-- Company: Dalmif&#13;
-- Engineer: Ali Fallah&#13;
-- &#13;
-- Create Date:    19:53:17 05/28/2017 &#13;
-- Design Name: 		Processor (enshaallah)&#13;
-- Module Name:    processor - Behavioral &#13;
-- Project Name: &#13;
-- Target Devices: &#13;
-- Tool versions: &#13;
-- Description: &#13;
--&#13;
-- Dependencies: &#13;
--&#13;
-- Revision: &#13;
-- Revision 0.01 - File Created&#13;
-- Additional Comments: &#13;
--&#13;
----------------------------------------------------------------------------------&#13;
library IEEE;&#13;
use IEEE.STD_LOGIC_1164.ALL;&#13;
use IEEE.NUMERIC_STD.ALL;&#13;
 &#13;
entity processor is&#13;
    Port ( clk_i   : in  STD_LOGIC;&#13;
			  reset_i : in  STD_LOGIC;&#13;
			  cs      : out STD_LOGIC;&#13;
			  sclk_o  : out STD_LOGIC;&#13;
			  mosi_o  : out STD_LOGIC;&#13;
			  miso_i  : in  STD_LOGIC;&#13;
			  TX 		 : out STD_LOGIC; -- UART&#13;
			  LED 	 : out STD_LOGIC_VECTOR (3 downto 0);&#13;
  ---------&lt;VGA Signal&gt;--------------------&#13;
			  BLUE    : out std_logic;&#13;
			  GREEN   : out std_logic;&#13;
			  RED     : out std_logic;&#13;
			  HS		 : out std_logic;&#13;
  			  VS 	    : out std_logic&#13;
	 );&#13;
end processor;&#13;
&#13;
architecture Behavioral of processor is&#13;
&#13;
COMPONENT MainMemory&#13;
  PORT (&#13;
    clka : IN STD_LOGIC;&#13;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);&#13;
    addra : IN STD_LOGIC_VECTOR(8 DOWNTO 0);&#13;
    dina : IN STD_LOGIC_VECTOR(7 DOWNTO 0);&#13;
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)&#13;
  );&#13;
END COMPONENT;&#13;
&#13;
component UART_TX port (&#13;
    CLK     : in  STD_LOGIC;&#13;
	 SendKey   : in  STD_LOGIC;&#13;
	 Tx     : out  STD_LOGIC;&#13;
	 data : in  STD_LOGIC_VECTOR (7 downto 0));&#13;
	end component;&#13;
&#13;
component MYVGA    port ( &#13;
			CLK_50MHz: in std_logic;&#13;
			Xchar : std_logic_vector(6 downto 0);&#13;
			Ychar : std_logic_vector(4 downto 0);&#13;
			char : std_logic_vector(6 downto 0);&#13;
         VS: out std_logic;&#13;
			HS: out std_logic;&#13;
			RED: out std_logic;&#13;
			GREEN: out std_logic;&#13;
			BLUE: out std_logic&#13;
  );&#13;
	end component;&#13;
&#13;
	&#13;
component SdCardCtrl is&#13;
    port (&#13;
      clk_i      : in  std_logic;       -- Master clock.&#13;
      reset_i    : in  std_logic                     ;  -- active-high, synchronous  reset.&#13;
      rd_i       : in  std_logic                     ;  -- active-high read block request.&#13;
      wr_i       : in  std_logic                     ;  -- active-high write block request.&#13;
      continue_i : in  std_logic                     ;  -- If true, inc address and continue R/W.&#13;
      addr_i     : in  std_logic_vector(31 downto 0) ;  -- Block address.&#13;
      data_i     : in  std_logic_vector(7 downto 0)  ;  -- Data to write to block.&#13;
      data_o     : out std_logic_vector(7 downto 0)  ;  -- Data read from block.&#13;
      busy_o     : out std_logic;  -- High when controller is busy performing some operation.&#13;
      hndShk_i   : in  std_logic;  -- High when host has data to give or has taken data.&#13;
      hndShk_o   : out std_logic;  -- High when controller has taken data or has data to give.&#13;
      error_o    : out std_logic_vector(15 downto 0) ;&#13;
      -- I/O signals to the external SD card.&#13;
      cs_bo      : out std_logic                    ;  -- Active-low chip-select.&#13;
      sclk_o     : out std_logic                    ;  -- Serial clock to SD card.&#13;
      mosi_o     : out std_logic                     ;  -- Serial data output to SD card.&#13;
      miso_i     : in  std_logic                       -- Serial data input from SD card.&#13;
      );&#13;
  end component;&#13;
  &#13;
  signal NOTreset_i       : std_logic;	-- Enable read&#13;
  signal sd_read_en       : std_logic	:= '1';	-- Enable read&#13;
  signal sd_write_en       : std_logic	:= '0';	-- Enable Write&#13;
  signal sd_read_continue : std_logic	:= '0';	-- continue read sector&#13;
  signal sd_is_busy	  : std_logic;	-- sd card is busy&#13;
  signal sd_h_hndShk	  : std_logic; -- host Hande Shake&#13;
  signal sd_c_hndShk	  : std_logic;-- clinet Hande Shake&#13;
  signal sd_address    : std_logic_vector(31 downto 0):= (others =&gt;'0');	-- address to read / write&#13;
  signal sd_data_in    :  std_logic_vector(7 downto 0);-- data to wirte&#13;
  signal sd_data_out    :  std_logic_vector(7 downto 0); -- data to read&#13;
  signal sd_error    :  std_logic_vector(15 downto 0); -- sd card error message&#13;
  signal CounterPulse    :  std_logic_vector(15 downto 0); -- sd card error message&#13;
  signal main_mem_wr_en	: std_logic_vector (0 downto 0); -- Enable Write Pin Memory&#13;
  signal main_mem_addr	: std_logic_vector (8 downto 0); -- Address of MAin mamory to read / write&#13;
  signal main_mem_data_in	: std_logic_vector (7 downto 0); -- data to Write on Main Mamory&#13;
  signal main_mem_data_out	: std_logic_vector (7 downto 0); -- data read from Main Mamory&#13;
  &#13;
  signal tx_char   	: std_logic_vector (7 downto 0); -- char send to tx&#13;
  signal uart_tx_b	: std_logic; -- boolean send char&#13;
  signal ClockPulse : std_logic_vector (15 downto 0);&#13;
  signal CLKPorcessor : std_logic;&#13;
	&#13;
  signal Xchar : std_logic_vector(6 downto 0);&#13;
  signal Ychar : std_logic_vector(4 downto 0);&#13;
  signal char  : std_logic_vector(6 downto 0);&#13;
&#13;
	&#13;
begin&#13;
&#13;
 mian_mem : MainMemory&#13;
  PORT MAP (&#13;
    clka =&gt; clk_i,&#13;
    wea =&gt; main_mem_wr_en,&#13;
    addra =&gt; main_mem_addr,&#13;
    dina =&gt; main_mem_data_in,&#13;
    douta =&gt; main_mem_data_out&#13;
  );&#13;
  &#13;
  &#13;
 VGA : MYVGA&#13;
  PORT MAP (&#13;
    CLK_50MHz =&gt; clk_i,&#13;
	 Xchar =&gt; Xchar ,&#13;
	 Ychar =&gt; Ychar,&#13;
	 char  =&gt; Char,&#13;
    VS =&gt; VS,&#13;
    HS =&gt; HS,&#13;
    RED =&gt; RED,&#13;
    GREEN =&gt; GREEN,&#13;
    BLUE =&gt; BLUE&#13;
  );&#13;
&#13;
  &#13;
 HDD : SdCardCtrl port map (&#13;
		clk_i      =&gt; clk_i,&#13;
      reset_i    =&gt; NOTreset_i,&#13;
      rd_i       =&gt; sd_read_en,&#13;
      wr_i       =&gt; sd_write_en,&#13;
      continue_i =&gt; sd_read_continue,&#13;
      addr_i     =&gt; sd_address,&#13;
      data_i     =&gt; sd_data_in,&#13;
      data_o     =&gt; sd_data_out,&#13;
      busy_o     =&gt; sd_is_busy,&#13;
      hndShk_i   =&gt; sd_h_hndShk,&#13;
      hndShk_o   =&gt; sd_c_hndShk,&#13;
      error_o    =&gt; sd_error,&#13;
      -- I/O signals to the external SD card.&#13;
      cs_bo      =&gt; cs,&#13;
      sclk_o     =&gt;sclk_o,&#13;
      mosi_o     =&gt;mosi_o,&#13;
      miso_i     =&gt;miso_i&#13;
 );&#13;
 &#13;
UART : UART_TX port map (&#13;
    CLK     =&gt; clk_i,&#13;
	 SendKey   =&gt; uart_tx_b,&#13;
	 Tx =&gt; TX,&#13;
    data  =&gt; tx_char&#13;
);&#13;
&#13;
&#13;
	instruction : process (CLKPorcessor)&#13;
	type State_type is (    -- States of the SD card controller FSM.&#13;
      READ_BYTE,  -- Send initialization clock pulses to the deselected SD card.    &#13;
		Read_Sector, -- Read first sector&#13;
		detect_inst,&#13;
		INTRRUPT,&#13;
		Next_Byte,&#13;
		detect_gpr1,&#13;
		detect_addr,&#13;
		read_addr_mem,&#13;
		const_to_mem,&#13;
		detect_operate,&#13;
		WRITE_BYTE,&#13;
		set_reg_h,&#13;
		set_val_reg,&#13;
		halt,&#13;
		jump,&#13;
		detect_gpr4,&#13;
		detect_gpr5,&#13;
		Cond_Jump,&#13;
		Call,&#13;
		RET,&#13;
		POPF,&#13;
		MOVS,&#13;
		CMPS,&#13;
		COMP,&#13;
		REP,&#13;
		POP,&#13;
		show_char,&#13;
		Init			-- redy to start&#13;
      );&#13;
&#13;
	variable State     : State_type := Init;  -- Current state of the FSM.&#13;
	variable RTNstate  : State_type := Init;  -- Next    state of the FSM.&#13;
	variable EXstate   : State_type := Init;  -- Extera  state of the FSM.&#13;
			&#13;
	type SubState_type is (    -- States of the SD card controller FSM.&#13;
			adder,&#13;
			adcer,&#13;
			suber,&#13;
			muler,&#13;
			ander,&#13;
			xorer,&#13;
			orer,&#13;
			mover,&#13;
			incer,&#13;
			decer,&#13;
			pusher,&#13;
			sbber,&#13;
			poper&#13;
      );&#13;
					&#13;
	variable Sub_State     : SubState_type;  -- Current state of the FSM.&#13;
	&#13;
	type Intrupt_Type is (&#13;
	int_LED&#13;
	);&#13;
	&#13;
	subtype NUMBER_MEMORY_BIT is std_logic_vector(8 downto 0);-- 2^9 = 512byte&#13;
	 &#13;
	variable int : Intrupt_Type;&#13;
	variable cnt_bit : natural range 0 to 512;  -- Counter of bits&#13;
	variable num_byte : natural range 0 to 4;  -- Number of byte to read&#13;
	variable num_byte_v : natural range 0 to 4;  -- Number of byte to read&#13;
	variable addr_mem_rw : std_logic_vector (15 downto 0);&#13;
	variable ram_rw_en : std_logic ;		-- Enable other address to read write (else IP)&#13;
	variable val_const_bit : std_logic ;		-- it show constant value (e.g. mov [bx]+3,'j')&#13;
&#13;
	variable AX  : std_logic_vector (15 downto 0);  -- AX Regester&#13;
	variable BX  : std_logic_vector (15 downto 0);  -- BX Regester&#13;
	variable CX  : std_logic_vector (15 downto 0);  -- CX Regester&#13;
	variable DX  : std_logic_vector (15 downto 0);  -- DX Regester&#13;
	&#13;
	variable CS  : std_logic_vector (15 downto 0);  -- Code Segment Regester&#13;
	variable DS  : std_logic_vector (15 downto 0);  -- Data Segment Regester&#13;
	variable ES  : std_logic_vector (15 downto 0);  -- ExtraSegment Regester&#13;
	variable SS  : std_logic_vector (15 downto 0);  -- Stack Segment Regester&#13;
	variable IP  : std_logic_vector (15 downto 0);  -- Instruction Pointer Regester&#13;
	&#13;
	variable SP  : std_logic_vector (15 downto 0);  -- Stack Pointer Regester&#13;
	variable BP  : std_logic_vector (15 downto 0);  -- Base Pointer Regester&#13;
	variable SI  : std_logic_vector (15 downto 0);  -- Source Index Regester&#13;
	variable DI  : std_logic_vector (15 downto 0);  -- Destination Index Regester&#13;
	&#13;
	alias AL: std_logic_vector (7 downto 0) is AX (7 downto 0);&#13;
	alias AH: std_logic_vector (7 downto 0) is AX (15 downto 8);&#13;
	alias CL: std_logic_vector (7 downto 0) is CX (7 downto 0);&#13;
	alias CH: std_logic_vector (7 downto 0) is CX (15 downto 8);&#13;
	alias DL: std_logic_vector (7 downto 0) is DX (7 downto 0);&#13;
	alias DH: std_logic_vector (7 downto 0) is DX (15 downto 8);	&#13;
	alias BL: std_logic_vector (7 downto 0) is BX (7 downto 0);&#13;
	alias BH: std_logic_vector (7 downto 0) is BX (15 downto 8);&#13;
	&#13;
	variable flag	: std_logic_vector (7 downto 0);	-- DF, IF, AF, PF, OF, SF, ZF, CF&#13;
	alias carry_flag:    std_logic  is flag(0);	-- carry_flag bit show&#13;
	alias zero_flag:     std_logic  is flag(1);	-- zero_flag bit show&#13;
	alias sign_flag:     std_logic  is flag(2);	-- sign_flag bit show&#13;
	alias overflow_flag: std_logic  is flag(3);	-- overflow_flag bit show&#13;
	alias parity_flag:   std_logic  is flag(4);	-- parity_flag bit show&#13;
	alias adjust_flag:   std_logic  is flag(5);	-- adjust_flag bit show&#13;
	alias intrrupt_flag: std_logic  is flag(6);	-- intrrupt_flag bit show&#13;
	alias direction_flag:std_logic  is flag(7);	-- direction_flag bit show&#13;
&#13;
&#13;
	variable byte0	: std_logic_vector (7 downto 0);	-- Save instruction Code&#13;
	variable byte1	: std_logic_vector (7 downto 0);	-- Save instruction Code&#13;
	variable byte2	: std_logic_vector (7 downto 0);	-- Save instruction Code&#13;
	variable byte3	: std_logic_vector (7 downto 0);	-- Save instruction Code&#13;
	&#13;
	variable reg_h	: std_logic_vector (16 downto 0);	-- Complementary register - the MSB bit is carry_flag bit&#13;
	alias m_reg_0 : std_logic_vector (1 downto 0) is byte0 (7 downto 6);	-- MODE of Addressing (e.g. "11" means reg to reg)&#13;
	&#13;
	variable m_reg : std_logic_vector (1 downto 0);	-- MODE of Addressing (e.g. "11" means reg to reg)&#13;
	&#13;
	variable rm_t	: std_logic_vector (2 downto 0);	-- register / memory address&#13;
	variable reg_t	: std_logic_vector (2 downto 0);	-- register address&#13;
	&#13;
	variable repnz_en	: std_logic;	-- repnz enable&#13;
	variable repz_en	: std_logic;	-- repz enable&#13;
	variable compare	: std_logic;	-- compare : dont operate on byte and reg&#13;
	variable S_reg	: std_logic;	-- THE Parameter is Word (16bit)&#13;
	variable W_reg	: std_logic;	-- THE Regester is Word (16bit)&#13;
	variable D_reg	: std_logic;	-- Direction (1: R/M to reg	0: reg to R/M)&#13;
	&#13;
	variable bool	: std_logic;	-- boolean &#13;
	variable cheng_reg_h_byte	: std_logic;	-- it Makes it : byte val -&gt; reg_h val (in detect_operate case)&#13;
	&#13;
   variable LED_v	   : std_logic_vector (3 downto 0);	-- Save Addressing (parametr)&#13;
	&#13;
	constant iAX,iAL  : std_logic_vector(2 downto 0) := "000";&#13;
	constant iCX,iCL  : std_logic_vector(2 downto 0) := "001";&#13;
	constant iDX,iDL  : std_logic_vector(2 downto 0) := "010";&#13;
	constant iBX,iBL  : std_logic_vector(2 downto 0) := "011";&#13;
	constant iSP,iAH  : std_logic_vector(2 downto 0) := "100";&#13;
	constant iBP,iCH  : std_logic_vector(2 downto 0) := "101";&#13;
	constant iSI,iDH  : std_logic_vector(2 downto 0) := "110";&#13;
	constant iDI,iBH  : std_logic_vector(2 downto 0) := "111";&#13;
	constant zeros_16 : std_logic_vector(AX'range) 	 := (others =&gt; '0');	&#13;
	constant zeros_8 	: std_logic_vector(AH'range) 	 := (others =&gt; '0');	&#13;
	variable reg1_t : std_logic_vector(2 downto 0);&#13;
	&#13;
	begin&#13;
		if rising_edge(CLKPorcessor) then&#13;
		 if (NOTreset_i =  '1') then&#13;
		  state := Init;&#13;
		 else&#13;
		  case state is&#13;
			when READ_BYTE =&gt;		-- Read One Byte From Main Memory ----------------------&lt;Read Byte&gt;--------------------&#13;
			 if (num_byte_v/= num_byte) then&#13;
				 case num_byte_v is&#13;
				  when 0 =&gt;&#13;
					byte0 := main_mem_data_out;&#13;
				  when 1 =&gt;&#13;
					byte1 := main_mem_data_out;&#13;
				  when 2 =&gt;&#13;
					byte2 := main_mem_data_out;&#13;
				  when 3 =&gt;&#13;
					byte3 := main_mem_data_out;&#13;
				  when others =&gt; null;&#13;
				  end case;&#13;
				  num_byte_v	:= num_byte_v+1;&#13;
				  if (ram_rw_en = '1') then addr_mem_rw	:= std_logic_vector (unsigned(addr_mem_rw) +1); else  &#13;
				  IP	:= std_logic_vector (unsigned(IP) +1);&#13;
				  end if;&#13;
			  else &#13;
			   num_byte_v	:=0;&#13;
				state	:= rtnstate;&#13;
				ram_rw_en		:= '0';&#13;
				tx_char	&lt;= byte0;&#13;
				uart_tx_b &lt;= not uart_tx_b;&#13;
			end if;&#13;
			&#13;
			when WRITE_BYTE =&gt;		-- Write One Byte From Main Memory ---------------------&lt;Write Byte&gt;--------------------&#13;
				main_mem_wr_en (0) &lt;= '1';&#13;
				ram_rw_en	:= '1';&#13;
				if (num_byte_v/= num_byte) then&#13;
				 case num_byte_v is&#13;
				  when 0 =&gt;&#13;
					main_mem_data_in &lt;= byte0;&#13;
				  when 1 =&gt;&#13;
					main_mem_data_in &lt;= byte1;&#13;
				  when 2 =&gt;&#13;
					main_mem_data_in &lt;= byte2;&#13;
				  when 3 =&gt;&#13;
					main_mem_data_in &lt;= byte3;&#13;
				  when others =&gt; null;&#13;
				  end case;&#13;
				  num_byte_v	:= num_byte_v+1;&#13;
				  addr_mem_rw	:= std_logic_vector (unsigned(addr_mem_rw) +1);&#13;
			  else &#13;
			   num_byte_v	:=0;&#13;
				state	:= rtnstate;&#13;
				main_mem_wr_en (0) &lt;= '0';&#13;
				ram_rw_en		:= '0';&#13;
			end if;&#13;
&#13;
			when detect_inst =&gt;	 -------------------------------&lt;Detection Instruction&gt;-----------------------------&#13;
			  case byte0 is&#13;
			  ------------------&lt; MOV AL,BL,CL,DL, number&gt;------------------------&#13;
				 when "1011----" =&gt;			-- Mov Al,Num&#13;
					 w_reg 	 := byte0 (3);&#13;
				    if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if; -- parameter is byte or word&#13;
					 reg1_t	 := byte0 (2 downto 0);  -- dest reg is AL&#13;
					 state 	 := READ_BYTE;&#13;
					 d_reg    := '1';&#13;
					 sub_state:= mover;&#13;
					 rtnstate := set_reg_h;&#13;
&#13;
			-----------------&lt;Intrrupt&gt;---------------------&#13;
				 when x"CD" =&gt;		-- intrrupt&#13;
					 num_byte := 1;&#13;
				    state 	:= READ_BYTE;&#13;
				    rtnstate	:= intrrupt;&#13;
			-----------------&lt;ADD&gt;---------------------&#13;
				 when "0000010-" =&gt;	--0x04 0x05   -- Add Al,AX &lt;- num&#13;
					 w_reg 	 := byte0 (0);&#13;
				    if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if; -- parameter is byte or word&#13;
					 reg1_t	:= iAx;  -- dest reg is AL or AX (depend w_reg)&#13;
					 state 	:= READ_BYTE;&#13;
					 d_reg := '1';&#13;
					 sub_state := adder;&#13;
					 rtnstate := set_reg_h;&#13;
					 &#13;
				 when "000000--"=&gt;	--0x00 0x03   -- Add ABCD L/H/X &lt;- ABCD L/H/X		 &#13;
					 W_reg	:= byte0 (0); &#13;
					 D_reg	:= byte0 (1); &#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 sub_state := adder;&#13;
					 rtnstate := detect_addr; &#13;
					 exstate    := set_reg_h;&#13;
			-----------------&lt;ADC&gt;---------------------&#13;
				 when "0001010-" =&gt;	--0x14 0x15   -- Adc Al,AX &lt;- num&#13;
					 w_reg 	 := byte0 (0);&#13;
				    if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if; -- parameter is byte or word&#13;
					 reg1_t	:= iAx;  -- dest reg is AL or AX (depend w_reg)&#13;
					 state 	:= READ_BYTE;&#13;
					 d_reg := '1';&#13;
					 sub_state := adcer;&#13;
					 rtnstate := set_reg_h;&#13;
					 &#13;
				 when "000100--"=&gt;	--0x10 0x13   -- Adc ABCD L/H/X &lt;- ABCD L/H/X		 &#13;
					 W_reg	:= byte0 (0); &#13;
					 D_reg	:= byte0 (1); &#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 sub_state := adcer;&#13;
					 rtnstate := detect_addr; 	&#13;
					 exstate    := set_reg_h;&#13;
					 &#13;
			-----------------&lt;SUB&gt;---------------------&#13;
				 when "0010110-" =&gt;		 --0x2C 0x2D  -- SUB Al,AX &lt;- num&#13;
				 	 w_reg 	 := byte0 (0);&#13;
				    if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if; -- parameter is byte or word&#13;
					 reg1_t	:= iAx;  -- dest reg is AL or AX (depend w_reg)&#13;
					 state 	:= READ_BYTE;&#13;
					 d_reg := '1';&#13;
					 sub_state := suber;&#13;
					 rtnstate := set_reg_h;&#13;
								 &#13;
				 when "001010--" =&gt;	--0x28 0x2b   -- sub BCD L/H/X &lt;- BCD L/H/X		 &#13;
					 W_reg	:= byte0 (0); &#13;
					 D_reg	:= byte0 (1); &#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 sub_state := suber;&#13;
					 rtnstate := detect_addr; &#13;
					 exstate    := set_reg_h;&#13;
					 &#13;
			-----------------&lt;SBB&gt;---------------------&#13;
				 when "0001110-" =&gt;		 --0x1C 0x1D  -- SUB Al,AX &lt;- num&#13;
				 	 w_reg 	 := byte0 (0);&#13;
				    if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if; -- parameter is byte or word&#13;
					 reg1_t	:= iAx;  -- dest reg is AL or AX (depend w_reg)&#13;
					 state 	:= READ_BYTE;&#13;
					 d_reg := '1';&#13;
					 sub_state := sbber;&#13;
					 rtnstate := set_reg_h;&#13;
								 &#13;
				 when "000110--" =&gt;	--0x18 0x1b   -- sub BCD L/H/X &lt;- BCD L/H/X		 &#13;
					 W_reg	:= byte0 (0); &#13;
					 D_reg	:= byte0 (1); &#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 sub_state := sbber;&#13;
					 rtnstate := detect_addr; &#13;
					 exstate    := set_reg_h;					 &#13;
			-----------------&lt;CMP&gt;---------------------&#13;
				 when "0011110-" =&gt;		 --0x3C 0x3D  -- CMP Al,AX &lt;- num&#13;
				 	 w_reg 	 := byte0 (0);&#13;
				    if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if; -- parameter is byte or word&#13;
					 reg1_t	:= iAx;  -- dest reg is AL or AX (depend w_reg)&#13;
					 state 	:= READ_BYTE;&#13;
					 d_reg := '1';&#13;
					 sub_state:= suber;&#13;
					 rtnstate := set_reg_h;&#13;
					 compare  := '1';&#13;
								 &#13;
				 when "001110--" =&gt;	--0x38 0x3b   -- CMP BCD L/H/X &lt;- BCD L/H/X		 &#13;
					 W_reg	:= byte0 (0); &#13;
					 D_reg	:= byte0 (1); &#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 sub_state := suber;&#13;
					 rtnstate := detect_addr; &#13;
					 exstate    := set_reg_h;	&#13;
					 compare  := '1';&#13;
			-----------------&lt;AND&gt;---------------------&#13;
				when "0010010-" =&gt;	--0x24 0x25   -- And Al,AX &lt;- num&#13;
					 w_reg 	 := byte0 (0);&#13;
				    if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if; -- parameter is byte or word&#13;
					 reg1_t	:= iAx;  -- dest reg is AL or AX (depend w_reg)&#13;
					 d_reg := '1';&#13;
					 sub_state := ander;&#13;
					 rtnstate := set_reg_h;&#13;
					 &#13;
				 when "001000--" =&gt;	--0x20 0x23   -- And BCD L/H/X &lt;- BCD L/H/X		 &#13;
					 W_reg	:= byte0 (0); &#13;
					 D_reg	:= byte0 (1); &#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 rtnstate := detect_addr; &#13;
					 exstate    := set_reg_h;&#13;
					 sub_state := ander;&#13;
					 &#13;
			-----------------&lt;Test&gt;---------------------&#13;
				when "1010100-" =&gt;	--0xA8 0xA9   -- TEST Al,AX &lt;- num&#13;
					 w_reg 	 := byte0 (0);&#13;
				    if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if; -- parameter is byte or word&#13;
					 reg1_t	:= iAx;  -- dest reg is AL or AX (depend w_reg)&#13;
					 d_reg := '1';&#13;
					 sub_state := ander;&#13;
					 rtnstate := set_reg_h;&#13;
					 compare  := '1';&#13;
					 &#13;
				 when "1000010-" =&gt;	--0x84 0x85   -- Test BCD L/H/X &lt;- BCD L/H/X		 &#13;
					 W_reg	:= byte0 (0); &#13;
					 D_reg	:= byte0 (1); &#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 rtnstate := detect_addr; &#13;
					 exstate    := set_reg_h;&#13;
					 sub_state := ander;			&#13;
					 compare  := '1';&#13;
					 &#13;
			-----------------&lt;XOR&gt;---------------------&#13;
				when "0011010-" =&gt;	--0x34 0x35   -- And Al,AX &lt;- num&#13;
					 w_reg 	 := byte0 (0);&#13;
				    if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if; -- parameter is byte or word&#13;
					 reg1_t	:= iAx;  -- dest reg is AL or AX (depend w_reg)&#13;
					 d_reg := '1';&#13;
					 sub_state := xorer;&#13;
					 rtnstate := set_reg_h;&#13;
					 &#13;
				 when "001100--" =&gt;	--0x30 0x33   -- And BCD L/H/X &lt;- BCD L/H/X		 &#13;
					 W_reg	:= byte0 (0); &#13;
					 D_reg	:= byte0 (1); &#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 rtnstate := detect_addr; &#13;
					 exstate    := set_reg_h;&#13;
					 sub_state := xorer;&#13;
					 &#13;
			-----------------&lt;CALL&gt;---------------------&#13;
				when x"E8" =&gt;	 -- CALL (2byte parameter - show offset of routin from current IP) - should push next IP	 &#13;
					 num_byte := 2;	-- read Argument Addressing&#13;
					 w_reg := '1';&#13;
					 state 	:= READ_BYTE;&#13;
					 rtnstate := CALL;&#13;
					 &#13;
		 -----------------&lt;INC&gt;---------------------&#13;
				when "01000---" =&gt;	--0x40 0x47   -- inc AX,BX,CX,DX,SP,BP,SI,DI&#13;
					 w_reg 	 := '1'; -- it is for ax,bx,cx,dx,sp,bp,si,di&#13;
					 reg1_t	:= byte0(2 downto 0);  -- dest reg is AL or AX (depend w_reg)&#13;
					 sub_state := incer;&#13;
					 state 	  := set_reg_h;&#13;
					 &#13;
			-----------------&lt;DEC&gt;---------------------&#13;
				when "01001---" =&gt;	--0x48 0x4f   -- dec AX,BX,CX,DX,SP,BP,SI,DI&#13;
					 w_reg 	 := '1'; -- it is for ax,bx,cx,dx,sp,bp,si,di&#13;
					 reg1_t	:= byte0(2 downto 0);  -- dest reg is AL or AX (depend w_reg)&#13;
					 sub_state := decer;&#13;
					 state 	  := set_reg_h;				 &#13;
					 &#13;
		 -----------------&lt;PUSH&gt;---------------------&#13;
				when "01010---" =&gt;	--0x50 0x57   -- PUSH AX,BX,CX,DX,SP,BP,SI,DI&#13;
					 w_reg 	  := '1'; -- it is for ax,bx,cx,dx,sp,bp,si,di&#13;
					 d_reg     := '0';&#13;
					 reg1_t	  := byte0(2 downto 0);  -- dest reg&#13;
					 sub_state := pusher;&#13;
					 state 	  := set_reg_h;&#13;
					 				&#13;
		-----------------&lt;POP&gt;---------------------&#13;
				when "01011---" =&gt;	--058 0x5f   -- POP AX,BX,CX,DX,SP,BP,SI,DI&#13;
					 w_reg 	   := '1'; -- it is for ax,bx,cx,dx,sp,bp,si,di&#13;
					 d_reg      := '1';&#13;
					 num_byte   := 2;&#13;
					 reg1_t	   := byte0(2 downto 0);  -- dest reg&#13;
 					 sub_state  := poper;&#13;
					 ram_rw_en	:= '1';&#13;
					 state	   := read_byte;&#13;
					 addr_mem_rw:= SP;&#13;
					 rtnstate	:= detect_operate;&#13;
					 &#13;
				when x"8F" =&gt; -- POP Ev &#13;
				  d_reg 		:= '0'; &#13;
				  w_reg 		:= '1';&#13;
				  num_byte  := 1;&#13;
				  ram_rw_en	:= '1';&#13;
				  addr_mem_rw:= SP;&#13;
				  state	   := read_byte;&#13;
				  rtnstate 	:= POP; &#13;
				  &#13;
	----------------------&lt;CONDITIONAL JUMP&gt;------------------------&#13;
				when "0111----" =&gt;	-- x70 x7f&#13;
					w_reg := '0';&#13;
					state := cond_jump;&#13;
&#13;
					 &#13;
			---------------&lt;GRP1&gt;---------------------&#13;
				when "100000--" =&gt;		  -- 0x80 to 0x83 -- ADD,OR,ADC,SBB,AND,SUB,XOR,CMP * BL,CL,DL &lt;- 1B&#13;
					 W_reg	:= byte0 (0); &#13;
					 s_reg	:= byte0 (1);&#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 rtnstate := detect_gpr1;	&#13;
					 &#13;
			---------------&lt;NOP&gt;---------------------	&#13;
				when x"90" =&gt; -- NOP&#13;
					state := next_byte;&#13;
					&#13;
			---------------&lt;CBW&gt;---------------------	&#13;
				when x"98" =&gt; -- CBW&#13;
					if (AL(7) = '1') then&#13;
						AH := x"ff";&#13;
					else&#13;
					   AH := x"00";&#13;
					end if;&#13;
					&#13;
			---------------&lt;CWD&gt;---------------------	&#13;
				when x"99" =&gt; -- CWD&#13;
					if (AH(7) = '1') then&#13;
						DX := x"ffff";&#13;
					else&#13;
					   DX := x"0000";&#13;
					end if;	&#13;
					&#13;
					&#13;
			---------------&lt;PUSHF&gt;---------------------	&#13;
				when x"9C" =&gt; -- PUSH Flag reg&#13;
					 w_reg 	  := '1'; -- because only word can push&#13;
					 d_reg     := '0';&#13;
					 byte1	  := x"00";	-- void and no work&#13;
					 byte0	  := flag;&#13;
					 sub_state := pusher;&#13;
					 state 	  := detect_operate;&#13;
					 &#13;
			---------------&lt;POPF&gt;---------------------	&#13;
				when x"9D" =&gt; -- POP Flag reg&#13;
					 num_byte   := 2;&#13;
					 ram_rw_en	:= '1';&#13;
					 state	   := read_byte;&#13;
					 addr_mem_rw:= SP;&#13;
					 rtnstate	:= POPF;&#13;
					 &#13;
			----------------------&lt;MOV AX&gt;----------------------&#13;
				when "1010000-" =&gt; -- 0xA0 0xA1 (e.g. MOV al,[41h])&#13;
					 w_reg := byte0(0); -- word or byte&#13;
					 d_reg := '1'; -- mem to reg&#13;
					 num_byte:= 2; -- the paramete is address memory (2byte)&#13;
					 state := read_byte;&#13;
					 rm_t := "110"; -- immediate (const) address memory --use in read_addr_mem block&#13;
					 m_reg := "00";&#13;
					 rtnstate := read_addr_mem;&#13;
					 sub_state := mover;&#13;
					 exstate := detect_operate;&#13;
					 &#13;
				when "1010001-" =&gt; -- 0xA2 0xA3 (e.g. mov [43h],ax)&#13;
					 w_reg := byte0(0); -- word or byte&#13;
					 d_reg := '0'; -- reg to mem&#13;
					 num_byte:= 2; -- the paramete is address memory (2byte)&#13;
					 state := read_byte;&#13;
					 rm_t := "110"; -- immediate (const) address memory --use in read_addr_mem block&#13;
					 m_reg := "00";&#13;
					 rtnstate := read_addr_mem;&#13;
					 sub_state := mover;&#13;
					 reg1_t := iAX;&#13;
					 exstate := set_reg_h;&#13;
			-----------------------&lt;MOVS&gt;-----------------------&#13;
				when "1010010-" =&gt;	--0xA4 0xA5 -- MOVS BW&#13;
					if (repz_en = '1') then&#13;
						if (cx /= zeros_16) then IP:=std_logic_vector(unsigned(IP) - 2); cx:=std_logic_vector (unsigned (cx) - 1); bool:='1'; else bool:='0'; end if;&#13;
						repz_en := '0';&#13;
					else bool := '1'; end if;&#13;
					if (bool = '1') then&#13;
						w_reg := byte0(0);&#13;
						if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if;&#13;
						ram_rw_en	:= '1';&#13;
						addr_mem_rw := std_logic_vector (resize (unsigned (DS&amp;SI),16)); -- source&#13;
						if (flag(7) = '0')then SI := std_logic_vector (unsigned (SI) + num_byte); else SI:= std_logic_vector (unsigned (SI) - num_byte);end if;&#13;
						state	      := read_byte;&#13;
						rtnstate    := MOVS;&#13;
					else state:=next_byte;&#13;
					end if;&#13;
&#13;
			-----------------------&lt;CMPS&gt;-----------------------&#13;
				when "1010011-" =&gt;	--0xA6 0xA7 -- CMPS BW&#13;
					if (repz_en = '1') then&#13;
						if (cx /= zeros_16) then cx:=std_logic_vector (unsigned (cx) - 1); bool:='1'; else bool:='0'; end if;&#13;
					else bool := '1'; end if;&#13;
					if (bool = '1') then&#13;
						w_reg := byte0(0);&#13;
						if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if;&#13;
						ram_rw_en	:= '1';&#13;
						addr_mem_rw := std_logic_vector (resize (unsigned (DS&amp;SI),16)); -- source&#13;
						if (flag(7) = '0')then SI := std_logic_vector (unsigned (SI) + num_byte); else SI:= std_logic_vector (unsigned (SI) - num_byte);end if;&#13;
						state	      := read_byte;&#13;
						rtnstate    := CMPS;&#13;
						exstate		:= REP;&#13;
					else state:=next_byte;&#13;
					end if;&#13;
			-----------------------&lt;STOS&gt;-----------------------&#13;
				when "1010101-" =&gt;	--0xAA 0xAB -- STOSB&#13;
					if (repz_en = '1') then&#13;
						if (cx /= zeros_16) then IP:=std_logic_vector(unsigned(IP) - 2); cx:=std_logic_vector (unsigned (cx) - 1); bool:='1'; else bool:='0'; end if;&#13;
						repz_en := '0';&#13;
					else bool := '1'; end if;&#13;
					if (bool = '1') then&#13;
						w_reg := byte0(0);&#13;
						byte0 := AL;&#13;
						byte1 := AH;&#13;
						if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if;&#13;
						ram_rw_en	:= '1';&#13;
						addr_mem_rw := std_logic_vector (resize (unsigned (ES&amp;DI),16));&#13;
						addr_mem_rw	:= std_logic_vector (unsigned (addr_mem_rw) - 1); -- default to Write&#13;
						if (flag(7) = '0')then DI := std_logic_vector (unsigned (DI) + num_byte); else DI:= std_logic_vector (unsigned (DI) - num_byte);end if;&#13;
						state	      := Write_byte; &#13;
						rtnstate    := next_byte;&#13;
					else state:=next_byte;&#13;
					end if;&#13;
			-----------------------&lt;LODS&gt;-----------------------&#13;
				when "1010110-" =&gt;	--0xAC 0xAD-- LODS BW&#13;
					if (repz_en = '1') then&#13;
						if (cx /= zeros_16) then IP:=std_logic_vector(unsigned(IP) - 2); cx:=std_logic_vector (unsigned (cx) - 1); bool:='1'; else bool:='0'; end if;&#13;
						repz_en := '0';&#13;
					else bool := '1'; end if;&#13;
					if (bool = '1') then&#13;
						w_reg 	   := byte0(0); -- byte&#13;
						d_reg      := '1'; &#13;
						if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if;&#13;
						reg1_t	   := iAL;  -- dest reg AX = AL (depend w_reg)&#13;
						sub_state  := mover;&#13;
						ram_rw_en	:= '1';&#13;
						state	   := read_byte;&#13;
						addr_mem_rw:= std_logic_vector (resize (unsigned (DS&amp;SI),16));&#13;
						if (flag(7) = '0')then SI := std_logic_vector (unsigned (SI) + num_byte); else SI:= std_logic_vector (unsigned (SI) - num_byte);end if;&#13;
						rtnstate	:= detect_operate;&#13;
					else state:=next_byte;&#13;
					end if;&#13;
			-----------------------&lt;SCAN&gt;-----------------------&#13;
				when "1010111-" =&gt;	--0xAE 0xAF-- SCAS BW&#13;
					if (repz_en = '1') then&#13;
						if (cx /= zeros_16) then cx:=std_logic_vector (unsigned (cx) - 1); bool:='1'; else bool:='0'; end if;&#13;
					else bool := '1'; end if;&#13;
					if (bool = '1') then&#13;
						w_reg	:= byte0 (0); &#13;
						if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if;&#13;
						reg_h (15 downto 0) := AX;&#13;
						ram_rw_en	:= '1';&#13;
						 addr_mem_rw := std_logic_vector (resize (unsigned (ES&amp;DI),16));&#13;
						if (flag(7) = '0')then DI := std_logic_vector (unsigned (DI) + num_byte); else DI:= std_logic_vector (unsigned (DI) - num_byte);end if;&#13;
						state 	:= READ_BYTE;&#13;
						rtnstate := COMP;&#13;
					else state:=next_byte;&#13;
					end if;&#13;
			---------------&lt;GRP4  - DEC INC&gt;---------------------&#13;
				when x"FE" =&gt;		  -- 0xFE  DEC.INC al,bl,cl,dl&#13;
					 W_reg	:= '0'; -- only byte&#13;
					 d_reg := '1';&#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 rtnstate := detect_gpr4;&#13;
					 &#13;
			-----------------&lt;GRP5 &gt;---------------------&#13;
				when x"FF" =&gt;		  -- 0xFF  INC - DEC - CALL -CALL -JMP -JMP(Mp) -PUSH&#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 rtnstate := detect_gpr5;		&#13;
			-------------------&lt;MOV reg to reg&gt;----------------------&#13;
				when "100010--" =&gt;		  -- 0x88 to 0x8B  -- MOV reg to reg (e.g. mov bl,cl)&#13;
					 W_reg	:= byte0 (0); &#13;
					 D_reg	:= byte0 (1); &#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 state 	:= READ_BYTE;&#13;
					 sub_state := mover;&#13;
					 rtnstate  := detect_addr;&#13;
					 exstate    := set_reg_h;&#13;
					 &#13;
			---------------------&lt;RET&gt;----------------------&#13;
				when x"C3" =&gt;		 -- RET&#13;
					 num_byte 	   := 2;&#13;
					 addr_mem_rw:= SP;&#13;
					 ram_rw_en	:= '1';&#13;
					 state	   := read_byte;&#13;
					 rtnstate	:= RET;					 &#13;
&#13;
			-------------------&lt;MOV const to const&gt;----------------------&#13;
				when "1100011-" =&gt;		  -- 0xC6 to 0xC7  -- MOV const to const (e.g. mov [21h],67h)&#13;
					 W_reg	:= byte0 (0); &#13;
				    num_byte := 1;  -- parameter is byte&#13;
					 d_reg := '0';&#13;
					 state 	:= READ_BYTE;&#13;
					 rtnstate := const_to_mem;	&#13;
--					 exstate	 := Assign;&#13;
&#13;
		 -----------------&lt;JMP&gt;---------------------&#13;
				when x"EB" =&gt;	 -- jmp	 &#13;
					 num_byte := 1;	-- read Argument Addressing&#13;
					 w_reg := '0';&#13;
					 state 	:= READ_BYTE;&#13;
					 rtnstate := jump; &#13;
					 &#13;
		 -----------------&lt;LOOP&gt;---------------------&#13;
			 when "111000--" =&gt;	 -- E0 E3 -- LOOPNZ - LOOPZ - LOOP&#13;
					 cx := std_logic_vector (unsigned (cx)-1);&#13;
					 case byte0(1 downto 0) is&#13;
						when "00" =&gt; if (cx /= zeros_16 and flag(1) = '0') then bool := '1'; else bool := '0'; end if; -- LOOPNZ&#13;
						when "01" =&gt; if (cx /= zeros_16 and flag(1) = '1') then bool := '1'; else bool := '0'; end if; -- LOOPZ&#13;
						when "10" =&gt; if (cx /= zeros_16)						   then bool := '1'; else bool := '0'; end if; -- LOOP&#13;
						when "11" =&gt; if (cx  = zeros_16)					      then bool := '1'; else bool := '0'; end if; -- JCXZ&#13;
						when others =&gt; null;&#13;
					 end case;&#13;
					 if (bool = '1') then&#13;
						 num_byte := 1;	&#13;
						 w_reg := '0';&#13;
						 state 	:= READ_BYTE;&#13;
						 rtnstate := jump; &#13;
					 else&#13;
						 IP	:= std_logic_vector (unsigned (IP)+1); &#13;
						 state:= next_byte;&#13;
					 end if;	&#13;
					 &#13;
				&#13;
			-------------------&lt;REP&gt;----------------------&#13;
				when x"F2" =&gt;	 -- REP (REPNZ - REPNE)&#13;
					 repnz_en := '1';&#13;
					 state := next_byte;&#13;
				when x"F3" =&gt;	 -- REP (REPZ - REPE)&#13;
					 repz_en := '1';&#13;
					 state := next_byte;&#13;
&#13;
					 &#13;
			-------------------&lt;MOV reg to reg&gt;----------------------&#13;
				when x"F4" =&gt;	 -- halted (stop cpu)&#13;
					 state := halt;&#13;
					 &#13;
			-------------------&lt;CLC - Clear Carry&gt;----------------------&#13;
				when x"F5" =&gt;	 -- CMC - Clear Carry&#13;
					 flag(0) := not flag(0);&#13;
					 state := next_byte;&#13;
				when x"F8" =&gt;	 -- CLC - Clear Carry&#13;
					 flag(0) := '0';&#13;
					 state := next_byte;&#13;
				when x"F9" =&gt;	-- STC - Set Carry&#13;
					 flag(0) := '1';&#13;
					 state := next_byte;&#13;
				when x"FA" =&gt;	-- CLI - Clear Interrupt&#13;
					 flag(6) := '0';&#13;
					 state := next_byte;&#13;
				when x"FB" =&gt;	-- STI - Set Interrupt&#13;
					 flag(6) := '1';&#13;
					 state := next_byte;&#13;
				when x"FC" =&gt;	-- CLD - Clear Direction&#13;
					 flag(7) := '0';&#13;
					 state := next_byte;&#13;
				when x"FD" =&gt;	-- STD - Set Direction&#13;
					 flag(7) := '1';&#13;
					 state := next_byte;&#13;
					 &#13;
				when others =&gt;&#13;
					num_byte := 1;&#13;
				   state 	:= READ_BYTE;&#13;
				   rtnstate := detect_inst;&#13;
				end case;&#13;
				val_const_bit := '0';&#13;
&#13;
			when INTRRUPT =&gt;     ----------------------------------------&lt;INTRRUPT&gt;-------------------------------&#13;
				case byte0 is&#13;
					 when x"63" =&gt;		-- int LED&#13;
							LED_v := AL(3 downto 0);&#13;
							state 	:= Next_Byte;&#13;
					  when x"21" =&gt; -- int 21h&#13;
							case AX(15 downto 8) is&#13;
								when x"02" =&gt; -- show char&#13;
									char &lt;= DX(6 downto 0);&#13;
--									LED_v := DX(3 downto 0);&#13;
									state := show_char;&#13;
									rtnstate:= next_byte;&#13;
								when others =&gt; state 	:= Next_Byte;&#13;
							end case;&#13;
							&#13;
							&#13;
					  when others =&gt; state 	:= Next_Byte;&#13;
			   end case;&#13;
				 				 &#13;
			when const_to_mem =&gt;	 ----------------------------------------&lt;const_to_mem&gt;-------------------------------&#13;
				m_reg    := m_reg_0;&#13;
				rm_t     := byte0 (2 downto 0); &#13;
				reg_t    := byte0 (5 downto 3); &#13;
				reg1_t   := reg_t;&#13;
				&#13;
			  if (m_reg = "00" and rm_t = "110") then  num_byte := 2; else num_byte := to_integer (unsigned (m_reg));end if; -- direct address memory	&#13;
			  if (w_reg = '1') then num_byte := num_byte +2; else num_byte := num_byte +1; end if;&#13;
			  state 			 := read_byte;&#13;
			  rtnstate 		 := read_addr_mem;  -- calculate new address (adress with offset) and read value&#13;
			  exstate 		 := detect_operate;   -- it go to write_byte block finaly &#13;
			  val_const_bit := '1';&#13;
				 &#13;
			when detect_addr =&gt;	----------------------------------------&lt;detect_addr&gt;-------------------------------&#13;
				m_reg := m_reg_0;&#13;
				if (m_reg = "11" ) then &#13;
					reg_t := byte0 (2 downto 0); -- in this case reg_t and rm_t is Displaced (in 8086 instruction) = source&#13;
					rm_t := byte0 (5 downto 3); -- = destination&#13;
					reg1_t := rm_t;				  -- (2 downto 0)  (e.g.: 11 000 001 CL -&gt; AL)&#13;
					state    := set_val_reg;	-- read reg_t val &#13;
					rtnstate := set_reg_h;		-- read reg1_t val&#13;
				else	&#13;
				&#13;
				 rm_t     := byte0 (2 downto 0); &#13;
				 reg_t    := byte0 (5 downto 3); &#13;
				 reg1_t   := reg_t;&#13;
			    if (m_reg = "00" and rm_t = "110") then  num_byte := 2; else num_byte := to_integer (unsigned (m_reg));end if; -- direct address memory	or no&#13;
				 state := read_byte;&#13;
				 rtnstate   := read_addr_mem; -- read frome diffrent address (not IP)&#13;
--				 exstate    := set_reg_h; -- read frome diffrent address (not IP)&#13;
				end if;&#13;
				val_const_bit := '0';&#13;
				&#13;
				&#13;
			when read_addr_mem =&gt;	-- read byte from a diffrent address (memory)&#13;
				   if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if; -- parameter is byte or word&#13;
					case rm_t is	-- (2 downto 0)  (e.g.: 11 000 001 CL -&gt; AL)&#13;
						when "000" =&gt; addr_mem_rw	 := std_logic_vector (unsigned(BX(8 downto 0))+unsigned(SI(8 downto 0)));&#13;
						when "001" =&gt; addr_mem_rw	 := std_logic_vector (unsigned(BX(8 downto 0))+unsigned(DI(8 downto 0)));&#13;
						when "010" =&gt; addr_mem_rw   := std_logic_vector (unsigned(BP(8 downto 0))+unsigned(SI(8 downto 0)));&#13;
						when "011" =&gt; addr_mem_rw	 := std_logic_vector (unsigned(BP(8 downto 0))+unsigned(DI(8 downto 0)));&#13;
						when "100" =&gt; addr_mem_rw	 := SI;&#13;
						when "101" =&gt; addr_mem_rw	 := DI; &#13;
						when "110" =&gt; 					if (m_reg = "00") then addr_mem_rw:=(byte1&amp;byte0); else addr_mem_rw := BP;  end if;&#13;
						when "111" =&gt; addr_mem_rw	 := BX; &#13;
						when others =&gt; null;&#13;
					end case;&#13;
				&#13;
					 if (m_reg = "01") then addr_mem_rw := std_logic_vector (unsigned(addr_mem_rw(8 downto 0))+unsigned(byte0));&#13;
					 elsif (m_reg = "10") then addr_mem_rw := std_logic_vector (unsigned(addr_mem_rw(8 downto 0))+unsigned(byte1&amp;byte0));&#13;
					 end if;&#13;
					 &#13;
					 ram_rw_en	:= '1';&#13;
					 state	:= read_byte;&#13;
					 rtnstate:= exstate; 			 &#13;
&#13;
			when set_reg_h =&gt;&#13;
				case w_reg&amp;reg1_t (2 downto 0) is	-- (2 downto 0)  (e.g.: 11 000 001 CL -&gt; AL)&#13;
					when '1'&amp;iAX =&gt; reg_h (7 downto 0)  := AL; reg_h (15 downto 8) := AH;&#13;
					when '1'&amp;iBX =&gt; reg_h (7 downto 0)  := BL; reg_h (15 downto 8) := BH;&#13;
					when '1'&amp;iCX =&gt; reg_h (7 downto 0)  := CL; reg_h (15 downto 8) := CH;&#13;
					when '1'&amp;iDX =&gt; reg_h (7 downto 0)  := DL; reg_h (15 downto 8) := DH;&#13;
					when '0'&amp;iAL =&gt; reg_h (7 downto 0)  := AL;&#13;
					when '0'&amp;iBL =&gt; reg_h (7 downto 0)  := BL;&#13;
					when '0'&amp;iCL =&gt; reg_h (7 downto 0)  := CL;&#13;
					when '0'&amp;iDL =&gt; reg_h (7 downto 0)  := DL;&#13;
					when '0'&amp;iAH =&gt; reg_h (7 downto 0)  := AH;&#13;
					when '0'&amp;iBH =&gt; reg_h (7 downto 0)  := BH;&#13;
					when '0'&amp;iCH =&gt; reg_h (7 downto 0)  := CH;&#13;
					when '0'&amp;iDH =&gt; reg_h (7 downto 0)  := DH;&#13;
					when others =&gt; null;&#13;
				end case;	&#13;
				   state := detect_operate;&#13;
					&#13;
					 &#13;
			when set_val_reg =&gt;&#13;
				case w_reg&amp;reg_t (2 downto 0) is	-- (2 downto 0)  (e.g.: 11 000 001 CL -&gt; AL)&#13;
					when '1'&amp;iAX =&gt; byte0 := AL; byte1 := AH;&#13;
					when '1'&amp;iBX =&gt; byte0 := BL; byte1 := BH;&#13;
					when '1'&amp;iCX =&gt; byte0 := CL; byte1 := CH;&#13;
					when '1'&amp;iDX =&gt; byte0 := DL; byte1 := DH;&#13;
					when '0'&amp;iAL =&gt; byte0 := AL;&#13;
					when '0'&amp;iBL =&gt; byte0 := BL;&#13;
					when '0'&amp;iCL =&gt; byte0 := CL;&#13;
					when '0'&amp;iDL =&gt; byte0 := DL;&#13;
					when '0'&amp;iAH =&gt; byte0 := AH;&#13;
					when '0'&amp;iBH =&gt; byte0 := BH;&#13;
					when '0'&amp;iCH =&gt; byte0 := CH;&#13;
					when '0'&amp;iDH =&gt; byte0 := DH;&#13;
					when others =&gt; null;&#13;
				end case;&#13;
				if (m_reg = "11" ) then state := set_reg_h;&#13;
				else state := detect_operate;end if;&#13;
				&#13;
			when Cond_Jump =&gt; -- Conditional Jump		&#13;
					case byte0 (3 downto 0) is&#13;
					 when "0000" =&gt; if (flag(3)  = '1') then bool := '1'; else bool := '0'; end if; -- JO  (not appropriate)&#13;
					 when "0001" =&gt; if (flag(3) /= '1') then bool := '1'; else bool := '0'; end if; -- JNO (not appropriate) &#13;
					 when "0010" =&gt; if (flag(0)  = '1' and flag(1) = '0') then bool := '1'; else bool := '0'; end if; -- JB   &lt;  (unsigned)&#13;
					 when "0110" =&gt; if (flag(0) = '1' or flag(1) = '1') then bool := '1'; else bool := '0'; end if; --LED_V := LED_V or "0010"; -- JBE  &lt;= (unsigned)&#13;
					 when "0111" =&gt; if (flag(0) = '0'  and flag(1)  = '0') then bool := '1'; else bool := '0'; end if; -- JA  &gt;  (unsigned)&#13;
					 when "0011" =&gt; if (flag(0)  = '0' or  flag(1) = '1') then bool := '1'; else bool := '0'; end if; -- JAE  &gt;= (unsigned)&#13;
					 when "0100" =&gt; if (flag(1)  = '1') then bool := '1'; else bool := '0'; end if; -- JZ (not appropriate)&#13;
					 when "0101" =&gt; if (flag(1)  = '0') then bool := '1'; else bool := '0'; end if; -- JNZ (not appropriate)&#13;
					 when "1000" =&gt; if (flag(2)  = '1') then bool := '1'; else bool := '0'; end if; -- JS (not appropriate)&#13;
					 when "1001" =&gt; if (flag(2) = '0')  then bool := '1'; else bool := '0'; end if; -- JNS (not appropriate)&#13;
					 when "1010" =&gt; if (flag(4) = '1')then bool := '1'; else bool := '0'; end if; -- JPE (not appropriate)&#13;
					 when "1011" =&gt; if (flag(4) = '0')then bool := '1'; else bool := '0'; end if; -- JPO (JNP) (not appropriate)&#13;
					 when "1100" =&gt; if ((flag(2) /= flag(3)) and (flag(1)  = '1')) then bool := '1'; else bool := '0'; end if; -- JL  (signed)&#13;
					 when "1101" =&gt; if ((flag(2)  = flag(3)) or  (flag(1)  = '1')) then bool := '1'; else bool := '0'; end if; -- JGE (signed)&#13;
					 when "1110" =&gt; if ((flag(2) /= flag(3)) or  (flag(1)  = '1')) then bool := '1'; else bool := '0'; end if; -- JLE (signed)&#13;
					 when "1111" =&gt; if ((flag(2)  = flag(3)) and (flag(1)  = '0')) then bool := '1'; else bool := '0'; end if; -- JG  (signed)&#13;
					 when others =&gt; null;&#13;
					end case;&#13;
				if (bool = '1') then &#13;
				  num_byte := 1;&#13;
				  state := read_byte;&#13;
				  rtnstate := jump;&#13;
				else&#13;
					IP	  := std_logic_vector (unsigned (IP)+1);&#13;
					state := next_byte;&#13;
				end if;		&#13;
&#13;
			&#13;
			when Jump =&gt; 	-----------------------------------------&lt;Jump&gt;-----------------------------&#13;
				if (w_reg = '0') then -- sign&#13;
					if (byte0 (7) = '1' ) then byte1 := x"ff"; else byte1 := x"00"; end if;&#13;
				end if;&#13;
				IP	:= std_logic_vector (unsigned (IP) + unsigned(byte1&amp;byte0));&#13;
				state := next_byte;&#13;
				&#13;
			when Call =&gt; 	-------------------------------------&lt;Call&gt;-------------------------------------&#13;
				d_reg := '0'; -- write to mem&#13;
				addr_mem_rw := IP;&#13;
				IP	:= std_logic_vector (unsigned (IP) + unsigned (byte1&amp;byte0));&#13;
				byte1 := (others =&gt; '0');&#13;
				byte0	:= addr_mem_rw(7 downto 0);&#13;
				byte1 := std_logic_vector (resize (unsigned (addr_mem_rw(NUMBER_MEMORY_BIT'length-1 downto 8)),8)); -- NOW it is 1 bit because Memory address is 9 bit&#13;
				state := detect_operate;&#13;
				sub_state := pusher;		&#13;
				cheng_reg_h_byte := '1'; -- to write in mem (detect_operare Block)&#13;
			&#13;
				&#13;
			when RET =&gt; ----------------------------&lt;RET&gt;--------------------------------&#13;
				SP := std_logic_vector (unsigned (SP)+2);&#13;
				IP := (byte1&amp;byte0);&#13;
				state := next_byte;&#13;
				&#13;
			when POP  =&gt; --------------------&lt;POP Ev&gt;--------------------------&#13;
				reg_h (15 downto 0) := byte1&amp;byte0;&#13;
				SP := std_logic_vector (unsigned (SP)+2);&#13;
				num_byte := 1;&#13;
				state 	:= read_byte;&#13;
				sub_state:= mover; -- void and it dont work (because d_reg=0)&#13;
				rtnstate := detect_addr;&#13;
				exstate  := detect_operate;&#13;
				&#13;
			when POPF =&gt; -------------------------&lt;POP Flag&gt;----------------------&#13;
				flag := byte0;&#13;
				SP := std_logic_vector (unsigned (SP)+2);&#13;
				state := next_byte;&#13;
				&#13;
			when MOVS =&gt; ----------------------------------&lt;Mov String&gt;----------------&#13;
				   if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if;&#13;
					ram_rw_en	:= '1';&#13;
					addr_mem_rw := std_logic_vector (resize (unsigned (ES&amp;DI),16)); -- dest&#13;
					addr_mem_rw	:= std_logic_vector (unsigned (addr_mem_rw) - 1); -- default to Write&#13;
					if (flag(7) = '0')then DI := std_logic_vector (unsigned (DI) + num_byte); else DI:= std_logic_vector (unsigned (DI) - num_byte);end if;&#13;
					state	      := Write_byte;&#13;
					rtnstate    := next_byte;&#13;
					&#13;
			when CMPS =&gt; ----------------------------------&lt;CMP String&gt;----------------&#13;
					reg_h(15 downto 0) := byte1&amp;byte0;&#13;
				   if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if;&#13;
					ram_rw_en	:= '1';&#13;
					addr_mem_rw := std_logic_vector (resize (unsigned (ES&amp;DI),16)); -- dest&#13;
					if (flag(7) = '0')then DI := std_logic_vector (unsigned (DI) + num_byte); else DI:= std_logic_vector (unsigned (DI) - num_byte);end if;&#13;
					state	      := read_byte;					&#13;
					rtnstate 	:= COMP; &#13;
					&#13;
			when COMP =&gt;	--------------------------&lt;Compare&gt;------------------&#13;
					if (w_reg = '0') then&#13;
						flag(0) := reg_h (7) xor byte0 (7);	&#13;
						reg_h (8 downto 0) := std_logic_vector (unsigned(reg_h(7 downto 0))-unsigned(byte0));&#13;
						flag(0) :=  flag(0) xor reg_h (8);	&#13;
						flag(3) := reg_h (8) xor reg_h (7);&#13;
						if (reg_h (7) = '1') then flag(2) := '1'; else flag(2) := '0'; end if;&#13;
						if (reg_h (7 downto 0) = "00000000") then flag(1) := '1'; else flag(1) := '0'; end if; &#13;
				  else&#13;
						flag(0) := reg_h (15) xor byte1 (7);	&#13;
						reg_h (16 downto 0) := std_logic_vector (unsigned(reg_h (15 downto 0))-unsigned(byte1&amp;byte0));&#13;
						flag(0) := flag(0) xor reg_h (16);	&#13;
						flag(3) := reg_h (16) xor reg_h (15);&#13;
						if (reg_h (15) = '1') then flag(2) := '1'; else flag(2) := '0'; end if;&#13;
						if (reg_h (15 downto 0) = zeros_16) then flag(1) := '1'; else flag(1) := '0'; end if; &#13;
					end if;					&#13;
				   state := exstate;&#13;
			 		&#13;
			when REP =&gt;&#13;
				if (repz_en = '1') then&#13;
					if (flag(1) = '1') then&#13;
					   repz_en := '0';&#13;
						IP	:= std_logic_vector (unsigned (IP) -2);&#13;
					end if;&#13;
				elsif (repnz_en = '1') then&#13;
					if (flag(1) = '0') then&#13;
						repnz_en:= '0';&#13;
						IP	:= std_logic_vector (unsigned (IP) -2);&#13;
					end if;&#13;
				end if;&#13;
				state := next_byte;&#13;
				&#13;
			when show_char =&gt; -------------------&lt;Show char&gt;----------------------&#13;
					Xchar	&lt;= std_logic_vector (unsigned(Xchar)+1);&#13;
					if (Xchar = "1010000") then&#13;
						Xchar	&lt;= (others =&gt; '0');&#13;
						Ychar	&lt;= std_logic_vector (unsigned(Ychar)+1);&#13;
					end if;&#13;
					state := rtnstate;&#13;
					&#13;
		   when detect_gpr1 =&gt;    -----------------------------------&lt;detect_gpr1&gt;-------------------------------&#13;
			 byte1 := x"00";&#13;
				case byte0 (5 downto 3) is -- show operate&#13;
				  when "000" =&gt; -- ADD&#13;
						sub_state := adder;&#13;
				  when "001" =&gt; -- OR&#13;
						sub_state := orer;&#13;
					when "100" =&gt; -- AND&#13;
						sub_state := ander;&#13;
					when "101" =&gt; -- SUB&#13;
						sub_state := suber;&#13;
					when "111" =&gt; -- CMP&#13;
						sub_state := suber;&#13;
						compare := '1';&#13;
				  when others =&gt; null;&#13;
				end case;&#13;
					&#13;
			  if (m_reg_0 = "00") then -- const to const (e.g. add [60h],2)&#13;
				  d_reg := '0';&#13;
				  state := const_to_mem;&#13;
--				  sub_state:= adder;&#13;
			  else -- Certainly it is num to reg (e.g. add bl,2)&#13;
			   if ((NOT s_reg and w_reg) = '1') then num_byte := 2; else num_byte := 1; end if;&#13;
				d_reg := '1';&#13;
				state := Read_Byte;&#13;
				rtnstate := set_reg_h;&#13;
			  end if;&#13;
&#13;
		   when detect_gpr4 =&gt;    -----------------------------------&lt;detect_gpr4&gt;-------------------------------&#13;
				case byte0 (5 downto 3) is -- show operate&#13;
				  when "000" =&gt; -- INC&#13;
						sub_state := incer;&#13;
				  when "001" =&gt; -- DEC&#13;
						sub_state := decer;&#13;
				  when others =&gt; null;&#13;
				end case;&#13;
				&#13;
				if (m_reg_0 = "11" )then d_reg := '1'; else d_reg := '0'; end if; &#13;
				  w_reg := '0';&#13;
				  state 	   := detect_addr; &#13;
				  cheng_reg_h_byte	:= '1';&#13;
&#13;
				  when detect_gpr5 =&gt;    -----------------------------------&lt;detect_gpr5&gt;-------------------------------&#13;
				case byte0 (5 downto 3) is -- show operate&#13;
				  when "110" =&gt; -- PUSH&#13;
						sub_state := pusher;&#13;
				  when others =&gt; null;&#13;
				end case;&#13;
				&#13;
				if (m_reg_0 = "11" )then d_reg := '1'; else d_reg := '0'; end if;&#13;
				  w_reg := '1';&#13;
				  state 	   := detect_addr; &#13;
				  exstate := detect_operate;&#13;
				  cheng_reg_h_byte	:= '1';&#13;
			  &#13;
			when Next_Byte =&gt;		---------------------------&lt;init read Next Byte&gt;------------------------------&#13;
				num_byte := 1;	-- it has 1 parameter so read one byte&#13;
				byte0 := x"00"; byte1 := x"00"; byte2 := x"00";byte3 := x"00";&#13;
				state 	:= READ_BYTE;&#13;
				rtnstate := Detect_Inst;&#13;
				&#13;
			 when detect_operate =&gt;	-------------------------------&lt;detect_operate&gt;--------------------&#13;
			 	if (val_const_bit = '1') then &#13;
					reg_h (15 downto 0) := byte1&amp;byte0; &#13;
				  if (m_reg = "10") then  byte0 := byte2; byte1 := byte3;	elsif (m_reg = "01") then byte0 := byte1; byte1 := byte2; elsif (rm_t = "110")then byte0 := byte2; byte1 := byte3; end if; -- m_reg = "00" -&gt; haven't any offset then byte0 and byte1 are ready now&#13;
				end if;&#13;
				&#13;
				if (cheng_reg_h_byte = '1') then&#13;
					reg_h (15 downto 0) := byte1&amp;byte0; &#13;
					cheng_reg_h_byte := '0';&#13;
				end if;&#13;
				&#13;
			 if (w_reg = '0') then&#13;
			   flag(0) := reg_h (7) xor byte0 (7);	&#13;
			 	case sub_state is&#13;
					when adder =&gt; reg_h (8 downto 0) := std_logic_vector (resize (unsigned(reg_h(7 downto 0)),9)+resize (unsigned(byte0),9)); -- 1 bit carry_flag&#13;
					when incer =&gt; reg_h (8 downto 0) := std_logic_vector (resize (unsigned(reg_h(7 downto 0)),9)+1); -- 1 bit carry_flag&#13;
					when decer =&gt; reg_h (8 downto 0) := std_logic_vector (resize (unsigned(reg_h(7 downto 0)),9)-1); -- 1 bit carry_flag&#13;
					when adcer =&gt; if (flag(0) = '1') then reg_h (8 downto 0) := std_logic_vector (unsigned(reg_h(7 downto 0))+unsigned(byte0)+1); else reg_h (8 downto 0) := std_logic_vector (unsigned(reg_h(7 downto 0))+unsigned(byte0)); end if;-- 1 bit carry_flag&#13;
					when suber =&gt; reg_h (8 downto 0) := std_logic_vector (resize (unsigned(reg_h(7 downto 0)),9)-resize (unsigned(byte0),9));&#13;
					when sbber =&gt; if (flag(0) = '1') then reg_h (8 downto 0) := std_logic_vector (unsigned(reg_h(7 downto 0))-unsigned(byte0)-1); else reg_h (8 downto 0) := std_logic_vector (unsigned(reg_h(7 downto 0))-unsigned(byte0)); end if;-- 1 bit carry_flag&#13;
					when muler =&gt; reg_h (8 downto 0) := std_logic_vector (unsigned(reg_h(7 downto 0))*unsigned(byte0));&#13;
					when ander =&gt; reg_h (8 downto 0) := reg_h (7 downto 0) and byte0;&#13;
					when xorer =&gt; reg_h (8 downto 0) := reg_h (7 downto 0) xor byte0;&#13;
					when orer  =&gt; reg_h (8 downto 0) := reg_h (7 downto 0) or  byte0;&#13;
					when mover =&gt; if (d_reg = '1')then reg_h(7 downto 0) := byte0; end if; null;&#13;
					when others =&gt; null; &#13;
				end case;&#13;
				flag(0) :=  flag(0) xor reg_h (8);	&#13;
				flag(3) := reg_h (8) xor reg_h (7);&#13;
				if (reg_h (7) = '1') then flag(2) := '1'; else flag(2) := '0'; end if;&#13;
				if (reg_h (7 downto 0) = "00000000") then flag(1) := '1'; else flag(1) := '0'; end if; &#13;
			else&#13;
				flag(0) := reg_h (15) xor byte1 (7);	&#13;
			   case sub_state is&#13;
			 		when adder  =&gt; reg_h (16 downto 0) := std_logic_vector (unsigned(reg_h (15 downto 0))+unsigned(byte1&amp;byte0));&#13;
			 		when incer  =&gt; reg_h (16 downto 0) := std_logic_vector (unsigned(reg_h (15 downto 0))+1);&#13;
			 		when decer  =&gt; reg_h (16 downto 0) := std_logic_vector (unsigned(reg_h (15 downto 0))-1);&#13;
			 		when adcer  =&gt; if (flag(0) = '1' )then reg_h (16 downto 0) := std_logic_vector (unsigned(reg_h (15 downto 0))+unsigned(byte1&amp;byte0)+1); else reg_h (16 downto 0) := std_logic_vector (unsigned(reg_h (15 downto 0))+unsigned(byte1&amp;byte0)); end if;&#13;
					when suber  =&gt; reg_h (16 downto 0) := std_logic_vector (unsigned(reg_h (15 downto 0))-unsigned(byte1&amp;byte0));&#13;
			 		when sbber  =&gt; if (flag(0) = '1' )then reg_h (16 downto 0) := std_logic_vector (unsigned(reg_h (15 downto 0))-unsigned(byte1&amp;byte0)-1); else reg_h (16 downto 0) := std_logic_vector (unsigned(reg_h (15 downto 0))-unsigned(byte1&amp;byte0)); end if;&#13;
					when muler  =&gt; reg_h (16 downto 0) := std_logic_vector (unsigned(reg_h (15 downto 0))*unsigned(byte1&amp;byte0));&#13;
					when ander  =&gt; reg_h (16 downto 0) := reg_h (15 downto 0) and (byte1&amp;byte0);&#13;
					when xorer  =&gt; reg_h (16 downto 0) := reg_h (15 downto 0) xor (byte1&amp;byte0);&#13;
					when orer   =&gt; reg_h (16 downto 0) := reg_h (15 downto 0) or  (byte1&amp;byte0);&#13;
					when pusher =&gt;  addr_mem_rw := SP; SP := std_logic_vector (unsigned (SP)-2); -- in belw lines num_byte less addr_mem_rw so 2 less addr_mem_rw so we dont dec 2 from SP  &#13;
					when poper  =&gt;  SP := std_logic_vector (unsigned (SP)+2); reg_h (15 downto 0) := byte1&amp;byte0;&#13;
					when mover =&gt; if (d_reg = '1')then reg_h (15 downto 0) := byte1&amp;byte0; end if; null;&#13;
					when others =&gt; null;&#13;
				end case;	 &#13;
				flag(0) := flag(0) xor reg_h (16);	&#13;
				flag(3) := reg_h (16) xor reg_h (15);&#13;
				if (reg_h (15) = '1') then flag(2) := '1'; else flag(2) := '0'; end if;&#13;
				if (reg_h (15 downto 0) = zeros_16) then flag(1) := '1'; else flag(1) := '0'; end if; &#13;
			 end if;&#13;
			 &#13;
			state 	:= Next_Byte;	&#13;
&#13;
 &#13;
			if (compare = '0') then&#13;
			byte0 := reg_h(7 downto 0); byte1:= reg_h(15 downto 8); &#13;
			if (d_reg = '0') then&#13;
				if (w_reg = '1') then num_byte := 2; else num_byte := 1; end if; -- parameter is byte or word&#13;
				ram_rw_en	:= '1';&#13;
				addr_mem_rw	:= std_logic_vector (unsigned (addr_mem_rw)-num_byte-1);	-- possetive -1 for : default for writting - num_byte : because addr_mem_rw added when reading byte or word in Previously block (read_addr_mem block)&#13;
				state       := write_byte;&#13;
				rtnstate	   := next_byte;&#13;
					&#13;
			 else&#13;
				case w_reg&amp;reg1_t is&#13;
					when '1'&amp;iAX =&gt; AX := reg_h (15 downto 0);&#13;
					when '1'&amp;iBX =&gt; BX := reg_h (15 downto 0);&#13;
					when '1'&amp;iCX =&gt; CX := reg_h (15 downto 0);&#13;
					when '1'&amp;iDX =&gt; DX := reg_h (15 downto 0);&#13;
					when '1'&amp;iSP =&gt; SP := reg_h (15 downto 0);&#13;
					when '1'&amp;iBP =&gt; BP := reg_h (15 downto 0);&#13;
					when '1'&amp;iSI =&gt; SI := reg_h (15 downto 0);&#13;
					when '1'&amp;iDI =&gt; DI := reg_h (15 downto 0);&#13;
					when '0'&amp;iAL =&gt; AL := reg_h (7 downto 0);&#13;
					when '0'&amp;iBL =&gt; BL := reg_h (7 downto 0);&#13;
					when '0'&amp;iCL =&gt; CL := reg_h (7 downto 0);&#13;
					when '0'&amp;iDL =&gt; DL := reg_h (7 downto 0);&#13;
					when '0'&amp;iAH =&gt; AH := reg_h (15 downto 8);&#13;
					when '0'&amp;iBH =&gt; BH := reg_h (15 downto 8);&#13;
					when '0'&amp;iCH =&gt; CH := reg_h (15 downto 8);&#13;
					when '0'&amp;iDH =&gt; DH := reg_h (15 downto 8);&#13;
					when others =&gt; null;&#13;
				end case;	&#13;
			end if;&#13;
			end if;&#13;
		compare := '0';&#13;
			&#13;
			when halt =&gt;&#13;
			  null;&#13;
			  &#13;
			when Init =&gt;	----------------------------------------------&lt;Init&gt;--------------------------------&#13;
			  cnt_bit := 512;	-- Read 512 Byte (1 sector)&#13;
			  main_mem_wr_en (0) &lt;= '1';&#13;
			  num_byte	:= 1;		-- read 1 byte from sd to ram (main memory)&#13;
			  state := Read_Sector;&#13;
			  IP := (others =&gt; '1'); -- because in "Read_Sector" Block it inc 1 and then become 0000 to write first block ram else it write in secound ram's block&#13;
			  num_byte_v	:=0;&#13;
			  ram_rw_en := '0';&#13;
			  d_reg := '1';&#13;
			  flag := "00000000";&#13;
			  SP	:= x"FFFE"; -- (0-2)&#13;
			  &#13;
			when Read_Sector =&gt;	-- read First Sector of SD Card (512 byte)----------------------&lt;Read_Sector&gt;-----------&#13;
			  if (sd_c_hndShk = '1') then&#13;
					if (cnt_bit /= 0) then&#13;
					  main_mem_data_in &lt;= sd_data_out;&#13;
					  sd_h_hndShk &lt;= '1';&#13;
					  cnt_bit	:= cnt_bit - 1;&#13;
				     IP := std_logic_vector (unsigned (IP) + 1);&#13;
					 else&#13;
					  main_mem_wr_en (0) &lt;= '0';&#13;
					  state	:= Read_Byte;&#13;
					  rtnstate	:= detect_inst;&#13;
					  IP := (others =&gt; '0');&#13;
					  end if;&#13;
		     else&#13;
			   sd_h_hndShk &lt;= '0'; &#13;
		    end if;&#13;
		  end case;&#13;
		  if (ram_rw_en = '0') then &#13;
		  	main_mem_addr	 &lt;= IP(NUMBER_MEMORY_BIT'length-1 downto 0); else main_mem_addr&lt;=addr_mem_rw(NUMBER_MEMORY_BIT'length-1 downto 0); end if;&#13;
		  	LED	&lt;= LED_v;&#13;
		 end if;&#13;
		end if;&#13;
	end process;&#13;
	&#13;
	process (clk_i)&#13;
	begin&#13;
	if rising_edge (clk_i) then&#13;
	&#13;
	ClockPulse	&lt;= std_logic_vector (unsigned (ClockPulse)+1);&#13;
	 if (ClockPulse = "1111111111111111") then&#13;
	   CLKPorcessor	&lt;= not CLKPorcessor;&#13;
	 end if;&#13;
	end if;&#13;
	end process;&#13;
	&#13;
	NOTreset_i &lt;= not reset_i;&#13;
	&#13;
	&#13;
--		  process (clk_i)&#13;
--		  	 variable CounterTime : std_logic_vector (19 downto 0):= (others =&gt; '0');&#13;
--	  begin&#13;
--	  if rising_edge (clk_i) then&#13;
--	  CounterTime	:= std_logic_vector (unsigned(CounterTime) + 1);&#13;
--	    if (CounterTime = "00000000000000000000") then&#13;
--	    end if;&#13;
--	  end if;&#13;
--	  end process;&#13;
	  &#13;
end Behavioral;&#13;
---------------NEW &#13;
</vhdl>
  <vhdl name="s">--**********************************************************************&#13;
-- Copyright 2012 by XESS Corp &lt;http://www.xess.com&gt;.&#13;
-- This program is free software: you can redistribute it and/or modify&#13;
-- it under the terms of the GNU General Public License as published by&#13;
-- the Free Software Foundation, either version 3 of the License, or&#13;
-- (at your option) any later version.&#13;
--&#13;
-- This program is distributed in the hope that it will be useful,&#13;
-- but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
-- GNU General Public License for more details.&#13;
--&#13;
-- You should have received a copy of the GNU General Public License&#13;
-- along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
--**********************************************************************&#13;
&#13;
--*********************************************************************&#13;
-- SD MEMORY CARD INTERFACE&#13;
--&#13;
-- Reads/writes a single or multiple blocks of data to/from an SD Flash card.&#13;
-- &#13;
-- Based on work by by Steven J. Merrifield, June 2008:&#13;
-- http : //stevenmerrifield.com/tools/sd.vhd&#13;
-- &#13;
-- Most of what I learned about interfacing to SD/SDHC cards came from here:&#13;
-- http://elm-chan.org/docs/mmc/mmc_e.html&#13;
--&#13;
-- OPERATION&#13;
--&#13;
--     Set-up:&#13;
--         First of all, you have to give the controller a clock signal on the clk_i &#13;
--         input with a higher frequency than the serial clock sent to the SD card &#13;
--         through the sclk_o output. You can set generic parameters for the &#13;
--         controller to tell it the master clock frequency (100 MHz), the SCLK &#13;
--         frequency for initialization (400 KHz), the SCLK frequency for normal &#13;
--         operation (25 MHz), the size of data sectors in the Flash memory (512 bytes),&#13;
--         and the type of card (either SD or SDHC). I typically use a 100 MHz &#13;
--         clock if I'm running an SD card with a 25 Mbps serial data stream. &#13;
--       &#13;
--     Initialize it:&#13;
--         Pulsing the reset_i input high and then bringing it low again will make &#13;
--         the controller initialize the SD card so it will work in SPI mode. &#13;
--         Basically, it sends the card the commands CMD0, CMD8 and then ACMD41 (which&#13;
--         is CMD55 followed by CMD41). The busy_o output will be high during the &#13;
--         initialization and will go low once it is done. &#13;
--        &#13;
--         After the initialization command sequence, the SD card will send back an R1&#13;
--         response byte. If only the IDLE bit of the R1 response is set, then the &#13;
--         controller will repeatedly re-try the ACMD41 command while busy_o remains &#13;
--         high. &#13;
--        &#13;
--         If any other bit of the R1 response is set, then an error occurred. The &#13;
--         controller will stall, lower busy_o, and output the R1 response code on the&#13;
--         error_o bus. You'll have to pulse reset_i to unfreeze the controller. &#13;
--     &#13;
--         If the R1 response is all zeroes (i.e., no errors occurred during the &#13;
--         initialization), then the controller will lower busy_o and wait for a &#13;
--         read or write operation from the host. The controller will only accept new&#13;
--         operations when busy_o is low.&#13;
--     &#13;
--     Write data:&#13;
--         To write a data block to the SD card, the address of a block is placed &#13;
--         on the addr_i input bus and the wr_i input is raised. The address and &#13;
--         write strobe can be removed once busy_o goes high to indicate the write &#13;
--         operation is underway. The data to be written to the SD card is passed as &#13;
--         follows: &#13;
--     &#13;
--         1. The controller requests a byte of data by raising the hndShk_o output.&#13;
--         2. The host applies the next byte to the data_i input bus and raises the &#13;
--            hndShk_i input.&#13;
--         3. The controller accepts the byte and lowers the hndShk_o output.&#13;
--         4. The host lowers the hndShk_i input.&#13;
--     &#13;
--         This sequence of steps is repeated until all BLOCK_SIZE_G bytes of the &#13;
--         data block are passed from the host to the controller. Once all the data &#13;
--         is passed, the sector on the SD card will be written and the busy_o output &#13;
--         will be lowered. &#13;
--     &#13;
--     Read data:&#13;
--         To read a block of data from the SD card, the address of a block is &#13;
--         placed on the addr_i input bus and the rd_i input is raised. The address &#13;
--         and read strobe can be removed once busy_o goes high to indicate the read &#13;
--         operation is underway. The data read from the SD card is passed to the &#13;
--         host as follows: &#13;
--     &#13;
--         1. The controller raises the hndShk_o output when the next data byte is available.&#13;
--         2. The host reads the byte from the data_o output bus and raises the hndShk_i input.&#13;
--         3. The controller lowers the hndShk_o output.&#13;
--         4. The host lowers the hndShk_i input.&#13;
--     &#13;
--         This sequence of steps is repeated until all BLOCK_SIZE_G bytes of the &#13;
--         data block are passed from the controller to the host. Once all the data &#13;
--         is read, the busy_o output will be lowered.&#13;
--     &#13;
--     Handle errors:&#13;
--         If an error is detected during either a read or write operation, then the&#13;
--         controller will stall, lower busy_o, and output an error code on the &#13;
--         error_o bus. You'll have to pulse reset_i to unfreeze the controller. That &#13;
--         may seem a bit excessive, but it does guarantee that you can't ignore any &#13;
--         errors that occur.&#13;
--&#13;
-- TODO:&#13;
--&#13;
--     * Implement multi-block read and write commands.&#13;
--     * Allow host to send/receive SPI commands/data directly to&#13;
--       the SD card through the controller.&#13;
-- *********************************************************************&#13;
&#13;
&#13;
library ieee;&#13;
use ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;&#13;
use work.CommonPckg.all;&#13;
&#13;
package SdCardPckg is&#13;
&#13;
  type CardType_t is (SD_CARD_E, SDHC_CARD_E);  -- Define the different types of SD cards.&#13;
&#13;
  component SdCardCtrl is&#13;
    generic (&#13;
      FREQ_G          : real       := 50.0;  -- Master clock frequency (MHz).&#13;
      INIT_SPI_FREQ_G : real       := 0.4;  -- Slow SPI clock freq. during initialization (MHz).&#13;
      SPI_FREQ_G      : real       := 25.0;  -- Operational SPI freq. to the SD card (MHz).&#13;
      BLOCK_SIZE_G    : natural    := 512;  -- Number of bytes in an SD card block or sector.&#13;
      CARD_TYPE_G     : CardType_t := SD_CARD_E  -- Type of SD card connected to this controller.&#13;
      );&#13;
    port (&#13;
      -- Host-side interface signals.&#13;
      clk_i      : in  std_logic;       -- Master clock.&#13;
      reset_i    : in  std_logic                     := NO;  -- active-high, synchronous  reset.&#13;
      rd_i       : in  std_logic                     := NO;  -- active-high read block request.&#13;
      wr_i       : in  std_logic                     := NO;  -- active-high write block request.&#13;
      continue_i : in  std_logic                     := NO;  -- If true, inc address and continue R/W.&#13;
      addr_i     : in  std_logic_vector(31 downto 0) := x"00000000";  -- Block address.&#13;
      data_i     : in  std_logic_vector(7 downto 0)  := x"00";  -- Data to write to block.&#13;
      data_o     : out std_logic_vector(7 downto 0)  := x"00";  -- Data read from block.&#13;
      busy_o     : out std_logic;  -- High when controller is busy performing some operation.&#13;
      hndShk_i   : in  std_logic;  -- High when host has data to give or has taken data.&#13;
      hndShk_o   : out std_logic;  -- High when controller has taken data or has data to give.&#13;
      error_o    : out std_logic_vector(15 downto 0) := (others =&gt; NO);&#13;
      -- I/O signals to the external SD card.&#13;
      cs_bo      : out std_logic                     := HI;  -- Active-low chip-select.&#13;
      sclk_o     : out std_logic                     := LO;  -- Serial clock to SD card.&#13;
      mosi_o     : out std_logic                     := HI;  -- Serial data output to SD card.&#13;
      miso_i     : in  std_logic                     := ZERO  -- Serial data input from SD card.&#13;
      );&#13;
  end component;&#13;
&#13;
end package;&#13;
&#13;
&#13;
library ieee;&#13;
use ieee.math_real.all;&#13;
use ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;&#13;
use work.CommonPckg.all;&#13;
use work.SdCardPckg.all;&#13;
&#13;
entity SdCardCtrl is&#13;
  generic (&#13;
    FREQ_G          : real       := 50.0;     -- Master clock frequency (MHz).&#13;
    INIT_SPI_FREQ_G : real       := 0.4;  -- Slow SPI clock freq. during initialization (MHz).&#13;
    SPI_FREQ_G      : real       := 25.0;  -- Operational SPI freq. to the SD card (MHz).&#13;
    BLOCK_SIZE_G    : natural    := 512;  -- Number of bytes in an SD card block or sector.&#13;
    CARD_TYPE_G     : CardType_t := SD_CARD_E  -- Type of SD card connected to this controller.&#13;
    );&#13;
  port (&#13;
    -- Host-side interface signals.&#13;
    clk_i      : in  std_logic;         -- Master clock.&#13;
    reset_i    : in  std_logic                     := NO;  -- active-high, synchronous  reset.&#13;
    rd_i       : in  std_logic                     := NO;  -- active-high read block request.&#13;
    wr_i       : in  std_logic                     := NO;  -- active-high write block request.&#13;
    continue_i : in  std_logic                     := NO;  -- If true, inc address and continue R/W.&#13;
    addr_i     : in  std_logic_vector(31 downto 0) := x"00000000";  -- Block address.&#13;
    data_i     : in  std_logic_vector(7 downto 0)  := x"00";  -- Data to write to block.&#13;
    data_o     : out std_logic_vector(7 downto 0)  := x"00";  -- Data read from block.&#13;
    busy_o     : out std_logic;  -- High when controller is busy performing some operation.&#13;
    hndShk_i   : in  std_logic;  -- High when host has data to give or has taken data.&#13;
    hndShk_o   : out std_logic;  -- High when controller has taken data or has data to give.&#13;
    error_o    : out std_logic_vector(15 downto 0) := (others =&gt; NO);&#13;
	 LED			: out std_logic_vector(3 downto 0)  := (others =&gt; NO);&#13;
    -- I/O signals to the external SD card.&#13;
    cs_bo      : out std_logic                     := HI;  -- Active-low chip-select.&#13;
    sclk_o     : out std_logic                     := LO;  -- Serial clock to SD card.&#13;
    mosi_o     : out std_logic                     := HI;  -- Serial data output to SD card.&#13;
    miso_i     : in  std_logic                     := ZERO  -- Serial data input from SD card.&#13;
    );&#13;
end entity;&#13;
&#13;
&#13;
&#13;
architecture arch of SdCardCtrl is&#13;
&#13;
  signal sclk_r   : std_logic := ZERO;  -- Register output drives SD card clock.&#13;
  signal hndShk_r : std_logic := NO;  -- Register output drives handshake output to host.&#13;
  signal LEDr  		: std_logic_vector(3 downto 0) := (others =&gt; NO);&#13;
begin&#13;
  &#13;
  process(clk_i)  -- FSM process for the SD card controller.&#13;
&#13;
    type FsmState_t is (    -- States of the SD card controller FSM.&#13;
      START_INIT,  -- Send initialization clock pulses to the deselected SD card.    &#13;
      SEND_CMD0,                        -- Put the SD card in the IDLE state.&#13;
      CHK_CMD0_RESPONSE,    -- Check card's R1 response to the CMD0.&#13;
      SEND_CMD8,   -- This command is needed to initialize SDHC cards.&#13;
      GET_CMD8_RESPONSE,                -- Get the R7 response to CMD8.&#13;
      SEND_CMD55,                       -- Send CMD55 to the SD card. &#13;
      SEND_CMD41,                       -- Send CMD41 to the SD card.&#13;
      CHK_ACMD41_RESPONSE,  -- Check if the SD card has left the IDLE state.     &#13;
      WAIT_FOR_HOST_RW,  -- Wait for the host to issue a read or write command.&#13;
      RD_BLK,    -- Read a block of data from the SD card.&#13;
      WR_BLK,    -- Write a block of data to the SD card.&#13;
      WR_WAIT,   -- Wait for SD card to finish writing the data block.&#13;
      START_TX,                         -- Start sending command/data.&#13;
      TX_BITS,   -- Shift out remaining command/data bits.&#13;
      GET_CMD_RESPONSE,  -- Get the R1 response of the SD card to a command.&#13;
      RX_BITS,   -- Receive response/data from the SD card.&#13;
      DESELECT,  -- De-select the SD card and send some clock pulses (Must enter with sclk at zero.)&#13;
      PULSE_SCLK,  -- Issue some clock pulses. (Must enter with sclk at zero.)&#13;
      REPORT_ERROR                      -- Report error and stall until reset.&#13;
      );&#13;
    variable state_v    : FsmState_t := START_INIT;  -- Current state of the FSM.&#13;
    variable rtnState_v : FsmState_t;  -- State FSM returns to when FSM subroutine completes.&#13;
&#13;
    -- Timing constants based on the master clock frequency and the SPI SCLK frequencies.&#13;
    constant CLKS_PER_INIT_SCLK_C      : real    := FREQ_G / INIT_SPI_FREQ_G;&#13;
    constant CLKS_PER_SCLK_C           : real    := FREQ_G / SPI_FREQ_G;&#13;
    constant MAX_CLKS_PER_SCLK_C       : real    := realmax(CLKS_PER_INIT_SCLK_C, CLKS_PER_SCLK_C);&#13;
    constant MAX_CLKS_PER_SCLK_PHASE_C : natural := integer(round(MAX_CLKS_PER_SCLK_C / 2.0));&#13;
    constant INIT_SCLK_PHASE_PERIOD_C  : natural := integer(round(CLKS_PER_INIT_SCLK_C / 2.0));&#13;
    constant SCLK_PHASE_PERIOD_C       : natural := integer(round(CLKS_PER_SCLK_C / 2.0));&#13;
    constant DELAY_BETWEEN_BLOCK_RW_C  : natural := SCLK_PHASE_PERIOD_C;&#13;
&#13;
    -- Registers for generating slow SPI SCLK from the faster master clock.&#13;
    variable clkDivider_v     : natural range 0 to MAX_CLKS_PER_SCLK_PHASE_C;  -- Holds the SCLK period.&#13;
    variable sclkPhaseTimer_v : natural range 0 to MAX_CLKS_PER_SCLK_PHASE_C;  -- Counts down to zero, then SCLK toggles.&#13;
&#13;
    constant NUM_INIT_CLKS_C : natural := 160;  -- Number of initialization clocks to SD card.&#13;
    variable bitCnt_v        : natural range 0 to NUM_INIT_CLKS_C;  -- Tx/Rx bit counter.&#13;
&#13;
    constant CRC_SZ_C    : natural := 2;  -- Number of CRC bytes for read/write blocks.&#13;
    -- When reading blocks of data, get 0xFE + [DATA_BLOCK] + [CRC].&#13;
    constant RD_BLK_SZ_C : natural := 1 + BLOCK_SIZE_G + CRC_SZ_C;&#13;
    -- When writing blocks of data, send 0xFF + 0xFE + [DATA BLOCK] + [CRC] then receive response byte.&#13;
    constant WR_BLK_SZ_C : natural := 1 + 1 + BLOCK_SIZE_G + CRC_SZ_C + 1;&#13;
    variable byteCnt_v   : natural range 0 to IntMax(WR_BLK_SZ_C, RD_BLK_SZ_C);  -- Tx/Rx byte counter.&#13;
&#13;
    -- Command bytes for various SD card operations.&#13;
    subtype Cmd_t is std_logic_vector(7 downto 0);&#13;
    constant CMD0_C          : Cmd_t := std_logic_vector(to_unsigned(16#40# + 0, Cmd_t'length));&#13;
    constant CMD8_C          : Cmd_t := std_logic_vector(to_unsigned(16#40# + 8, Cmd_t'length));&#13;
    constant CMD55_C         : Cmd_t := std_logic_vector(to_unsigned(16#40# + 55, Cmd_t'length));&#13;
    constant CMD41_C         : Cmd_t := std_logic_vector(to_unsigned(16#40# + 41, Cmd_t'length));&#13;
    constant READ_BLK_CMD_C  : Cmd_t := std_logic_vector(to_unsigned(16#40# + 17, Cmd_t'length));&#13;
    constant WRITE_BLK_CMD_C : Cmd_t := std_logic_vector(to_unsigned(16#40# + 24, Cmd_t'length));&#13;
&#13;
    -- Except for CMD0 and CMD8, SD card ops don't need a CRC, so use a fake one for that slot in the command.&#13;
    constant FAKE_CRC_C : std_logic_vector(7 downto 0) := x"FF";&#13;
&#13;
    variable addr_v : unsigned(addr_i'range);  -- Address of current block for R/W operations.&#13;
&#13;
    -- Maximum Tx to SD card consists of command + address + CRC. Data Tx is just a single byte.&#13;
    variable tx_v : std_logic_vector(CMD0_C'length + addr_v'length + FAKE_CRC_C'length - 1 downto 0);  -- Data/command to SD card.&#13;
    alias txCmd_v is tx_v;              -- Command transmission shift register.&#13;
    alias txData_v is tx_v(tx_v'high downto tx_v'high - data_i'length + 1);  -- Data byte transmission shift register.&#13;
&#13;
    variable rx_v               : std_logic_vector(data_i'range);  -- Data/response byte received from SD card.&#13;
    -- Various response codes.&#13;
    subtype Response_t is std_logic_vector(rx_v'range);&#13;
    constant ACTIVE_NO_ERRORS_C : Response_t := "00000000";  -- Normal R1 code after initialization.&#13;
    constant IDLE_NO_ERRORS_C   : Response_t := "00000001";  -- Normal R1 code after CMD0.&#13;
    constant DATA_ACCEPTED_C    : Response_t := "---00101";  -- SD card accepts data block from host.&#13;
    constant DATA_REJ_CRC_C     : Response_t := "---01011";  -- SD card rejects data block from host due to CRC error.&#13;
    constant DATA_REJ_WERR_C    : Response_t := "---01101";  -- SD card rejects data block from host due to write error.&#13;
    -- Various tokens.&#13;
    subtype Token_t is std_logic_vector(rx_v'range);&#13;
    constant NO_TOKEN_C         : Token_t    := x"FF";  -- Received before the SD card responds to a block read command.&#13;
    constant START_TOKEN_C      : Token_t    := x"FE";  -- Starting byte preceding a data block.&#13;
&#13;
    -- Flags that are set/cleared to affect the operation of the FSM.&#13;
    variable getCmdResponse_v : boolean;  -- When true, get R1 response to command sent to SD card.&#13;
    variable rtnData_v        : boolean;  -- When true, signal to host when a data byte arrives from SD card.&#13;
    variable doDeselect_v     : boolean;  -- When true, de-select SD card after a command is issued.&#13;
    &#13;
  begin&#13;
    if rising_edge(clk_i) then&#13;
&#13;
      if reset_i = YES then             -- Perform a reset.&#13;
        state_v          := START_INIT;  -- Send the FSM to the initialization entry-point.&#13;
        sclkPhaseTimer_v := 0;  -- Don't delay the initialization right after reset.&#13;
        busy_o           &lt;= YES;  -- Busy while the SD card interface is being initialized.&#13;
&#13;
      elsif sclkPhaseTimer_v /= 0 then&#13;
        -- Setting the clock phase timer to a non-zero value delays any further actions&#13;
        -- and generates the slower SPI clock from the faster master clock.&#13;
        sclkPhaseTimer_v := sclkPhaseTimer_v - 1;&#13;
&#13;
        -- Clock phase timer has reached zero, so check handshaking sync. between host and controller.&#13;
&#13;
        -- Handshaking lets the host control the flow of data to/from the SD card controller.&#13;
        -- Handshaking between the SD card controller and the host proceeds as follows:&#13;
        --   1: Controller raises its handshake and waits.&#13;
        --   2: Host sees controller handshake and raises its handshake in acknowledgement.&#13;
        --   3: Controller sees host handshake acknowledgement and lowers its handshake.&#13;
        --   4: Host sees controller lower its handshake and removes its handshake.&#13;
        --&#13;
        -- Handshaking is bypassed when the controller FSM is initializing the SD card.&#13;
        &#13;
      elsif state_v /= START_INIT and hndShk_r = HI and hndShk_i = LO then&#13;
        null;            -- Waiting for the host to acknowledge handshake.&#13;
      elsif state_v /= START_INIT and hndShk_r = HI and hndShk_i = HI then&#13;
        txData_v := data_i;             -- Get any data passed from the host.&#13;
        hndShk_r &lt;= LO;  -- The host acknowledged, so lower the controller handshake.&#13;
      elsif state_v /= START_INIT and hndShk_r = LO and hndShk_i = HI then&#13;
        null;            -- Waiting for the host to lower its handshake.&#13;
      elsif (state_v = START_INIT) or (hndShk_r = LO and hndShk_i = LO) then&#13;
        -- Both handshakes are low, so the controller operations can proceed.&#13;
        &#13;
        busy_o &lt;= YES;  -- Busy by default. Only false when waiting for R/W from host or stalled by error.&#13;
			LEDr (3 downto 0) &lt;= "0001";&#13;
        case state_v is&#13;
          &#13;
          when START_INIT =&gt;  -- Deselect the SD card and send it a bunch of clock pulses with MOSI high.&#13;
            error_o          &lt;= (others =&gt; ZERO);  -- Clear error flags.&#13;
            clkDivider_v     := INIT_SCLK_PHASE_PERIOD_C - 1;  -- Use slow SPI clock freq during init.&#13;
            sclkPhaseTimer_v := INIT_SCLK_PHASE_PERIOD_C - 1;  -- and set the duration of the next clock phase.&#13;
            sclk_r           &lt;= LO;     -- Start with low clock to the SD card.&#13;
            hndShk_r         &lt;= LO;     -- Initialize handshake signal.&#13;
            addr_v           := (others =&gt; ZERO);  -- Initialize address.&#13;
            rtnData_v        := false;  -- No data is returned to host during initialization.&#13;
            bitCnt_v         := NUM_INIT_CLKS_C;  -- Generate this many clock pulses.&#13;
            state_v          := DESELECT;  -- De-select the SD card and pulse SCLK.&#13;
            rtnState_v       := SEND_CMD0;  -- Then go to this state after the clock pulses are done.&#13;
				LEDr (3 downto 0) &lt;= "0010"; --nabood&#13;
            &#13;
          when SEND_CMD0 =&gt;             -- Put the SD card in the IDLE state.&#13;
            cs_bo            &lt;= LO;     -- Enable the SD card.&#13;
            txCmd_v          := CMD0_C &amp; x"00000000" &amp; x"95";  -- 0x95 is the correct CRC for this command.&#13;
            bitCnt_v         := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
            getCmdResponse_v := true;  -- Sending a command that generates a response.&#13;
            doDeselect_v     := true;  -- De-select SD card after this command finishes.&#13;
            state_v          := START_TX;  -- Go to FSM subroutine to send the command.&#13;
            rtnState_v       := CHK_CMD0_RESPONSE;  -- Then check the response to the command.&#13;
				LEDr (3 downto 0) &lt;= "0010"; -- Nabood&#13;
            &#13;
          when CHK_CMD0_RESPONSE =&gt;  -- Check card's R1 response to the CMD0.&#13;
            if rx_v = IDLE_NO_ERRORS_C then&#13;
              state_v := SEND_CMD8;  -- Continue init if SD card is in IDLE state with no errors&#13;
            else&#13;
              state_v := SEND_CMD0;     -- Otherwise, try CMD0 again.&#13;
            end if;&#13;
            LEDr (3 downto 0) &lt;= "0011";&#13;
				&#13;
          when SEND_CMD8 =&gt;  -- This command is needed to initialize SDHC cards.&#13;
            cs_bo            &lt;= LO;     -- Enable the SD card.&#13;
            txCmd_v          := CMD8_C &amp; x"000001aa" &amp; x"87";  -- 0x87 is the correct CRC for this command.&#13;
            bitCnt_v         := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
            getCmdResponse_v := true;  -- Sending a command that generates a response.&#13;
            doDeselect_v     := false;  -- Don't de-select, need to get the R7 response sent from the SD card.&#13;
            state_v          := START_TX;  -- Go to FSM subroutine to send the command.&#13;
            rtnState_v       := GET_CMD8_RESPONSE;  -- Then go to this state after the command is sent.&#13;
            LEDr (3 downto 0) &lt;= "0100";&#13;
				&#13;
          when GET_CMD8_RESPONSE =&gt;     -- Get the R7 response to CMD8.&#13;
            cs_bo            &lt;= LO;  -- The SD card should already be enabled, but let's be explicit.&#13;
            bitCnt_v         := 31;     -- Four bytes (32 bits) in R7 response.&#13;
            getCmdResponse_v := false;  -- Not sending a command that generates a response.&#13;
            doDeselect_v     := true;  -- De-select card to end the command after getting the four bytes.&#13;
            state_v          := RX_BITS;  -- Go to FSM subroutine to get the R7 response.&#13;
            rtnState_v       := SEND_CMD55;  -- Then go here (we don't care what the actual R7 response is).&#13;
				LEDr (3 downto 0) &lt;= "0101";&#13;
&#13;
          when SEND_CMD55 =&gt;  -- Send CMD55 as preamble of ACMD41 initialization command.&#13;
            cs_bo            &lt;= LO;     -- Enable the SD card.&#13;
            txCmd_v          := CMD55_C &amp; x"00000000" &amp; FAKE_CRC_C;&#13;
            bitCnt_v         := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
            getCmdResponse_v := true;  -- Sending a command that generates a response.&#13;
            doDeselect_v     := true;  -- De-select SD card after this command finishes.&#13;
            state_v          := START_TX;  -- Go to FSM subroutine to send the command.&#13;
            rtnState_v       := SEND_CMD41;  -- Then go to this state after the command is sent.&#13;
		      LEDr (3 downto 0) &lt;= "0110";&#13;
            &#13;
          when SEND_CMD41 =&gt;  -- Send the SD card the initialization command.&#13;
            cs_bo            &lt;= LO;     -- Enable the SD card.&#13;
            txCmd_v          := CMD41_C &amp; x"40000000" &amp; FAKE_CRC_C;&#13;
            bitCnt_v         := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
            getCmdResponse_v := true;  -- Sending a command that generates a response.&#13;
            doDeselect_v     := true;  -- De-select SD card after this command finishes.&#13;
            state_v          := START_TX;  -- Go to FSM subroutine to send the command.&#13;
            rtnState_v       := CHK_ACMD41_RESPONSE;  -- Then check the response to the command.&#13;
				LEDr (3 downto 0) &lt;= "0111";&#13;
            &#13;
          when CHK_ACMD41_RESPONSE =&gt;&#13;
            -- The CMD55, CMD41 sequence should cause the SD card to leave the IDLE state&#13;
            -- and become ready for SPI read/write operations. If still IDLE, then repeat the CMD55, CMD41 sequence.&#13;
            -- If one of the R1 error flags is set, then report the error and stall.&#13;
            if rx_v = ACTIVE_NO_ERRORS_C then   -- Not IDLE, no errors.&#13;
              state_v := WAIT_FOR_HOST_RW;  -- Start processing R/W commands from the host.&#13;
            elsif rx_v = IDLE_NO_ERRORS_C then  -- Still IDLE but no errors. &#13;
              state_v := SEND_CMD55;    -- Repeat the CMD55, CMD41 sequence.&#13;
            else                        -- Some error occurred.&#13;
              state_v := REPORT_ERROR;  -- Report the error and stall.&#13;
            end if;&#13;
				LEDr (3 downto 0) &lt;= "1000";&#13;
            &#13;
          when WAIT_FOR_HOST_RW =&gt;  -- Wait for the host to read or write a block of data from the SD card.&#13;
            clkDivider_v     := SCLK_PHASE_PERIOD_C - 1;  -- Set SPI clock frequency for normal operation.&#13;
            getCmdResponse_v := true;  -- Get R1 response to any commands issued to the SD card.&#13;
            if rd_i = YES then  -- send READ command and address to the SD card.&#13;
              cs_bo &lt;= LO;              -- Enable the SD card.&#13;
              if continue_i = YES then  -- Multi-block read. Use stored address.&#13;
                if CARD_TYPE_G = SD_CARD_E then  -- SD cards use byte-addressing, &#13;
                  addr_v := addr_v + BLOCK_SIZE_G;  -- so add block-size to get next block address.&#13;
                else                    -- SDHC cards use block-addressing,&#13;
                  addr_v := addr_v + 1;  -- so just increment current block address.&#13;
                end if;&#13;
                txCmd_v := READ_BLK_CMD_C &amp; std_logic_vector(addr_v) &amp; FAKE_CRC_C;&#13;
              else                      -- Single-block read.&#13;
                txCmd_v := READ_BLK_CMD_C &amp; addr_i &amp; FAKE_CRC_C;  -- Use address supplied by host.&#13;
                addr_v  := unsigned(addr_i);  -- Store address for multi-block operations.&#13;
              end if;&#13;
              bitCnt_v   := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
              byteCnt_v  := RD_BLK_SZ_C;&#13;
              state_v    := START_TX;  -- Go to FSM subroutine to send the command.&#13;
              rtnState_v := RD_BLK;  -- Then go to this state to read the data block.&#13;
            elsif wr_i = YES then  -- send WRITE command and address to the SD card.&#13;
              cs_bo &lt;= LO;              -- Enable the SD card.&#13;
              if continue_i = YES then  -- Multi-block write. Use stored address.&#13;
                if CARD_TYPE_G = SD_CARD_E then  -- SD cards use byte-addressing, &#13;
                  addr_v := addr_v + BLOCK_SIZE_G;  -- so add block-size to get next block address.&#13;
                else                    -- SDHC cards use block-addressing,&#13;
                  addr_v := addr_v + 1;  -- so just increment current block address.&#13;
                end if;&#13;
                txCmd_v := WRITE_BLK_CMD_C &amp; std_logic_vector(addr_v) &amp; FAKE_CRC_C;&#13;
              else                      -- Single-block write.&#13;
                txCmd_v := WRITE_BLK_CMD_C &amp; addr_i &amp; FAKE_CRC_C;  -- Use address supplied by host.&#13;
                addr_v  := unsigned(addr_i);  -- Store address for multi-block operations.&#13;
              end if;&#13;
              bitCnt_v   := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
              byteCnt_v  := WR_BLK_SZ_C;    -- Set number of bytes to write.&#13;
              state_v    := START_TX;  -- Go to this FSM subroutine to send the command ...&#13;
              rtnState_v := WR_BLK;  -- then go to this state to write the data block.&#13;
            else              -- Do nothing and wait for command from host.&#13;
              cs_bo   &lt;= HI;            -- Deselect the SD card.&#13;
              busy_o  &lt;= NO;  -- SD card interface is waiting for R/W from host, so it's not busy.&#13;
              state_v := WAIT_FOR_HOST_RW;  -- Keep waiting for command from host.&#13;
            end if;&#13;
				LEDr (3 downto 0) &lt;= "1001";&#13;
&#13;
          when RD_BLK =&gt;          -- Read a block of data from the SD card.&#13;
            -- Some default values for these...&#13;
            rtnData_v  := false;  -- Data is only returned to host in one place.&#13;
            bitCnt_v   := rx_v'length - 1;   -- Receiving byte-sized data.&#13;
            state_v    := RX_BITS;      -- Call the bit receiver routine.&#13;
            rtnState_v := RD_BLK;   -- Return here when done receiving a byte.&#13;
            if byteCnt_v = RD_BLK_SZ_C then  -- Initial read to prime the pump.&#13;
              byteCnt_v := byteCnt_v - 1;&#13;
            elsif byteCnt_v = RD_BLK_SZ_C -1 then  -- Then look for the data block start token.&#13;
              if rx_v = NO_TOKEN_C then  -- Receiving 0xFF means the card hasn't responded yet. Keep trying.&#13;
                null;&#13;
              elsif rx_v = START_TOKEN_C then&#13;
                rtnData_v := true;  -- Found the start token, so now start returning data byes to the host.&#13;
                byteCnt_v := byteCnt_v - 1;&#13;
              else  -- Getting anything else means something strange has happened.&#13;
                state_v := REPORT_ERROR;&#13;
              end if;&#13;
            elsif byteCnt_v &gt;= 3 then  -- Now bytes of data from the SD card are received.&#13;
              rtnData_v := true;        -- Return this data to the host.&#13;
              byteCnt_v := byteCnt_v - 1;&#13;
            elsif byteCnt_v = 2 then  -- Receive the 1st CRC byte at the end of the data block.&#13;
              byteCnt_v := byteCnt_v - 1;&#13;
            elsif byteCnt_v = 1 then    -- Receive the 2nd&#13;
              byteCnt_v := byteCnt_v - 1;&#13;
            else    -- Reading is done, so deselect the SD card.&#13;
              sclk_r     &lt;= LO;&#13;
              bitCnt_v   := 2;&#13;
              state_v    := DESELECT;&#13;
              rtnState_v := WAIT_FOR_HOST_RW;&#13;
            end if;&#13;
				LEDr (3 downto 0) &lt;= "1010";&#13;
            &#13;
          when WR_BLK =&gt;             -- Write a block of data to the SD card.&#13;
            -- Some default values for these...&#13;
            getCmdResponse_v := false;  -- Sending data bytes so there's no command response from SD card.&#13;
            bitCnt_v         := txData_v'length;  -- Transmitting byte-sized data.&#13;
            state_v          := START_TX;  -- Call the bit transmitter routine.&#13;
            rtnState_v       := WR_BLK;  -- Return here when done transmitting a byte.&#13;
            if byteCnt_v = WR_BLK_SZ_C then&#13;
              txData_v := NO_TOKEN_C;  -- Hold MOSI high for one byte before data block goes out.&#13;
            elsif byteCnt_v = WR_BLK_SZ_C - 1 then     -- Send start token.&#13;
              txData_v := START_TOKEN_C;   -- Starting token for data block.&#13;
            elsif byteCnt_v &gt;= 4 then   -- Now send bytes in the data block.&#13;
              hndShk_r &lt;= HI;           -- Signal host to provide data.&#13;
            -- The transmit shift register is loaded with data from host in the handshaking section above.&#13;
            elsif byteCnt_v = 3 or byteCnt_v = 2 then  -- Send two phony CRC bytes at end of packet.&#13;
              txData_v := FAKE_CRC_C;&#13;
            elsif byteCnt_v = 1 then&#13;
              bitCnt_v   := rx_v'length - 1;&#13;
              state_v    := RX_BITS;  -- Get response of SD card to the write operation.&#13;
              rtnState_v := WR_WAIT;&#13;
            else                        -- Check received response byte.&#13;
              if std_match(rx_v, DATA_ACCEPTED_C) then  -- Data block was accepted.&#13;
                state_v := WR_WAIT;  -- Wait for the SD card to finish writing the data into Flash.&#13;
              else                      -- Data block was rejected.&#13;
                error_o(15 downto 8) &lt;= rx_v;&#13;
                state_v              := REPORT_ERROR;  -- Report the error.&#13;
              end if;&#13;
            end if;&#13;
            byteCnt_v := byteCnt_v - 1;&#13;
				LEDr (3 downto 0) &lt;= "1011";&#13;
            &#13;
          when WR_WAIT =&gt;  -- Wait for SD card to finish writing the data block.&#13;
            -- The SD card will pull MISO low while it is busy, and raise it when it is done.&#13;
            sclk_r           &lt;= not sclk_r;    -- Toggle the SPI clock...&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- and set the duration of the next clock phase.&#13;
            if sclk_r = HI and miso_i = HI then  -- Data block has been written, so deselect the SD card.&#13;
              bitCnt_v   := 2;&#13;
              state_v    := DESELECT;&#13;
              rtnState_v := WAIT_FOR_HOST_RW;&#13;
            end if;&#13;
				LEDr (3 downto 0) &lt;= "1100";&#13;
            &#13;
          when START_TX =&gt;&#13;
            -- Start sending command/data by lowering SCLK and outputing MSB of command/data&#13;
            -- so it has plenty of setup before the rising edge of SCLK.&#13;
            sclk_r           &lt;= LO;  -- Lower the SCLK (although it should already be low).&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- Set the duration of the low SCLK.&#13;
            mosi_o           &lt;= tx_v(tx_v'high);  -- Output MSB of command/data.&#13;
            tx_v             := tx_v(tx_v'high-1 downto 0) &amp; ONE;  -- Shift command/data register by one bit.&#13;
            bitCnt_v         := bitCnt_v - 1;  -- The first bit has been sent, so decrement bit counter.&#13;
            state_v          := TX_BITS;  -- Go here to shift out the rest of the command/data bits.&#13;
				LEDr (3 downto 0) &lt;= "1101";&#13;
            &#13;
          when TX_BITS =&gt;  -- Shift out remaining command/data bits and (possibly) get response from SD card.&#13;
            sclk_r           &lt;= not sclk_r;    -- Toggle the SPI clock...&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- and set the duration of the next clock phase.&#13;
            if sclk_r = HI then&#13;
              -- SCLK is going to be flipped from high to low, so output the next command/data bit&#13;
              -- so it can setup while SCLK is low.&#13;
              if bitCnt_v /= 0 then  -- Keep sending bits until the bit counter hits zero.&#13;
                mosi_o   &lt;= tx_v(tx_v'high);&#13;
                tx_v     := tx_v(tx_v'high-1 downto 0) &amp; ONE;&#13;
                bitCnt_v := bitCnt_v - 1;&#13;
              else&#13;
                if getCmdResponse_v then&#13;
                  state_v  := GET_CMD_RESPONSE;  -- Get a response to the command from the SD card.&#13;
                  bitCnt_v := Response_t'length - 1;  -- Length of the expected response.&#13;
                else&#13;
                  state_v          := rtnState_v;  -- Return to calling state (no need to get a response).&#13;
                  sclkPhaseTimer_v := 0;  -- Clear timer so next SPI op can begin ASAP with SCLK low.&#13;
                end if;&#13;
              end if;&#13;
            end if;&#13;
				LEDr (3 downto 0) &lt;= "1110";&#13;
&#13;
          when GET_CMD_RESPONSE =&gt;  -- Get the response of the SD card to a command.&#13;
            if sclk_r = HI and miso_i = LO then  -- MISO will be held high by SD card until 1st bit of R1 response, which is 0.&#13;
              -- Shift in the MSB bit of the response.&#13;
              rx_v     := rx_v(rx_v'high-1 downto 0) &amp; miso_i;&#13;
              bitCnt_v := bitCnt_v - 1;&#13;
              state_v  := RX_BITS;  -- Now receive the reset of the response.&#13;
            end if;&#13;
            sclk_r           &lt;= not sclk_r;    -- Toggle the SPI clock...&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- and set the duration of the next clock phase.&#13;
				LEDr (3 downto 0) &lt;= "1010";&#13;
				&#13;
          when RX_BITS =&gt;               -- Receive bits from the SD card.&#13;
            if sclk_r = HI then    -- Bits enter after the rising edge of SCLK.&#13;
              rx_v := rx_v(rx_v'high-1 downto 0) &amp; miso_i;&#13;
              if bitCnt_v /= 0 then     -- More bits left to receive.&#13;
                bitCnt_v := bitCnt_v - 1;&#13;
              else                      -- Last bit has been received.&#13;
                if rtnData_v then       -- Send the received data to the host.&#13;
                  data_o   &lt;= rx_v;     -- Output received data to the host.&#13;
                  hndShk_r &lt;= HI;  -- Signal to the host that the data is ready.&#13;
                end if;&#13;
                if doDeselect_v then&#13;
                  bitCnt_v := 1;&#13;
                  state_v  := DESELECT;  -- De-select SD card before returning.&#13;
                else&#13;
                  state_v := rtnState_v;  -- Otherwise, return to calling state without de-selecting.&#13;
                end if;&#13;
              end if;&#13;
            end if;&#13;
            sclk_r           &lt;= not sclk_r;    -- Toggle the SPI clock...&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- and set the duration of the next clock phase.&#13;
            LEDr (3 downto 0) &lt;= "0000";&#13;
				&#13;
          when DESELECT =&gt;  -- De-select the SD card and send some clock pulses (Must enter with sclk at zero.)&#13;
            doDeselect_v     := false;  -- Once the de-select is done, clear the flag that caused it.&#13;
            cs_bo            &lt;= HI;     -- De-select the SD card.&#13;
            mosi_o           &lt;= HI;  -- Keep the data input of the SD card pulled high.&#13;
            state_v          := PULSE_SCLK;  -- Pulse the clock so the SD card will see the de-select.&#13;
            sclk_r           &lt;= LO;  -- Clock is set low so the next rising edge will see the new CS and MOSI&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- Set the duration of the next clock phase.&#13;
            LEDr (3 downto 0) &lt;= "0001";&#13;
				&#13;
          when PULSE_SCLK =&gt;  -- Issue some clock pulses. (Must enter with sclk at zero.)&#13;
            if sclk_r = HI then&#13;
              if bitCnt_v /= 0 then&#13;
                bitCnt_v := bitCnt_v - 1;&#13;
              else  -- Return to the calling routine when the pulse counter reaches zero.&#13;
                state_v := rtnState_v;&#13;
              end if;&#13;
            end if;&#13;
            sclk_r           &lt;= not sclk_r;    -- Toggle the SPI clock...&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- and set the duration of the next clock phase.&#13;
            LEDr (3 downto 0) &lt;= "0010";  --nabood&#13;
				&#13;
          when REPORT_ERROR =&gt;  -- Report the error code and stall here until a reset occurs.&#13;
            error_o(rx_v'range) &lt;= rx_v;  -- Output the SD card response as the error code.&#13;
            busy_o              &lt;= NO;  -- Not busy.&#13;
				LEDr (3 downto 0) &lt;= "0011";&#13;
				&#13;
          when others =&gt;&#13;
            state_v := WAIT_FOR_HOST_RW;&#13;
				LEDr (3 downto 0) &lt;= "0100"; -- hamin bood&#13;
        end case;&#13;
      end if;&#13;
    end if;&#13;
  end process;&#13;
&#13;
  sclk_o   &lt;= sclk_r;    -- Output the generated SPI clock for the SD card.&#13;
  hndShk_o &lt;= hndShk_r;  -- Output the generated handshake to the host.&#13;
  LED (3 downto 0) &lt;= LEDr (3 downto 0);&#13;
end architecture;&#13;
&#13;
&#13;
&#13;
&#13;
--**********************************************************************&#13;
-- This module connects the SD card controller interface to a HostIoToDut&#13;
-- interface so the controller can be tested from a PC over a USB link.&#13;
--**********************************************************************&#13;
</vhdl>
  <vhdl name="v">library IEEE;&#13;
use IEEE.STD_LOGIC_1164.ALL;&#13;
&#13;
--use IEEE.STD_LOGIC_UNSIGNED.ALL;&#13;
use ieee.numeric_std.all;&#13;
&#13;
entity MyVGA is&#13;
  port ( CLK_50MHz: in std_logic;&#13;
			Xchar : std_logic_vector(6 downto 0);&#13;
			Ychar : std_logic_vector(4 downto 0);&#13;
			char : std_logic_vector(6 downto 0);&#13;
         VS: out std_logic;&#13;
			HS: out std_logic;&#13;
			RED: out std_logic;&#13;
			GREEN: out std_logic;&#13;
			BLUE: out std_logic&#13;
  );&#13;
end MyVGA;&#13;
&#13;
architecture Behavioral of MyVGA is&#13;
  -- VGA Definitions starts&#13;
  constant HDisplayArea: integer:= 640; -- horizontal display area&#13;
  constant HLimit: integer:= 800; -- maximum horizontal amount (limit)&#13;
  constant HFrontPorch: integer:= 16; -- h. front porch&#13;
  constant HBackPorch: integer:= 48;	-- h. back porch&#13;
  constant HSyncWidth: integer:= 96;	-- h. pulse width&#13;
  &#13;
  constant VDisplayArea: integer:= 480; -- vertical display area&#13;
  constant VLimit: integer:= 525; -- maximum vertical amount (limit)&#13;
  constant VFrontPorch: integer:= 10;	-- v. front porch&#13;
  constant VBackPorch: integer:= 33;	-- v. back porch&#13;
  constant VSyncWidth: integer:= 2;	-- v. pulse width  &#13;
    &#13;
  signal Clk_25MHz: std_logic := '0';  &#13;
  signal HBlank, VBlank, Blank: std_logic := '0';&#13;
    &#13;
	 &#13;
  signal CurrentHPos: std_logic_vector(10 downto 0) := (others =&gt; '0'); -- goes to 1100100000 = 800&#13;
  signal CurrentVPos: std_logic_vector(10 downto 0) := (others =&gt; '0'); -- goes to 1000001101 = 525&#13;
  signal ScanlineX, ScanlineY: std_logic_vector(10 downto 0);&#13;
  &#13;
&#13;
  signal ColorOutput: std_logic_vector(2 downto 0);&#13;
  -- VGA Definitions end&#13;
  &#13;
    signal CounterX: std_logic_vector(9 downto 0) := (others =&gt; '0'); -- goes to 1100100000 = 680&#13;
    signal CounterY: std_logic_vector(8 downto 0) := (others =&gt; '0'); -- goes to 1100100000 = 512&#13;
	 &#13;
	 signal CounterTime : std_logic_vector (19 downto 0):= (others =&gt; '0');&#13;
	 signal ADDR_ROM :STD_LOGIC_VECTOR(6 DOWNTO 0);&#13;
	 signal DATA_OUT_ROM: STD_LOGIC_VECTOR(63 DOWNTO 0);&#13;
	&#13;
COMPONENT ram&#13;
  PORT (&#13;
    clka : IN STD_LOGIC;&#13;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);&#13;
    addra : IN STD_LOGIC_VECTOR(14 DOWNTO 0);&#13;
    dina : IN STD_LOGIC_VECTOR(7 DOWNTO 0);&#13;
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)&#13;
  );&#13;
END COMPONENT;&#13;
&#13;
COMPONENT VGACHAR&#13;
  PORT (&#13;
    clka : IN STD_LOGIC;&#13;
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);&#13;
    douta : OUT STD_LOGIC_VECTOR(63 DOWNTO 0)&#13;
  );&#13;
END COMPONENT;&#13;
&#13;
  &#13;
signal WEn : STD_LOGIC_VECTOR(0 DOWNTO 0);&#13;
signal VGA_ADDR_RAM :STD_LOGIC_VECTOR(14 DOWNTO 0);&#13;
signal VGA_DATA_IN_RAM	:STD_LOGIC_VECTOR(7 DOWNTO 0);&#13;
signal VGA_DATA_OUT_RAM: STD_LOGIC_VECTOR(7 DOWNTO 0);&#13;
&#13;
&#13;
signal Echar : std_logic_vector(6 downto 0) := std_logic_vector(unsigned(char)- x"20");&#13;
&#13;
&#13;
type Characters is Array (15 downto 0) of std_logic_vector (7 downto 0);&#13;
signal ROMchar :Characters;&#13;
&#13;
&#13;
begin&#13;
&#13;
VGA_RAM : ram&#13;
  PORT MAP (&#13;
    clka =&gt; CLK_50MHz,&#13;
    wea =&gt; WEn,&#13;
    addra =&gt; VGA_ADDR_RAM,&#13;
    dina =&gt; VGA_DATA_IN_RAM,&#13;
    douta =&gt; VGA_DATA_OUT_RAM&#13;
  );&#13;
  &#13;
  VGA_CHAR : VGACHAR&#13;
  PORT MAP (&#13;
    clka =&gt; CLK_50MHz,&#13;
    addra =&gt; ADDR_ROM,&#13;
    douta =&gt; DATA_OUT_ROM&#13;
  );&#13;
  &#13;
  Generate25MHz: process (CLK_50MHz)&#13;
  begin&#13;
    if rising_edge(CLK_50MHz) then&#13;
	   Clk_25MHz &lt;= not Clk_25MHz;	 end if;&#13;
  end process Generate25MHz;&#13;
    		&#13;
&#13;
  VGAPosition: process (Clk_25MHz)&#13;
  begin&#13;
    if rising_edge(Clk_25MHz) then&#13;
	   if unsigned(CurrentHPos) &lt; HLimit-1 then&#13;
		  CurrentHPos &lt;= std_logic_vector (unsigned(CurrentHPos) + 1);&#13;
		else&#13;
		  if unsigned(CurrentVPos) &lt; VLimit-1 then&#13;
		    CurrentVPos &lt;=  std_logic_vector (unsigned(CurrentVPos) + 1);&#13;
		  else&#13;
		    CurrentVPos &lt;= (others =&gt; '0'); -- reset Vertical Position&#13;
		  end if;&#13;
		  CurrentHPos &lt;= (others =&gt; '0'); -- reset Horizontal Position&#13;
		end if;&#13;
	 end if;&#13;
  end process VGAPosition;&#13;
&#13;
  -- Timing definition for HSync, VSync and Blank (http://tinyvga.com/vga-timing/640x480@60Hz)&#13;
     HS &lt;= '0' when unsigned(CurrentHPos) &lt; HSyncWidth else&#13;
	        '1';&#13;
	  &#13;
	  VS &lt;= '0' when unsigned(CurrentVPos) &lt; VSyncWidth else&#13;
	        '1';&#13;
	  &#13;
	  HBlank &lt;= '0' when (unsigned(CurrentHPos) &gt;= HSyncWidth + HFrontPorch) and (unsigned(CurrentHPos) &lt; HSyncWidth + HFrontPorch + HDisplayArea) else&#13;
	           '1';&#13;
				  &#13;
	  VBlank &lt;= '0' when (unsigned(CurrentVPos) &gt;= VSyncWidth + VFrontPorch) and (unsigned(CurrentVPos) &lt; VSyncWidth + VFrontPorch + VDisplayArea) else&#13;
	           '1';				  &#13;
	  &#13;
	  Blank &lt;= '1' when HBlank = '1' or VBlank = '1' else&#13;
	           '0';&#13;
	  &#13;
	  ScanlineX &lt;= std_logic_vector(unsigned(CurrentHPos) - HSyncWidth - HFrontPorch) when Blank = '0' else&#13;
	               (others =&gt; '0');&#13;
&#13;
	  ScanlineY &lt;= std_logic_vector(unsigned(CurrentVPos) - VSyncWidth - VFrontPorch) when Blank = '0' else&#13;
	               (others =&gt; '0');	&#13;
&#13;
     RED &lt;= ColorOutput(2) when Blank = '0' else&#13;
            '0';	  &#13;
     GREEN &lt;= ColorOutput(1) when Blank = '0' else&#13;
            '0';				&#13;
     BLUE &lt;= ColorOutput(0) when Blank = '0' else&#13;
            '0';		&#13;
	  &#13;
	  &#13;
	ADDR_ROM	&lt;= std_logic_vector (unsigned(char)-32);	-- begin from 32 to 128 so we decease 32 from ASCII char&#13;
	&#13;
	VGA_DATA_IN_RAM &lt;= ROMchar (to_integer(unsigned(ScanlineY(3 downto 0)))) when std_logic_vector (unsigned(ScanlineX)/8) =  "0000" &amp; Xchar and std_logic_vector (unsigned(ScanlineY)/16) =  "000000" &amp; Ychar else&#13;
	"00000000";&#13;
	&#13;
	 WEn (0) &lt;= '1' when std_logic_vector (unsigned(ScanlineX)/8) =  "0000" &amp; Xchar and std_logic_vector (unsigned(ScanlineY)/16) =  "000000" &amp; Ychar else&#13;
		'0';&#13;
	 &#13;
 	VGA_ADDR_RAM	&lt;= std_logic_vector((unsigned(ScanlineY (7 downto 0))*80) + (unsigned(ScanlineX)/8));&#13;
	&#13;
   ColorOutput &lt;= "010" when VGA_DATA_OUT_RAM(to_integer(unsigned(ScanlineX(2 downto 0)))) = '1' else&#13;
                 "000";&#13;
		 &#13;
	 &#13;
--	  char	&lt;= "1001101";&#13;
	  &#13;
--	  process (CLK_50MHz)&#13;
--	  begin&#13;
--	  if rising_edge (CLK_50MHz) then&#13;
--		 if (Xchar = "1010000") then&#13;
--				Xchar	&lt;= (others =&gt; '0');&#13;
--				Ychar	&lt;= std_logic_vector (unsigned(Ychar)+1);&#13;
--	    end if;&#13;
--	  end if;&#13;
--	  end process;&#13;
  &#13;
  &#13;
  	ROMchar (7)  &lt;=  DATA_OUT_ROM(07 downto 00);&#13;
	ROMchar (6)  &lt;=  DATA_OUT_ROM(15 downto 08);&#13;
	ROMchar (5)  &lt;=  DATA_OUT_ROM(23 downto 16);&#13;
	ROMchar (4)  &lt;=  DATA_OUT_ROM(31 downto 24);&#13;
	ROMchar (3)  &lt;=  DATA_OUT_ROM(39 downto 32);&#13;
	ROMchar (2)  &lt;=  DATA_OUT_ROM(47 downto 40);&#13;
	ROMchar (1)  &lt;=  DATA_OUT_ROM(55 downto 48);&#13;
	ROMchar (0)  &lt;=  DATA_OUT_ROM(63 downto 56);&#13;
	&#13;
  &#13;
end Behavioral;&#13;
&#13;
</vhdl>
  <vhdl name="sdc">--**********************************************************************&#13;
-- Copyright 2012 by XESS Corp &lt;http://www.xess.com&gt;.&#13;
-- This program is free software: you can redistribute it and/or modify&#13;
-- it under the terms of the GNU General Public License as published by&#13;
-- the Free Software Foundation, either version 3 of the License, or&#13;
-- (at your option) any later version.&#13;
--&#13;
-- This program is distributed in the hope that it will be useful,&#13;
-- but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
-- GNU General Public License for more details.&#13;
--&#13;
-- You should have received a copy of the GNU General Public License&#13;
-- along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
--**********************************************************************&#13;
&#13;
--*********************************************************************&#13;
-- SD MEMORY CARD INTERFACE&#13;
--&#13;
-- Reads/writes a single or multiple blocks of data to/from an SD Flash card.&#13;
-- &#13;
-- Based on work by by Steven J. Merrifield, June 2008:&#13;
-- http : //stevenmerrifield.com/tools/sd.vhd&#13;
-- &#13;
-- Most of what I learned about interfacing to SD/SDHC cards came from here:&#13;
-- http://elm-chan.org/docs/mmc/mmc_e.html&#13;
--&#13;
-- OPERATION&#13;
--&#13;
--     Set-up:&#13;
--         First of all, you have to give the controller a clock signal on the clk_i &#13;
--         input with a higher frequency than the serial clock sent to the SD card &#13;
--         through the sclk_o output. You can set generic parameters for the &#13;
--         controller to tell it the master clock frequency (100 MHz), the SCLK &#13;
--         frequency for initialization (400 KHz), the SCLK frequency for normal &#13;
--         operation (25 MHz), the size of data sectors in the Flash memory (512 bytes),&#13;
--         and the type of card (either SD or SDHC). I typically use a 100 MHz &#13;
--         clock if I'm running an SD card with a 25 Mbps serial data stream. &#13;
--       &#13;
--     Initialize it:&#13;
--         Pulsing the reset_i input high and then bringing it low again will make &#13;
--         the controller initialize the SD card so it will work in SPI mode. &#13;
--         Basically, it sends the card the commands CMD0, CMD8 and then ACMD41 (which&#13;
--         is CMD55 followed by CMD41). The busy_o output will be high during the &#13;
--         initialization and will go low once it is done. &#13;
--        &#13;
--         After the initialization command sequence, the SD card will send back an R1&#13;
--         response byte. If only the IDLE bit of the R1 response is set, then the &#13;
--         controller will repeatedly re-try the ACMD41 command while busy_o remains &#13;
--         high. &#13;
--        &#13;
--         If any other bit of the R1 response is set, then an error occurred. The &#13;
--         controller will stall, lower busy_o, and output the R1 response code on the&#13;
--         error_o bus. You'll have to pulse reset_i to unfreeze the controller. &#13;
--     &#13;
--         If the R1 response is all zeroes (i.e., no errors occurred during the &#13;
--         initialization), then the controller will lower busy_o and wait for a &#13;
--         read or write operation from the host. The controller will only accept new&#13;
--         operations when busy_o is low.&#13;
--     &#13;
--     Write data:&#13;
--         To write a data block to the SD card, the address of a block is placed &#13;
--         on the addr_i input bus and the wr_i input is raised. The address and &#13;
--         write strobe can be removed once busy_o goes high to indicate the write &#13;
--         operation is underway. The data to be written to the SD card is passed as &#13;
--         follows: &#13;
--     &#13;
--         1. The controller requests a byte of data by raising the hndShk_o output.&#13;
--         2. The host applies the next byte to the data_i input bus and raises the &#13;
--            hndShk_i input.&#13;
--         3. The controller accepts the byte and lowers the hndShk_o output.&#13;
--         4. The host lowers the hndShk_i input.&#13;
--     &#13;
--         This sequence of steps is repeated until all BLOCK_SIZE_G bytes of the &#13;
--         data block are passed from the host to the controller. Once all the data &#13;
--         is passed, the sector on the SD card will be written and the busy_o output &#13;
--         will be lowered. &#13;
--     &#13;
--     Read data:&#13;
--         To read a block of data from the SD card, the address of a block is &#13;
--         placed on the addr_i input bus and the rd_i input is raised. The address &#13;
--         and read strobe can be removed once busy_o goes high to indicate the read &#13;
--         operation is underway. The data read from the SD card is passed to the &#13;
--         host as follows: &#13;
--     &#13;
--         1. The controller raises the hndShk_o output when the next data byte is available.&#13;
--         2. The host reads the byte from the data_o output bus and raises the hndShk_i input.&#13;
--         3. The controller lowers the hndShk_o output.&#13;
--         4. The host lowers the hndShk_i input.&#13;
--     &#13;
--         This sequence of steps is repeated until all BLOCK_SIZE_G bytes of the &#13;
--         data block are passed from the controller to the host. Once all the data &#13;
--         is read, the busy_o output will be lowered.&#13;
--     &#13;
--     Handle errors:&#13;
--         If an error is detected during either a read or write operation, then the&#13;
--         controller will stall, lower busy_o, and output an error code on the &#13;
--         error_o bus. You'll have to pulse reset_i to unfreeze the controller. That &#13;
--         may seem a bit excessive, but it does guarantee that you can't ignore any &#13;
--         errors that occur.&#13;
--&#13;
-- TODO:&#13;
--&#13;
--     * Implement multi-block read and write commands.&#13;
--     * Allow host to send/receive SPI commands/data directly to&#13;
--       the SD card through the controller.&#13;
-- *********************************************************************&#13;
&#13;
&#13;
library ieee;&#13;
use ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;&#13;
use work.CommonPckg.all;&#13;
&#13;
package SdCardPckg is&#13;
&#13;
  type CardType_t is (SD_CARD_E, SDHC_CARD_E);  -- Define the different types of SD cards.&#13;
&#13;
  component SdCardCtrl is&#13;
    generic (&#13;
      FREQ_G          : real       := 50.0;  -- Master clock frequency (MHz).&#13;
      INIT_SPI_FREQ_G : real       := 0.4;  -- Slow SPI clock freq. during initialization (MHz).&#13;
      SPI_FREQ_G      : real       := 25.0;  -- Operational SPI freq. to the SD card (MHz).&#13;
      BLOCK_SIZE_G    : natural    := 512;  -- Number of bytes in an SD card block or sector.&#13;
      CARD_TYPE_G     : CardType_t := SD_CARD_E  -- Type of SD card connected to this controller.&#13;
      );&#13;
    port (&#13;
      -- Host-side interface signals.&#13;
      clk_i      : in  std_logic;       -- Master clock.&#13;
      reset_i    : in  std_logic                     := NO;  -- active-high, synchronous  reset.&#13;
      rd_i       : in  std_logic                     := NO;  -- active-high read block request.&#13;
      wr_i       : in  std_logic                     := NO;  -- active-high write block request.&#13;
      continue_i : in  std_logic                     := NO;  -- If true, inc address and continue R/W.&#13;
      addr_i     : in  std_logic_vector(31 downto 0) := x"00000000";  -- Block address.&#13;
      data_i     : in  std_logic_vector(7 downto 0)  := x"00";  -- Data to write to block.&#13;
      data_o     : out std_logic_vector(7 downto 0)  := x"00";  -- Data read from block.&#13;
      busy_o     : out std_logic;  -- High when controller is busy performing some operation.&#13;
      hndShk_i   : in  std_logic;  -- High when host has data to give or has taken data.&#13;
      hndShk_o   : out std_logic;  -- High when controller has taken data or has data to give.&#13;
      error_o    : out std_logic_vector(15 downto 0) := (others =&gt; NO);&#13;
      -- I/O signals to the external SD card.&#13;
      cs_bo      : out std_logic                     := HI;  -- Active-low chip-select.&#13;
      sclk_o     : out std_logic                     := LO;  -- Serial clock to SD card.&#13;
      mosi_o     : out std_logic                     := HI;  -- Serial data output to SD card.&#13;
      miso_i     : in  std_logic                     := ZERO  -- Serial data input from SD card.&#13;
      );&#13;
  end component;&#13;
&#13;
end package;&#13;
&#13;
&#13;
library ieee;&#13;
use ieee.math_real.all;&#13;
use ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;&#13;
use work.CommonPckg.all;&#13;
use work.SdCardPckg.all;&#13;
&#13;
entity SdCardCtrl is&#13;
  generic (&#13;
    FREQ_G          : real       := 50.0;     -- Master clock frequency (MHz).&#13;
    INIT_SPI_FREQ_G : real       := 0.4;  -- Slow SPI clock freq. during initialization (MHz).&#13;
    SPI_FREQ_G      : real       := 25.0;  -- Operational SPI freq. to the SD card (MHz).&#13;
    BLOCK_SIZE_G    : natural    := 512;  -- Number of bytes in an SD card block or sector.&#13;
    CARD_TYPE_G     : CardType_t := SD_CARD_E  -- Type of SD card connected to this controller.&#13;
    );&#13;
  port (&#13;
    -- Host-side interface signals.&#13;
    clk_i      : in  std_logic;         -- Master clock.&#13;
    reset_i    : in  std_logic                     := NO;  -- active-high, synchronous  reset.&#13;
    rd_i       : in  std_logic                     := NO;  -- active-high read block request.&#13;
    wr_i       : in  std_logic                     := NO;  -- active-high write block request.&#13;
    continue_i : in  std_logic                     := NO;  -- If true, inc address and continue R/W.&#13;
    addr_i     : in  std_logic_vector(31 downto 0) := x"00000000";  -- Block address.&#13;
    data_i     : in  std_logic_vector(7 downto 0)  := x"00";  -- Data to write to block.&#13;
    data_o     : out std_logic_vector(7 downto 0)  := x"00";  -- Data read from block.&#13;
    busy_o     : out std_logic;  -- High when controller is busy performing some operation.&#13;
    hndShk_i   : in  std_logic;  -- High when host has data to give or has taken data.&#13;
    hndShk_o   : out std_logic;  -- High when controller has taken data or has data to give.&#13;
    error_o    : out std_logic_vector(15 downto 0) := (others =&gt; NO);&#13;
	 LED			: out std_logic_vector(3 downto 0)  := (others =&gt; NO);&#13;
    -- I/O signals to the external SD card.&#13;
    cs_bo      : out std_logic                     := HI;  -- Active-low chip-select.&#13;
    sclk_o     : out std_logic                     := LO;  -- Serial clock to SD card.&#13;
    mosi_o     : out std_logic                     := HI;  -- Serial data output to SD card.&#13;
    miso_i     : in  std_logic                     := ZERO  -- Serial data input from SD card.&#13;
    );&#13;
end entity;&#13;
&#13;
&#13;
&#13;
architecture arch of SdCardCtrl is&#13;
&#13;
  signal sclk_r   : std_logic := ZERO;  -- Register output drives SD card clock.&#13;
  signal hndShk_r : std_logic := NO;  -- Register output drives handshake output to host.&#13;
  signal LEDr  		: std_logic_vector(3 downto 0) := (others =&gt; NO);&#13;
begin&#13;
  &#13;
  process(clk_i)  -- FSM process for the SD card controller.&#13;
&#13;
    type FsmState_t is (    -- States of the SD card controller FSM.&#13;
      START_INIT,  -- Send initialization clock pulses to the deselected SD card.    &#13;
      SEND_CMD0,                        -- Put the SD card in the IDLE state.&#13;
      CHK_CMD0_RESPONSE,    -- Check card's R1 response to the CMD0.&#13;
      SEND_CMD8,   -- This command is needed to initialize SDHC cards.&#13;
      GET_CMD8_RESPONSE,                -- Get the R7 response to CMD8.&#13;
      SEND_CMD55,                       -- Send CMD55 to the SD card. &#13;
      SEND_CMD41,                       -- Send CMD41 to the SD card.&#13;
      CHK_ACMD41_RESPONSE,  -- Check if the SD card has left the IDLE state.     &#13;
      WAIT_FOR_HOST_RW,  -- Wait for the host to issue a read or write command.&#13;
      RD_BLK,    -- Read a block of data from the SD card.&#13;
      WR_BLK,    -- Write a block of data to the SD card.&#13;
      WR_WAIT,   -- Wait for SD card to finish writing the data block.&#13;
      START_TX,                         -- Start sending command/data.&#13;
      TX_BITS,   -- Shift out remaining command/data bits.&#13;
      GET_CMD_RESPONSE,  -- Get the R1 response of the SD card to a command.&#13;
      RX_BITS,   -- Receive response/data from the SD card.&#13;
      DESELECT,  -- De-select the SD card and send some clock pulses (Must enter with sclk at zero.)&#13;
      PULSE_SCLK,  -- Issue some clock pulses. (Must enter with sclk at zero.)&#13;
      REPORT_ERROR                      -- Report error and stall until reset.&#13;
      );&#13;
    variable state_v    : FsmState_t := START_INIT;  -- Current state of the FSM.&#13;
    variable rtnState_v : FsmState_t;  -- State FSM returns to when FSM subroutine completes.&#13;
&#13;
    -- Timing constants based on the master clock frequency and the SPI SCLK frequencies.&#13;
    constant CLKS_PER_INIT_SCLK_C      : real    := FREQ_G / INIT_SPI_FREQ_G;&#13;
    constant CLKS_PER_SCLK_C           : real    := FREQ_G / SPI_FREQ_G;&#13;
    constant MAX_CLKS_PER_SCLK_C       : real    := realmax(CLKS_PER_INIT_SCLK_C, CLKS_PER_SCLK_C);&#13;
    constant MAX_CLKS_PER_SCLK_PHASE_C : natural := integer(round(MAX_CLKS_PER_SCLK_C / 2.0));&#13;
    constant INIT_SCLK_PHASE_PERIOD_C  : natural := integer(round(CLKS_PER_INIT_SCLK_C / 2.0));&#13;
    constant SCLK_PHASE_PERIOD_C       : natural := integer(round(CLKS_PER_SCLK_C / 2.0));&#13;
    constant DELAY_BETWEEN_BLOCK_RW_C  : natural := SCLK_PHASE_PERIOD_C;&#13;
&#13;
    -- Registers for generating slow SPI SCLK from the faster master clock.&#13;
    variable clkDivider_v     : natural range 0 to MAX_CLKS_PER_SCLK_PHASE_C;  -- Holds the SCLK period.&#13;
    variable sclkPhaseTimer_v : natural range 0 to MAX_CLKS_PER_SCLK_PHASE_C;  -- Counts down to zero, then SCLK toggles.&#13;
&#13;
    constant NUM_INIT_CLKS_C : natural := 160;  -- Number of initialization clocks to SD card.&#13;
    variable bitCnt_v        : natural range 0 to NUM_INIT_CLKS_C;  -- Tx/Rx bit counter.&#13;
&#13;
    constant CRC_SZ_C    : natural := 2;  -- Number of CRC bytes for read/write blocks.&#13;
    -- When reading blocks of data, get 0xFE + [DATA_BLOCK] + [CRC].&#13;
    constant RD_BLK_SZ_C : natural := 1 + BLOCK_SIZE_G + CRC_SZ_C;&#13;
    -- When writing blocks of data, send 0xFF + 0xFE + [DATA BLOCK] + [CRC] then receive response byte.&#13;
    constant WR_BLK_SZ_C : natural := 1 + 1 + BLOCK_SIZE_G + CRC_SZ_C + 1;&#13;
    variable byteCnt_v   : natural range 0 to IntMax(WR_BLK_SZ_C, RD_BLK_SZ_C);  -- Tx/Rx byte counter.&#13;
&#13;
    -- Command bytes for various SD card operations.&#13;
    subtype Cmd_t is std_logic_vector(7 downto 0);&#13;
    constant CMD0_C          : Cmd_t := std_logic_vector(to_unsigned(16#40# + 0, Cmd_t'length));&#13;
    constant CMD8_C          : Cmd_t := std_logic_vector(to_unsigned(16#40# + 8, Cmd_t'length));&#13;
    constant CMD55_C         : Cmd_t := std_logic_vector(to_unsigned(16#40# + 55, Cmd_t'length));&#13;
    constant CMD41_C         : Cmd_t := std_logic_vector(to_unsigned(16#40# + 41, Cmd_t'length));&#13;
    constant READ_BLK_CMD_C  : Cmd_t := std_logic_vector(to_unsigned(16#40# + 17, Cmd_t'length));&#13;
    constant WRITE_BLK_CMD_C : Cmd_t := std_logic_vector(to_unsigned(16#40# + 24, Cmd_t'length));&#13;
&#13;
    -- Except for CMD0 and CMD8, SD card ops don't need a CRC, so use a fake one for that slot in the command.&#13;
    constant FAKE_CRC_C : std_logic_vector(7 downto 0) := x"FF";&#13;
&#13;
    variable addr_v : unsigned(addr_i'range);  -- Address of current block for R/W operations.&#13;
&#13;
    -- Maximum Tx to SD card consists of command + address + CRC. Data Tx is just a single byte.&#13;
    variable tx_v : std_logic_vector(CMD0_C'length + addr_v'length + FAKE_CRC_C'length - 1 downto 0);  -- Data/command to SD card.&#13;
    alias txCmd_v is tx_v;              -- Command transmission shift register.&#13;
    alias txData_v is tx_v(tx_v'high downto tx_v'high - data_i'length + 1);  -- Data byte transmission shift register.&#13;
&#13;
    variable rx_v               : std_logic_vector(data_i'range);  -- Data/response byte received from SD card.&#13;
    -- Various response codes.&#13;
    subtype Response_t is std_logic_vector(rx_v'range);&#13;
    constant ACTIVE_NO_ERRORS_C : Response_t := "00000000";  -- Normal R1 code after initialization.&#13;
    constant IDLE_NO_ERRORS_C   : Response_t := "00000001";  -- Normal R1 code after CMD0.&#13;
    constant DATA_ACCEPTED_C    : Response_t := "---00101";  -- SD card accepts data block from host.&#13;
    constant DATA_REJ_CRC_C     : Response_t := "---01011";  -- SD card rejects data block from host due to CRC error.&#13;
    constant DATA_REJ_WERR_C    : Response_t := "---01101";  -- SD card rejects data block from host due to write error.&#13;
    -- Various tokens.&#13;
    subtype Token_t is std_logic_vector(rx_v'range);&#13;
    constant NO_TOKEN_C         : Token_t    := x"FF";  -- Received before the SD card responds to a block read command.&#13;
    constant START_TOKEN_C      : Token_t    := x"FE";  -- Starting byte preceding a data block.&#13;
&#13;
    -- Flags that are set/cleared to affect the operation of the FSM.&#13;
    variable getCmdResponse_v : boolean;  -- When true, get R1 response to command sent to SD card.&#13;
    variable rtnData_v        : boolean;  -- When true, signal to host when a data byte arrives from SD card.&#13;
    variable doDeselect_v     : boolean;  -- When true, de-select SD card after a command is issued.&#13;
    &#13;
  begin&#13;
    if rising_edge(clk_i) then&#13;
&#13;
      if reset_i = YES then             -- Perform a reset.&#13;
        state_v          := START_INIT;  -- Send the FSM to the initialization entry-point.&#13;
        sclkPhaseTimer_v := 0;  -- Don't delay the initialization right after reset.&#13;
        busy_o           &lt;= YES;  -- Busy while the SD card interface is being initialized.&#13;
&#13;
      elsif sclkPhaseTimer_v /= 0 then&#13;
        -- Setting the clock phase timer to a non-zero value delays any further actions&#13;
        -- and generates the slower SPI clock from the faster master clock.&#13;
        sclkPhaseTimer_v := sclkPhaseTimer_v - 1;&#13;
&#13;
        -- Clock phase timer has reached zero, so check handshaking sync. between host and controller.&#13;
&#13;
        -- Handshaking lets the host control the flow of data to/from the SD card controller.&#13;
        -- Handshaking between the SD card controller and the host proceeds as follows:&#13;
        --   1: Controller raises its handshake and waits.&#13;
        --   2: Host sees controller handshake and raises its handshake in acknowledgement.&#13;
        --   3: Controller sees host handshake acknowledgement and lowers its handshake.&#13;
        --   4: Host sees controller lower its handshake and removes its handshake.&#13;
        --&#13;
        -- Handshaking is bypassed when the controller FSM is initializing the SD card.&#13;
        &#13;
      elsif state_v /= START_INIT and hndShk_r = HI and hndShk_i = LO then&#13;
        null;            -- Waiting for the host to acknowledge handshake.&#13;
      elsif state_v /= START_INIT and hndShk_r = HI and hndShk_i = HI then&#13;
        txData_v := data_i;             -- Get any data passed from the host.&#13;
        hndShk_r &lt;= LO;  -- The host acknowledged, so lower the controller handshake.&#13;
      elsif state_v /= START_INIT and hndShk_r = LO and hndShk_i = HI then&#13;
        null;            -- Waiting for the host to lower its handshake.&#13;
      elsif (state_v = START_INIT) or (hndShk_r = LO and hndShk_i = LO) then&#13;
        -- Both handshakes are low, so the controller operations can proceed.&#13;
        &#13;
        busy_o &lt;= YES;  -- Busy by default. Only false when waiting for R/W from host or stalled by error.&#13;
			LEDr (3 downto 0) &lt;= "0001";&#13;
        case state_v is&#13;
          &#13;
          when START_INIT =&gt;  -- Deselect the SD card and send it a bunch of clock pulses with MOSI high.&#13;
            error_o          &lt;= (others =&gt; ZERO);  -- Clear error flags.&#13;
            clkDivider_v     := INIT_SCLK_PHASE_PERIOD_C - 1;  -- Use slow SPI clock freq during init.&#13;
            sclkPhaseTimer_v := INIT_SCLK_PHASE_PERIOD_C - 1;  -- and set the duration of the next clock phase.&#13;
            sclk_r           &lt;= LO;     -- Start with low clock to the SD card.&#13;
            hndShk_r         &lt;= LO;     -- Initialize handshake signal.&#13;
            addr_v           := (others =&gt; ZERO);  -- Initialize address.&#13;
            rtnData_v        := false;  -- No data is returned to host during initialization.&#13;
            bitCnt_v         := NUM_INIT_CLKS_C;  -- Generate this many clock pulses.&#13;
            state_v          := DESELECT;  -- De-select the SD card and pulse SCLK.&#13;
            rtnState_v       := SEND_CMD0;  -- Then go to this state after the clock pulses are done.&#13;
				LEDr (3 downto 0) &lt;= "0010"; --nabood&#13;
            &#13;
          when SEND_CMD0 =&gt;             -- Put the SD card in the IDLE state.&#13;
            cs_bo            &lt;= LO;     -- Enable the SD card.&#13;
            txCmd_v          := CMD0_C &amp; x"00000000" &amp; x"95";  -- 0x95 is the correct CRC for this command.&#13;
            bitCnt_v         := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
            getCmdResponse_v := true;  -- Sending a command that generates a response.&#13;
            doDeselect_v     := true;  -- De-select SD card after this command finishes.&#13;
            state_v          := START_TX;  -- Go to FSM subroutine to send the command.&#13;
            rtnState_v       := CHK_CMD0_RESPONSE;  -- Then check the response to the command.&#13;
				LEDr (3 downto 0) &lt;= "0010"; -- Nabood&#13;
            &#13;
          when CHK_CMD0_RESPONSE =&gt;  -- Check card's R1 response to the CMD0.&#13;
            if rx_v = IDLE_NO_ERRORS_C then&#13;
              state_v := SEND_CMD8;  -- Continue init if SD card is in IDLE state with no errors&#13;
            else&#13;
              state_v := SEND_CMD0;     -- Otherwise, try CMD0 again.&#13;
            end if;&#13;
            LEDr (3 downto 0) &lt;= "0011";&#13;
				&#13;
          when SEND_CMD8 =&gt;  -- This command is needed to initialize SDHC cards.&#13;
            cs_bo            &lt;= LO;     -- Enable the SD card.&#13;
            txCmd_v          := CMD8_C &amp; x"000001aa" &amp; x"87";  -- 0x87 is the correct CRC for this command.&#13;
            bitCnt_v         := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
            getCmdResponse_v := true;  -- Sending a command that generates a response.&#13;
            doDeselect_v     := false;  -- Don't de-select, need to get the R7 response sent from the SD card.&#13;
            state_v          := START_TX;  -- Go to FSM subroutine to send the command.&#13;
            rtnState_v       := GET_CMD8_RESPONSE;  -- Then go to this state after the command is sent.&#13;
            LEDr (3 downto 0) &lt;= "0100";&#13;
				&#13;
          when GET_CMD8_RESPONSE =&gt;     -- Get the R7 response to CMD8.&#13;
            cs_bo            &lt;= LO;  -- The SD card should already be enabled, but let's be explicit.&#13;
            bitCnt_v         := 31;     -- Four bytes (32 bits) in R7 response.&#13;
            getCmdResponse_v := false;  -- Not sending a command that generates a response.&#13;
            doDeselect_v     := true;  -- De-select card to end the command after getting the four bytes.&#13;
            state_v          := RX_BITS;  -- Go to FSM subroutine to get the R7 response.&#13;
            rtnState_v       := SEND_CMD55;  -- Then go here (we don't care what the actual R7 response is).&#13;
				LEDr (3 downto 0) &lt;= "0101";&#13;
&#13;
          when SEND_CMD55 =&gt;  -- Send CMD55 as preamble of ACMD41 initialization command.&#13;
            cs_bo            &lt;= LO;     -- Enable the SD card.&#13;
            txCmd_v          := CMD55_C &amp; x"00000000" &amp; FAKE_CRC_C;&#13;
            bitCnt_v         := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
            getCmdResponse_v := true;  -- Sending a command that generates a response.&#13;
            doDeselect_v     := true;  -- De-select SD card after this command finishes.&#13;
            state_v          := START_TX;  -- Go to FSM subroutine to send the command.&#13;
            rtnState_v       := SEND_CMD41;  -- Then go to this state after the command is sent.&#13;
		      LEDr (3 downto 0) &lt;= "0110";&#13;
            &#13;
          when SEND_CMD41 =&gt;  -- Send the SD card the initialization command.&#13;
            cs_bo            &lt;= LO;     -- Enable the SD card.&#13;
            txCmd_v          := CMD41_C &amp; x"40000000" &amp; FAKE_CRC_C;&#13;
            bitCnt_v         := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
            getCmdResponse_v := true;  -- Sending a command that generates a response.&#13;
            doDeselect_v     := true;  -- De-select SD card after this command finishes.&#13;
            state_v          := START_TX;  -- Go to FSM subroutine to send the command.&#13;
            rtnState_v       := CHK_ACMD41_RESPONSE;  -- Then check the response to the command.&#13;
				LEDr (3 downto 0) &lt;= "0111";&#13;
            &#13;
          when CHK_ACMD41_RESPONSE =&gt;&#13;
            -- The CMD55, CMD41 sequence should cause the SD card to leave the IDLE state&#13;
            -- and become ready for SPI read/write operations. If still IDLE, then repeat the CMD55, CMD41 sequence.&#13;
            -- If one of the R1 error flags is set, then report the error and stall.&#13;
            if rx_v = ACTIVE_NO_ERRORS_C then   -- Not IDLE, no errors.&#13;
              state_v := WAIT_FOR_HOST_RW;  -- Start processing R/W commands from the host.&#13;
            elsif rx_v = IDLE_NO_ERRORS_C then  -- Still IDLE but no errors. &#13;
              state_v := SEND_CMD55;    -- Repeat the CMD55, CMD41 sequence.&#13;
            else                        -- Some error occurred.&#13;
              state_v := REPORT_ERROR;  -- Report the error and stall.&#13;
            end if;&#13;
				LEDr (3 downto 0) &lt;= "1000";&#13;
            &#13;
          when WAIT_FOR_HOST_RW =&gt;  -- Wait for the host to read or write a block of data from the SD card.&#13;
            clkDivider_v     := SCLK_PHASE_PERIOD_C - 1;  -- Set SPI clock frequency for normal operation.&#13;
            getCmdResponse_v := true;  -- Get R1 response to any commands issued to the SD card.&#13;
            if rd_i = YES then  -- send READ command and address to the SD card.&#13;
              cs_bo &lt;= LO;              -- Enable the SD card.&#13;
              if continue_i = YES then  -- Multi-block read. Use stored address.&#13;
                if CARD_TYPE_G = SD_CARD_E then  -- SD cards use byte-addressing, &#13;
                  addr_v := addr_v + BLOCK_SIZE_G;  -- so add block-size to get next block address.&#13;
                else                    -- SDHC cards use block-addressing,&#13;
                  addr_v := addr_v + 1;  -- so just increment current block address.&#13;
                end if;&#13;
                txCmd_v := READ_BLK_CMD_C &amp; std_logic_vector(addr_v) &amp; FAKE_CRC_C;&#13;
              else                      -- Single-block read.&#13;
                txCmd_v := READ_BLK_CMD_C &amp; addr_i &amp; FAKE_CRC_C;  -- Use address supplied by host.&#13;
                addr_v  := unsigned(addr_i);  -- Store address for multi-block operations.&#13;
              end if;&#13;
              bitCnt_v   := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
              byteCnt_v  := RD_BLK_SZ_C;&#13;
              state_v    := START_TX;  -- Go to FSM subroutine to send the command.&#13;
              rtnState_v := RD_BLK;  -- Then go to this state to read the data block.&#13;
            elsif wr_i = YES then  -- send WRITE command and address to the SD card.&#13;
              cs_bo &lt;= LO;              -- Enable the SD card.&#13;
              if continue_i = YES then  -- Multi-block write. Use stored address.&#13;
                if CARD_TYPE_G = SD_CARD_E then  -- SD cards use byte-addressing, &#13;
                  addr_v := addr_v + BLOCK_SIZE_G;  -- so add block-size to get next block address.&#13;
                else                    -- SDHC cards use block-addressing,&#13;
                  addr_v := addr_v + 1;  -- so just increment current block address.&#13;
                end if;&#13;
                txCmd_v := WRITE_BLK_CMD_C &amp; std_logic_vector(addr_v) &amp; FAKE_CRC_C;&#13;
              else                      -- Single-block write.&#13;
                txCmd_v := WRITE_BLK_CMD_C &amp; addr_i &amp; FAKE_CRC_C;  -- Use address supplied by host.&#13;
                addr_v  := unsigned(addr_i);  -- Store address for multi-block operations.&#13;
              end if;&#13;
              bitCnt_v   := txCmd_v'length;  -- Set bit counter to the size of the command.&#13;
              byteCnt_v  := WR_BLK_SZ_C;    -- Set number of bytes to write.&#13;
              state_v    := START_TX;  -- Go to this FSM subroutine to send the command ...&#13;
              rtnState_v := WR_BLK;  -- then go to this state to write the data block.&#13;
            else              -- Do nothing and wait for command from host.&#13;
              cs_bo   &lt;= HI;            -- Deselect the SD card.&#13;
              busy_o  &lt;= NO;  -- SD card interface is waiting for R/W from host, so it's not busy.&#13;
              state_v := WAIT_FOR_HOST_RW;  -- Keep waiting for command from host.&#13;
            end if;&#13;
				LEDr (3 downto 0) &lt;= "1001";&#13;
&#13;
          when RD_BLK =&gt;          -- Read a block of data from the SD card.&#13;
            -- Some default values for these...&#13;
            rtnData_v  := false;  -- Data is only returned to host in one place.&#13;
            bitCnt_v   := rx_v'length - 1;   -- Receiving byte-sized data.&#13;
            state_v    := RX_BITS;      -- Call the bit receiver routine.&#13;
            rtnState_v := RD_BLK;   -- Return here when done receiving a byte.&#13;
            if byteCnt_v = RD_BLK_SZ_C then  -- Initial read to prime the pump.&#13;
              byteCnt_v := byteCnt_v - 1;&#13;
            elsif byteCnt_v = RD_BLK_SZ_C -1 then  -- Then look for the data block start token.&#13;
              if rx_v = NO_TOKEN_C then  -- Receiving 0xFF means the card hasn't responded yet. Keep trying.&#13;
                null;&#13;
              elsif rx_v = START_TOKEN_C then&#13;
                rtnData_v := true;  -- Found the start token, so now start returning data byes to the host.&#13;
                byteCnt_v := byteCnt_v - 1;&#13;
              else  -- Getting anything else means something strange has happened.&#13;
                state_v := REPORT_ERROR;&#13;
              end if;&#13;
            elsif byteCnt_v &gt;= 3 then  -- Now bytes of data from the SD card are received.&#13;
              rtnData_v := true;        -- Return this data to the host.&#13;
              byteCnt_v := byteCnt_v - 1;&#13;
            elsif byteCnt_v = 2 then  -- Receive the 1st CRC byte at the end of the data block.&#13;
              byteCnt_v := byteCnt_v - 1;&#13;
            elsif byteCnt_v = 1 then    -- Receive the 2nd&#13;
              byteCnt_v := byteCnt_v - 1;&#13;
            else    -- Reading is done, so deselect the SD card.&#13;
              sclk_r     &lt;= LO;&#13;
              bitCnt_v   := 2;&#13;
              state_v    := DESELECT;&#13;
              rtnState_v := WAIT_FOR_HOST_RW;&#13;
            end if;&#13;
				LEDr (3 downto 0) &lt;= "1010";&#13;
            &#13;
          when WR_BLK =&gt;             -- Write a block of data to the SD card.&#13;
            -- Some default values for these...&#13;
            getCmdResponse_v := false;  -- Sending data bytes so there's no command response from SD card.&#13;
            bitCnt_v         := txData_v'length;  -- Transmitting byte-sized data.&#13;
            state_v          := START_TX;  -- Call the bit transmitter routine.&#13;
            rtnState_v       := WR_BLK;  -- Return here when done transmitting a byte.&#13;
            if byteCnt_v = WR_BLK_SZ_C then&#13;
              txData_v := NO_TOKEN_C;  -- Hold MOSI high for one byte before data block goes out.&#13;
            elsif byteCnt_v = WR_BLK_SZ_C - 1 then     -- Send start token.&#13;
              txData_v := START_TOKEN_C;   -- Starting token for data block.&#13;
            elsif byteCnt_v &gt;= 4 then   -- Now send bytes in the data block.&#13;
              hndShk_r &lt;= HI;           -- Signal host to provide data.&#13;
            -- The transmit shift register is loaded with data from host in the handshaking section above.&#13;
            elsif byteCnt_v = 3 or byteCnt_v = 2 then  -- Send two phony CRC bytes at end of packet.&#13;
              txData_v := FAKE_CRC_C;&#13;
            elsif byteCnt_v = 1 then&#13;
              bitCnt_v   := rx_v'length - 1;&#13;
              state_v    := RX_BITS;  -- Get response of SD card to the write operation.&#13;
              rtnState_v := WR_WAIT;&#13;
            else                        -- Check received response byte.&#13;
              if std_match(rx_v, DATA_ACCEPTED_C) then  -- Data block was accepted.&#13;
                state_v := WR_WAIT;  -- Wait for the SD card to finish writing the data into Flash.&#13;
              else                      -- Data block was rejected.&#13;
                error_o(15 downto 8) &lt;= rx_v;&#13;
                state_v              := REPORT_ERROR;  -- Report the error.&#13;
              end if;&#13;
            end if;&#13;
            byteCnt_v := byteCnt_v - 1;&#13;
				LEDr (3 downto 0) &lt;= "1011";&#13;
            &#13;
          when WR_WAIT =&gt;  -- Wait for SD card to finish writing the data block.&#13;
            -- The SD card will pull MISO low while it is busy, and raise it when it is done.&#13;
            sclk_r           &lt;= not sclk_r;    -- Toggle the SPI clock...&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- and set the duration of the next clock phase.&#13;
            if sclk_r = HI and miso_i = HI then  -- Data block has been written, so deselect the SD card.&#13;
              bitCnt_v   := 2;&#13;
              state_v    := DESELECT;&#13;
              rtnState_v := WAIT_FOR_HOST_RW;&#13;
            end if;&#13;
				LEDr (3 downto 0) &lt;= "1100";&#13;
            &#13;
          when START_TX =&gt;&#13;
            -- Start sending command/data by lowering SCLK and outputing MSB of command/data&#13;
            -- so it has plenty of setup before the rising edge of SCLK.&#13;
            sclk_r           &lt;= LO;  -- Lower the SCLK (although it should already be low).&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- Set the duration of the low SCLK.&#13;
            mosi_o           &lt;= tx_v(tx_v'high);  -- Output MSB of command/data.&#13;
            tx_v             := tx_v(tx_v'high-1 downto 0) &amp; ONE;  -- Shift command/data register by one bit.&#13;
            bitCnt_v         := bitCnt_v - 1;  -- The first bit has been sent, so decrement bit counter.&#13;
            state_v          := TX_BITS;  -- Go here to shift out the rest of the command/data bits.&#13;
				LEDr (3 downto 0) &lt;= "1101";&#13;
            &#13;
          when TX_BITS =&gt;  -- Shift out remaining command/data bits and (possibly) get response from SD card.&#13;
            sclk_r           &lt;= not sclk_r;    -- Toggle the SPI clock...&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- and set the duration of the next clock phase.&#13;
            if sclk_r = HI then&#13;
              -- SCLK is going to be flipped from high to low, so output the next command/data bit&#13;
              -- so it can setup while SCLK is low.&#13;
              if bitCnt_v /= 0 then  -- Keep sending bits until the bit counter hits zero.&#13;
                mosi_o   &lt;= tx_v(tx_v'high);&#13;
                tx_v     := tx_v(tx_v'high-1 downto 0) &amp; ONE;&#13;
                bitCnt_v := bitCnt_v - 1;&#13;
              else&#13;
                if getCmdResponse_v then&#13;
                  state_v  := GET_CMD_RESPONSE;  -- Get a response to the command from the SD card.&#13;
                  bitCnt_v := Response_t'length - 1;  -- Length of the expected response.&#13;
                else&#13;
                  state_v          := rtnState_v;  -- Return to calling state (no need to get a response).&#13;
                  sclkPhaseTimer_v := 0;  -- Clear timer so next SPI op can begin ASAP with SCLK low.&#13;
                end if;&#13;
              end if;&#13;
            end if;&#13;
				LEDr (3 downto 0) &lt;= "1110";&#13;
&#13;
          when GET_CMD_RESPONSE =&gt;  -- Get the response of the SD card to a command.&#13;
            if sclk_r = HI and miso_i = LO then  -- MISO will be held high by SD card until 1st bit of R1 response, which is 0.&#13;
              -- Shift in the MSB bit of the response.&#13;
              rx_v     := rx_v(rx_v'high-1 downto 0) &amp; miso_i;&#13;
              bitCnt_v := bitCnt_v - 1;&#13;
              state_v  := RX_BITS;  -- Now receive the reset of the response.&#13;
            end if;&#13;
            sclk_r           &lt;= not sclk_r;    -- Toggle the SPI clock...&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- and set the duration of the next clock phase.&#13;
				LEDr (3 downto 0) &lt;= "1010";&#13;
				&#13;
          when RX_BITS =&gt;               -- Receive bits from the SD card.&#13;
            if sclk_r = HI then    -- Bits enter after the rising edge of SCLK.&#13;
              rx_v := rx_v(rx_v'high-1 downto 0) &amp; miso_i;&#13;
              if bitCnt_v /= 0 then     -- More bits left to receive.&#13;
                bitCnt_v := bitCnt_v - 1;&#13;
              else                      -- Last bit has been received.&#13;
                if rtnData_v then       -- Send the received data to the host.&#13;
                  data_o   &lt;= rx_v;     -- Output received data to the host.&#13;
                  hndShk_r &lt;= HI;  -- Signal to the host that the data is ready.&#13;
                end if;&#13;
                if doDeselect_v then&#13;
                  bitCnt_v := 1;&#13;
                  state_v  := DESELECT;  -- De-select SD card before returning.&#13;
                else&#13;
                  state_v := rtnState_v;  -- Otherwise, return to calling state without de-selecting.&#13;
                end if;&#13;
              end if;&#13;
            end if;&#13;
            sclk_r           &lt;= not sclk_r;    -- Toggle the SPI clock...&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- and set the duration of the next clock phase.&#13;
            LEDr (3 downto 0) &lt;= "0000";&#13;
				&#13;
          when DESELECT =&gt;  -- De-select the SD card and send some clock pulses (Must enter with sclk at zero.)&#13;
            doDeselect_v     := false;  -- Once the de-select is done, clear the flag that caused it.&#13;
            cs_bo            &lt;= HI;     -- De-select the SD card.&#13;
            mosi_o           &lt;= HI;  -- Keep the data input of the SD card pulled high.&#13;
            state_v          := PULSE_SCLK;  -- Pulse the clock so the SD card will see the de-select.&#13;
            sclk_r           &lt;= LO;  -- Clock is set low so the next rising edge will see the new CS and MOSI&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- Set the duration of the next clock phase.&#13;
            LEDr (3 downto 0) &lt;= "0001";&#13;
				&#13;
          when PULSE_SCLK =&gt;  -- Issue some clock pulses. (Must enter with sclk at zero.)&#13;
            if sclk_r = HI then&#13;
              if bitCnt_v /= 0 then&#13;
                bitCnt_v := bitCnt_v - 1;&#13;
              else  -- Return to the calling routine when the pulse counter reaches zero.&#13;
                state_v := rtnState_v;&#13;
              end if;&#13;
            end if;&#13;
            sclk_r           &lt;= not sclk_r;    -- Toggle the SPI clock...&#13;
            sclkPhaseTimer_v := clkDivider_v;  -- and set the duration of the next clock phase.&#13;
            LEDr (3 downto 0) &lt;= "0010";  --nabood&#13;
				&#13;
          when REPORT_ERROR =&gt;  -- Report the error code and stall here until a reset occurs.&#13;
            error_o(rx_v'range) &lt;= rx_v;  -- Output the SD card response as the error code.&#13;
            busy_o              &lt;= NO;  -- Not busy.&#13;
				LEDr (3 downto 0) &lt;= "0011";&#13;
				&#13;
          when others =&gt;&#13;
            state_v := WAIT_FOR_HOST_RW;&#13;
				LEDr (3 downto 0) &lt;= "0100"; -- hamin bood&#13;
        end case;&#13;
      end if;&#13;
    end if;&#13;
  end process;&#13;
&#13;
  sclk_o   &lt;= sclk_r;    -- Output the generated SPI clock for the SD card.&#13;
  hndShk_o &lt;= hndShk_r;  -- Output the generated handshake to the host.&#13;
  LED (3 downto 0) &lt;= LEDr (3 downto 0);&#13;
end architecture;&#13;
&#13;
&#13;
&#13;
&#13;
--**********************************************************************&#13;
-- This module connects the SD card controller interface to a HostIoToDut&#13;
-- interface so the controller can be tested from a PC over a USB link.&#13;
--**********************************************************************&#13;
</vhdl>
</project>
